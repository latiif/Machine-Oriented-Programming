
./Debug/Upp23.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
// bit  7-0 = styrregister

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void ){
	__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f9f6 	bl	200003f4 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
		" LDR R0,=0x2001C000\n"		/* set stack */
		" MOV SP,R0\n"
		" BL main\n"				/* call main */
		"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:
void ascii_write_cmd(unsigned char command);
void ascii_write_data(unsigned char data);
unsigned char ascii_read_status(void);
unsigned char ascii_read_data(void);

void delay_250ns(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/4) -1);
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b06      	ldr	r3, [pc, #24]	; (20000048 <delay_250ns+0x38>)
20000030:	681a      	ldr	r2, [r3, #0]
20000032:	2380      	movs	r3, #128	; 0x80
20000034:	025b      	lsls	r3, r3, #9
20000036:	4013      	ands	r3, r2
20000038:	d0f9      	beq.n	2000002e <delay_250ns+0x1e>
	*STK_CTRL = 0;
2000003a:	4b03      	ldr	r3, [pc, #12]	; (20000048 <delay_250ns+0x38>)
2000003c:	2200      	movs	r2, #0
2000003e:	601a      	str	r2, [r3, #0]
}
20000040:	46c0      	nop			; (mov r8, r8)
20000042:	46bd      	mov	sp, r7
20000044:	bd80      	pop	{r7, pc}
20000046:	46c0      	nop			; (mov r8, r8)
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0

20000054 <delay_micro>:

void delay_micro(unsigned int us){
20000054:	b580      	push	{r7, lr}
20000056:	b082      	sub	sp, #8
20000058:	af00      	add	r7, sp, #0
2000005a:	6078      	str	r0, [r7, #4]
	while(us--) {
2000005c:	e007      	b.n	2000006e <delay_micro+0x1a>
		delay_250ns();
2000005e:	f7ff ffd7 	bl	20000010 <delay_250ns>
		delay_250ns();
20000062:	f7ff ffd5 	bl	20000010 <delay_250ns>
		delay_250ns();
20000066:	f7ff ffd3 	bl	20000010 <delay_250ns>
		delay_250ns();
2000006a:	f7ff ffd1 	bl	20000010 <delay_250ns>
	while(us--) {
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	1e5a      	subs	r2, r3, #1
20000072:	607a      	str	r2, [r7, #4]
20000074:	2b00      	cmp	r3, #0
20000076:	d1f2      	bne.n	2000005e <delay_micro+0xa>
	}
}
20000078:	46c0      	nop			; (mov r8, r8)
2000007a:	46bd      	mov	sp, r7
2000007c:	b002      	add	sp, #8
2000007e:	bd80      	pop	{r7, pc}

20000080 <delay_milli>:

void delay_milli(unsigned int ms){
20000080:	b580      	push	{r7, lr}
20000082:	b082      	sub	sp, #8
20000084:	af00      	add	r7, sp, #0
20000086:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		while(ms--)
20000088:	e002      	b.n	20000090 <delay_milli+0x10>
			delay_micro(1);
2000008a:	2001      	movs	r0, #1
2000008c:	f7ff ffe2 	bl	20000054 <delay_micro>
		while(ms--)
20000090:	687b      	ldr	r3, [r7, #4]
20000092:	1e5a      	subs	r2, r3, #1
20000094:	607a      	str	r2, [r7, #4]
20000096:	2b00      	cmp	r3, #0
20000098:	d1f7      	bne.n	2000008a <delay_milli+0xa>
	#else
		while(ms--)
			delay_micro(1000);
	#endif
}
2000009a:	46c0      	nop			; (mov r8, r8)
2000009c:	46bd      	mov	sp, r7
2000009e:	b002      	add	sp, #8
200000a0:	bd80      	pop	{r7, pc}

200000a2 <ascii_init>:

void ascii_init(void){
200000a2:	b580      	push	{r7, lr}
200000a4:	af00      	add	r7, sp, #0
	//initiera displayen:
		while((ascii_read_status() & 0x80) == 0x80){} 
200000a6:	46c0      	nop			; (mov r8, r8)
200000a8:	f000 f8c1 	bl	2000022e <ascii_read_status>
200000ac:	0003      	movs	r3, r0
200000ae:	001a      	movs	r2, r3
200000b0:	2380      	movs	r3, #128	; 0x80
200000b2:	4013      	ands	r3, r2
200000b4:	2b80      	cmp	r3, #128	; 0x80
200000b6:	d0f7      	beq.n	200000a8 <ascii_init+0x6>
		delay_micro(20); 
200000b8:	2014      	movs	r0, #20
200000ba:	f7ff ffcb 	bl	20000054 <delay_micro>
		ascii_write_cmd(0b0000111000); 
200000be:	2038      	movs	r0, #56	; 0x38
200000c0:	f000 f874 	bl	200001ac <ascii_write_cmd>
		delay_micro(100);
200000c4:	2064      	movs	r0, #100	; 0x64
200000c6:	f7ff ffc5 	bl	20000054 <delay_micro>
		
	//display control:
		while((ascii_read_status() & 0x80) == 0x80){} 
200000ca:	46c0      	nop			; (mov r8, r8)
200000cc:	f000 f8af 	bl	2000022e <ascii_read_status>
200000d0:	0003      	movs	r3, r0
200000d2:	001a      	movs	r2, r3
200000d4:	2380      	movs	r3, #128	; 0x80
200000d6:	4013      	ands	r3, r2
200000d8:	2b80      	cmp	r3, #128	; 0x80
200000da:	d0f7      	beq.n	200000cc <ascii_init+0x2a>
		delay_micro(20); 
200000dc:	2014      	movs	r0, #20
200000de:	f7ff ffb9 	bl	20000054 <delay_micro>
		ascii_write_cmd(0b000001110); 
200000e2:	200e      	movs	r0, #14
200000e4:	f000 f862 	bl	200001ac <ascii_write_cmd>
		delay_micro(100); 
200000e8:	2064      	movs	r0, #100	; 0x64
200000ea:	f7ff ffb3 	bl	20000054 <delay_micro>
		
	// entry mode set
		while((ascii_read_status() & 0x80) == 0x80){} //Vänta tills displayed är redo
200000ee:	46c0      	nop			; (mov r8, r8)
200000f0:	f000 f89d 	bl	2000022e <ascii_read_status>
200000f4:	0003      	movs	r3, r0
200000f6:	001a      	movs	r2, r3
200000f8:	2380      	movs	r3, #128	; 0x80
200000fa:	4013      	ands	r3, r2
200000fc:	2b80      	cmp	r3, #128	; 0x80
200000fe:	d0f7      	beq.n	200000f0 <ascii_init+0x4e>
		delay_micro(20); 
20000100:	2014      	movs	r0, #20
20000102:	f7ff ffa7 	bl	20000054 <delay_micro>
		ascii_write_cmd(0b000001110); 
20000106:	200e      	movs	r0, #14
20000108:	f000 f850 	bl	200001ac <ascii_write_cmd>
		delay_micro(100); 
2000010c:	2064      	movs	r0, #100	; 0x64
2000010e:	f7ff ffa1 	bl	20000054 <delay_micro>
}
20000112:	46c0      	nop			; (mov r8, r8)
20000114:	46bd      	mov	sp, r7
20000116:	bd80      	pop	{r7, pc}

20000118 <ascii_ctrl_bit_set>:

void ascii_ctrl_bit_set(unsigned char x){
20000118:	b580      	push	{r7, lr}
2000011a:	b084      	sub	sp, #16
2000011c:	af00      	add	r7, sp, #0
2000011e:	0002      	movs	r2, r0
20000120:	1dfb      	adds	r3, r7, #7
20000122:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och ettställ de bitar som är 1 i x
	unsigned char c;
	c = *portOdrLow;
20000124:	4a0c      	ldr	r2, [pc, #48]	; (20000158 <ascii_ctrl_bit_set+0x40>)
20000126:	230f      	movs	r3, #15
20000128:	18fb      	adds	r3, r7, r3
2000012a:	7812      	ldrb	r2, [r2, #0]
2000012c:	701a      	strb	r2, [r3, #0]
	c |= (B_SELECT | x);
2000012e:	1dfa      	adds	r2, r7, #7
20000130:	230f      	movs	r3, #15
20000132:	18fb      	adds	r3, r7, r3
20000134:	7812      	ldrb	r2, [r2, #0]
20000136:	781b      	ldrb	r3, [r3, #0]
20000138:	4313      	orrs	r3, r2
2000013a:	b2da      	uxtb	r2, r3
2000013c:	230f      	movs	r3, #15
2000013e:	18fb      	adds	r3, r7, r3
20000140:	2104      	movs	r1, #4
20000142:	430a      	orrs	r2, r1
20000144:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20000146:	4a04      	ldr	r2, [pc, #16]	; (20000158 <ascii_ctrl_bit_set+0x40>)
20000148:	230f      	movs	r3, #15
2000014a:	18fb      	adds	r3, r7, r3
2000014c:	781b      	ldrb	r3, [r3, #0]
2000014e:	7013      	strb	r3, [r2, #0]
}
20000150:	46c0      	nop			; (mov r8, r8)
20000152:	46bd      	mov	sp, r7
20000154:	b004      	add	sp, #16
20000156:	bd80      	pop	{r7, pc}
20000158:	40021014 	andmi	r1, r2, r4, lsl r0

2000015c <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
2000015c:	b580      	push	{r7, lr}
2000015e:	b084      	sub	sp, #16
20000160:	af00      	add	r7, sp, #0
20000162:	0002      	movs	r2, r0
20000164:	1dfb      	adds	r3, r7, #7
20000166:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och nollställ de bitar som är 1 i x
	unsigned char c;
	c = *portOdrLow;
20000168:	4a0f      	ldr	r2, [pc, #60]	; (200001a8 <ascii_ctrl_bit_clear+0x4c>)
2000016a:	230f      	movs	r3, #15
2000016c:	18fb      	adds	r3, r7, r3
2000016e:	7812      	ldrb	r2, [r2, #0]
20000170:	701a      	strb	r2, [r3, #0]
	c = (B_SELECT | c & ~x);
20000172:	1dfb      	adds	r3, r7, #7
20000174:	781b      	ldrb	r3, [r3, #0]
20000176:	b25b      	sxtb	r3, r3
20000178:	43db      	mvns	r3, r3
2000017a:	b25b      	sxtb	r3, r3
2000017c:	220f      	movs	r2, #15
2000017e:	18ba      	adds	r2, r7, r2
20000180:	7812      	ldrb	r2, [r2, #0]
20000182:	b252      	sxtb	r2, r2
20000184:	4013      	ands	r3, r2
20000186:	b25b      	sxtb	r3, r3
20000188:	2204      	movs	r2, #4
2000018a:	4313      	orrs	r3, r2
2000018c:	b25a      	sxtb	r2, r3
2000018e:	230f      	movs	r3, #15
20000190:	18fb      	adds	r3, r7, r3
20000192:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20000194:	4a04      	ldr	r2, [pc, #16]	; (200001a8 <ascii_ctrl_bit_clear+0x4c>)
20000196:	230f      	movs	r3, #15
20000198:	18fb      	adds	r3, r7, r3
2000019a:	781b      	ldrb	r3, [r3, #0]
2000019c:	7013      	strb	r3, [r2, #0]
}
2000019e:	46c0      	nop			; (mov r8, r8)
200001a0:	46bd      	mov	sp, r7
200001a2:	b004      	add	sp, #16
200001a4:	bd80      	pop	{r7, pc}
200001a6:	46c0      	nop			; (mov r8, r8)
200001a8:	40021014 	andmi	r1, r2, r4, lsl r0

200001ac <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
200001ac:	b580      	push	{r7, lr}
200001ae:	b082      	sub	sp, #8
200001b0:	af00      	add	r7, sp, #0
200001b2:	0002      	movs	r2, r0
200001b4:	1dfb      	adds	r3, r7, #7
200001b6:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
200001b8:	2001      	movs	r0, #1
200001ba:	f7ff ffcf 	bl	2000015c <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
200001be:	2002      	movs	r0, #2
200001c0:	f7ff ffcc 	bl	2000015c <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
200001c4:	1dfb      	adds	r3, r7, #7
200001c6:	781b      	ldrb	r3, [r3, #0]
200001c8:	0018      	movs	r0, r3
200001ca:	f000 f885 	bl	200002d8 <ascii_write_controller>
}
200001ce:	46c0      	nop			; (mov r8, r8)
200001d0:	46bd      	mov	sp, r7
200001d2:	b002      	add	sp, #8
200001d4:	bd80      	pop	{r7, pc}

200001d6 <ascii_write_data>:

void ascii_write_data(unsigned char data){
200001d6:	b580      	push	{r7, lr}
200001d8:	b082      	sub	sp, #8
200001da:	af00      	add	r7, sp, #0
200001dc:	0002      	movs	r2, r0
200001de:	1dfb      	adds	r3, r7, #7
200001e0:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
200001e2:	2001      	movs	r0, #1
200001e4:	f7ff ff98 	bl	20000118 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
200001e8:	2002      	movs	r0, #2
200001ea:	f7ff ffb7 	bl	2000015c <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
200001ee:	1dfb      	adds	r3, r7, #7
200001f0:	781b      	ldrb	r3, [r3, #0]
200001f2:	0018      	movs	r0, r3
200001f4:	f000 f870 	bl	200002d8 <ascii_write_controller>
}
200001f8:	46c0      	nop			; (mov r8, r8)
200001fa:	46bd      	mov	sp, r7
200001fc:	b002      	add	sp, #8
200001fe:	bd80      	pop	{r7, pc}

20000200 <clear_disp>:

void clear_disp()
{
20000200:	b580      	push	{r7, lr}
20000202:	af00      	add	r7, sp, #0
	while ((ascii_read_status() & 0x80)==0x80){}
20000204:	46c0      	nop			; (mov r8, r8)
20000206:	f000 f812 	bl	2000022e <ascii_read_status>
2000020a:	0003      	movs	r3, r0
2000020c:	001a      	movs	r2, r3
2000020e:	2380      	movs	r3, #128	; 0x80
20000210:	4013      	ands	r3, r2
20000212:	2b80      	cmp	r3, #128	; 0x80
20000214:	d0f7      	beq.n	20000206 <clear_disp+0x6>
	
	delay_micro(80);
20000216:	2050      	movs	r0, #80	; 0x50
20000218:	f7ff ff1c 	bl	20000054 <delay_micro>
	ascii_write_cmd(1);
2000021c:	2001      	movs	r0, #1
2000021e:	f7ff ffc5 	bl	200001ac <ascii_write_cmd>
	delay_milli(200);
20000222:	20c8      	movs	r0, #200	; 0xc8
20000224:	f7ff ff2c 	bl	20000080 <delay_milli>
}
20000228:	46c0      	nop			; (mov r8, r8)
2000022a:	46bd      	mov	sp, r7
2000022c:	bd80      	pop	{r7, pc}

2000022e <ascii_read_status>:

unsigned char ascii_read_status(void){
2000022e:	b590      	push	{r4, r7, lr}
20000230:	b083      	sub	sp, #12
20000232:	af00      	add	r7, sp, #0
	//sätt Port E bit15-8 som ingångar
	*portModer &= 0x0000FFFF;
20000234:	4b11      	ldr	r3, [pc, #68]	; (2000027c <ascii_read_status+0x4e>)
20000236:	4a11      	ldr	r2, [pc, #68]	; (2000027c <ascii_read_status+0x4e>)
20000238:	6812      	ldr	r2, [r2, #0]
2000023a:	0412      	lsls	r2, r2, #16
2000023c:	0c12      	lsrs	r2, r2, #16
2000023e:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000240:	2001      	movs	r0, #1
20000242:	f7ff ff8b 	bl	2000015c <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20000246:	2002      	movs	r0, #2
20000248:	f7ff ff66 	bl	20000118 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
2000024c:	1dfc      	adds	r4, r7, #7
2000024e:	f000 f85b 	bl	20000308 <ascii_read_controller>
20000252:	0003      	movs	r3, r0
20000254:	7023      	strb	r3, [r4, #0]
	//sätt Port E bit15-8 som utgångar
	*portModer &= 0x0000FFFF;
20000256:	4b09      	ldr	r3, [pc, #36]	; (2000027c <ascii_read_status+0x4e>)
20000258:	4a08      	ldr	r2, [pc, #32]	; (2000027c <ascii_read_status+0x4e>)
2000025a:	6812      	ldr	r2, [r2, #0]
2000025c:	0412      	lsls	r2, r2, #16
2000025e:	0c12      	lsrs	r2, r2, #16
20000260:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
20000262:	4b06      	ldr	r3, [pc, #24]	; (2000027c <ascii_read_status+0x4e>)
20000264:	4a05      	ldr	r2, [pc, #20]	; (2000027c <ascii_read_status+0x4e>)
20000266:	6812      	ldr	r2, [r2, #0]
20000268:	4905      	ldr	r1, [pc, #20]	; (20000280 <ascii_read_status+0x52>)
2000026a:	430a      	orrs	r2, r1
2000026c:	601a      	str	r2, [r3, #0]
	return rv;
2000026e:	1dfb      	adds	r3, r7, #7
20000270:	781b      	ldrb	r3, [r3, #0]
}
20000272:	0018      	movs	r0, r3
20000274:	46bd      	mov	sp, r7
20000276:	b003      	add	sp, #12
20000278:	bd90      	pop	{r4, r7, pc}
2000027a:	46c0      	nop			; (mov r8, r8)
2000027c:	40021000 	andmi	r1, r2, r0
20000280:	55550000 	ldrbpl	r0, [r5, #-0]

20000284 <ascii_read_data>:

unsigned char ascii_read_data(void){
20000284:	b590      	push	{r4, r7, lr}
20000286:	b083      	sub	sp, #12
20000288:	af00      	add	r7, sp, #0
	//sätt Port E bit15-8 som ingångar
	*portModer &= 0x0000FFFF;
2000028a:	4b11      	ldr	r3, [pc, #68]	; (200002d0 <ascii_read_data+0x4c>)
2000028c:	4a10      	ldr	r2, [pc, #64]	; (200002d0 <ascii_read_data+0x4c>)
2000028e:	6812      	ldr	r2, [r2, #0]
20000290:	0412      	lsls	r2, r2, #16
20000292:	0c12      	lsrs	r2, r2, #16
20000294:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000296:	2001      	movs	r0, #1
20000298:	f7ff ff3e 	bl	20000118 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
2000029c:	2002      	movs	r0, #2
2000029e:	f7ff ff3b 	bl	20000118 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
200002a2:	1dfc      	adds	r4, r7, #7
200002a4:	f000 f830 	bl	20000308 <ascii_read_controller>
200002a8:	0003      	movs	r3, r0
200002aa:	7023      	strb	r3, [r4, #0]
	//sätt Port E bit15-8 som utgångar
	*portModer &= 0x0000FFFF;
200002ac:	4b08      	ldr	r3, [pc, #32]	; (200002d0 <ascii_read_data+0x4c>)
200002ae:	4a08      	ldr	r2, [pc, #32]	; (200002d0 <ascii_read_data+0x4c>)
200002b0:	6812      	ldr	r2, [r2, #0]
200002b2:	0412      	lsls	r2, r2, #16
200002b4:	0c12      	lsrs	r2, r2, #16
200002b6:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
200002b8:	4b05      	ldr	r3, [pc, #20]	; (200002d0 <ascii_read_data+0x4c>)
200002ba:	4a05      	ldr	r2, [pc, #20]	; (200002d0 <ascii_read_data+0x4c>)
200002bc:	6812      	ldr	r2, [r2, #0]
200002be:	4905      	ldr	r1, [pc, #20]	; (200002d4 <ascii_read_data+0x50>)
200002c0:	430a      	orrs	r2, r1
200002c2:	601a      	str	r2, [r3, #0]
	return rv;
200002c4:	1dfb      	adds	r3, r7, #7
200002c6:	781b      	ldrb	r3, [r3, #0]
}
200002c8:	0018      	movs	r0, r3
200002ca:	46bd      	mov	sp, r7
200002cc:	b003      	add	sp, #12
200002ce:	bd90      	pop	{r4, r7, pc}
200002d0:	40021000 	andmi	r1, r2, r0
200002d4:	55550000 	ldrbpl	r0, [r5, #-0]

200002d8 <ascii_write_controller>:

void ascii_write_controller(unsigned char c){
200002d8:	b580      	push	{r7, lr}
200002da:	b082      	sub	sp, #8
200002dc:	af00      	add	r7, sp, #0
200002de:	0002      	movs	r2, r0
200002e0:	1dfb      	adds	r3, r7, #7
200002e2:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
200002e4:	2040      	movs	r0, #64	; 0x40
200002e6:	f7ff ff17 	bl	20000118 <ascii_ctrl_bit_set>
	*portOdrHigh = c;
200002ea:	4a06      	ldr	r2, [pc, #24]	; (20000304 <ascii_write_controller+0x2c>)
200002ec:	1dfb      	adds	r3, r7, #7
200002ee:	781b      	ldrb	r3, [r3, #0]
200002f0:	7013      	strb	r3, [r2, #0]
	delay_250ns();
200002f2:	f7ff fe8d 	bl	20000010 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
200002f6:	2040      	movs	r0, #64	; 0x40
200002f8:	f7ff ff30 	bl	2000015c <ascii_ctrl_bit_clear>
}
200002fc:	46c0      	nop			; (mov r8, r8)
200002fe:	46bd      	mov	sp, r7
20000300:	b002      	add	sp, #8
20000302:	bd80      	pop	{r7, pc}
20000304:	40021015 	andmi	r1, r2, r5, lsl r0

20000308 <ascii_read_controller>:

unsigned char ascii_read_controller(void){
20000308:	b580      	push	{r7, lr}
2000030a:	b082      	sub	sp, #8
2000030c:	af00      	add	r7, sp, #0
	unsigned char c;
	ascii_ctrl_bit_set(B_E);
2000030e:	2040      	movs	r0, #64	; 0x40
20000310:	f7ff ff02 	bl	20000118 <ascii_ctrl_bit_set>
	delay_250ns();
20000314:	f7ff fe7c 	bl	20000010 <delay_250ns>
	delay_250ns();
20000318:	f7ff fe7a 	bl	20000010 <delay_250ns>
	c = *portIdrHigh;
2000031c:	4a06      	ldr	r2, [pc, #24]	; (20000338 <ascii_read_controller+0x30>)
2000031e:	1dfb      	adds	r3, r7, #7
20000320:	7812      	ldrb	r2, [r2, #0]
20000322:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20000324:	2040      	movs	r0, #64	; 0x40
20000326:	f7ff ff19 	bl	2000015c <ascii_ctrl_bit_clear>
	return c;
2000032a:	1dfb      	adds	r3, r7, #7
2000032c:	781b      	ldrb	r3, [r3, #0]
}
2000032e:	0018      	movs	r0, r3
20000330:	46bd      	mov	sp, r7
20000332:	b002      	add	sp, #8
20000334:	bd80      	pop	{r7, pc}
20000336:	46c0      	nop			; (mov r8, r8)
20000338:	40021011 	andmi	r1, r2, r1, lsl r0

2000033c <ascii_write_char>:

void ascii_write_char(unsigned char c){
2000033c:	b580      	push	{r7, lr}
2000033e:	b082      	sub	sp, #8
20000340:	af00      	add	r7, sp, #0
20000342:	0002      	movs	r2, r0
20000344:	1dfb      	adds	r3, r7, #7
20000346:	701a      	strb	r2, [r3, #0]
		while((ascii_read_status() & 0x80) == 0x80){} 
20000348:	46c0      	nop			; (mov r8, r8)
2000034a:	f7ff ff70 	bl	2000022e <ascii_read_status>
2000034e:	0003      	movs	r3, r0
20000350:	001a      	movs	r2, r3
20000352:	2380      	movs	r3, #128	; 0x80
20000354:	4013      	ands	r3, r2
20000356:	2b80      	cmp	r3, #128	; 0x80
20000358:	d0f7      	beq.n	2000034a <ascii_write_char+0xe>
		delay_micro(8); 
2000035a:	2008      	movs	r0, #8
2000035c:	f7ff fe7a 	bl	20000054 <delay_micro>
		ascii_write_data(c);
20000360:	1dfb      	adds	r3, r7, #7
20000362:	781b      	ldrb	r3, [r3, #0]
20000364:	0018      	movs	r0, r3
20000366:	f7ff ff36 	bl	200001d6 <ascii_write_data>
		delay_micro(50); 
2000036a:	2032      	movs	r0, #50	; 0x32
2000036c:	f7ff fe72 	bl	20000054 <delay_micro>
}
20000370:	46c0      	nop			; (mov r8, r8)
20000372:	46bd      	mov	sp, r7
20000374:	b002      	add	sp, #8
20000376:	bd80      	pop	{r7, pc}

20000378 <ascii_goToXY>:

void ascii_goToXY(unsigned char row, unsigned char column){
20000378:	b580      	push	{r7, lr}
2000037a:	b084      	sub	sp, #16
2000037c:	af00      	add	r7, sp, #0
2000037e:	0002      	movs	r2, r0
20000380:	1dfb      	adds	r3, r7, #7
20000382:	701a      	strb	r2, [r3, #0]
20000384:	1dbb      	adds	r3, r7, #6
20000386:	1c0a      	adds	r2, r1, #0
20000388:	701a      	strb	r2, [r3, #0]
	unsigned char address = row-1;
2000038a:	230f      	movs	r3, #15
2000038c:	18fb      	adds	r3, r7, r3
2000038e:	1dfa      	adds	r2, r7, #7
20000390:	7812      	ldrb	r2, [r2, #0]
20000392:	3a01      	subs	r2, #1
20000394:	701a      	strb	r2, [r3, #0]
	if(column == 2){
20000396:	1dbb      	adds	r3, r7, #6
20000398:	781b      	ldrb	r3, [r3, #0]
2000039a:	2b02      	cmp	r3, #2
2000039c:	d106      	bne.n	200003ac <ascii_goToXY+0x34>
		address += 0x40;
2000039e:	230f      	movs	r3, #15
200003a0:	18fb      	adds	r3, r7, r3
200003a2:	220f      	movs	r2, #15
200003a4:	18ba      	adds	r2, r7, r2
200003a6:	7812      	ldrb	r2, [r2, #0]
200003a8:	3240      	adds	r2, #64	; 0x40
200003aa:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | address);
200003ac:	230f      	movs	r3, #15
200003ae:	18fb      	adds	r3, r7, r3
200003b0:	781b      	ldrb	r3, [r3, #0]
200003b2:	2280      	movs	r2, #128	; 0x80
200003b4:	4252      	negs	r2, r2
200003b6:	4313      	orrs	r3, r2
200003b8:	b2db      	uxtb	r3, r3
200003ba:	0018      	movs	r0, r3
200003bc:	f7ff fef6 	bl	200001ac <ascii_write_cmd>
}
200003c0:	46c0      	nop			; (mov r8, r8)
200003c2:	46bd      	mov	sp, r7
200003c4:	b004      	add	sp, #16
200003c6:	bd80      	pop	{r7, pc}

200003c8 <init_app>:

void init_app(void){
200003c8:	b580      	push	{r7, lr}
200003ca:	af00      	add	r7, sp, #0
	
	#ifdef USBDM
		*((unsigned long *) 0x40023830) = 0x18;
200003cc:	4b06      	ldr	r3, [pc, #24]	; (200003e8 <init_app+0x20>)
200003ce:	2218      	movs	r2, #24
200003d0:	601a      	str	r2, [r3, #0]
		__asm volatile ("LDR R0,=0x8000209\n BLX R0 \n");
200003d2:	482b      	ldr	r0, [pc, #172]	; (20000480 <main+0x8c>)
200003d4:	4780      	blx	r0
	#endif
	
	
	*portModer = 0x555555555;
200003d6:	4b05      	ldr	r3, [pc, #20]	; (200003ec <init_app+0x24>)
200003d8:	4a05      	ldr	r2, [pc, #20]	; (200003f0 <init_app+0x28>)
200003da:	601a      	str	r2, [r3, #0]
	ascii_init();
200003dc:	f7ff fe61 	bl	200000a2 <ascii_init>
}
200003e0:	46c0      	nop			; (mov r8, r8)
200003e2:	46bd      	mov	sp, r7
200003e4:	bd80      	pop	{r7, pc}
200003e6:	46c0      	nop			; (mov r8, r8)
200003e8:	40023830 	andmi	r3, r2, r0, lsr r8
200003ec:	40021000 	andmi	r1, r2, r0
200003f0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200003f4 <main>:

void main(void){
200003f4:	b590      	push	{r4, r7, lr}
200003f6:	b08b      	sub	sp, #44	; 0x2c
200003f8:	af00      	add	r7, sp, #0
	char *s;
	char test1[] = "Alfanumerisk ";
200003fa:	2314      	movs	r3, #20
200003fc:	18fb      	adds	r3, r7, r3
200003fe:	4a1e      	ldr	r2, [pc, #120]	; (20000478 <main+0x84>)
20000400:	ca13      	ldmia	r2!, {r0, r1, r4}
20000402:	c313      	stmia	r3!, {r0, r1, r4}
20000404:	8812      	ldrh	r2, [r2, #0]
20000406:	801a      	strh	r2, [r3, #0]
	char test2[] = "Display - test";
20000408:	1d3b      	adds	r3, r7, #4
2000040a:	4a1c      	ldr	r2, [pc, #112]	; (2000047c <main+0x88>)
2000040c:	ca13      	ldmia	r2!, {r0, r1, r4}
2000040e:	c313      	stmia	r3!, {r0, r1, r4}
20000410:	8811      	ldrh	r1, [r2, #0]
20000412:	8019      	strh	r1, [r3, #0]
20000414:	7892      	ldrb	r2, [r2, #2]
20000416:	709a      	strb	r2, [r3, #2]
	
	
	init_app();
20000418:	f7ff ffd6 	bl	200003c8 <init_app>
	

	while (1)
		{
			clear_disp();
2000041c:	f7ff fef0 	bl	20000200 <clear_disp>
			ascii_goToXY(1,1);
20000420:	2101      	movs	r1, #1
20000422:	2001      	movs	r0, #1
20000424:	f7ff ffa8 	bl	20000378 <ascii_goToXY>
			s = test1;
20000428:	2314      	movs	r3, #20
2000042a:	18fb      	adds	r3, r7, r3
2000042c:	627b      	str	r3, [r7, #36]	; 0x24
			while(*s){
2000042e:	e006      	b.n	2000043e <main+0x4a>
				ascii_write_char(*s++);
20000430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000432:	1c5a      	adds	r2, r3, #1
20000434:	627a      	str	r2, [r7, #36]	; 0x24
20000436:	781b      	ldrb	r3, [r3, #0]
20000438:	0018      	movs	r0, r3
2000043a:	f7ff ff7f 	bl	2000033c <ascii_write_char>
			while(*s){
2000043e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000440:	781b      	ldrb	r3, [r3, #0]
20000442:	2b00      	cmp	r3, #0
20000444:	d1f4      	bne.n	20000430 <main+0x3c>
			}
			ascii_goToXY(1,2);
20000446:	2102      	movs	r1, #2
20000448:	2001      	movs	r0, #1
2000044a:	f7ff ff95 	bl	20000378 <ascii_goToXY>
			s = test2;
2000044e:	1d3b      	adds	r3, r7, #4
20000450:	627b      	str	r3, [r7, #36]	; 0x24
			while(*s){
20000452:	e006      	b.n	20000462 <main+0x6e>
				ascii_write_char(*s++);
20000454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000456:	1c5a      	adds	r2, r3, #1
20000458:	627a      	str	r2, [r7, #36]	; 0x24
2000045a:	781b      	ldrb	r3, [r3, #0]
2000045c:	0018      	movs	r0, r3
2000045e:	f7ff ff6d 	bl	2000033c <ascii_write_char>
			while(*s){
20000462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000464:	781b      	ldrb	r3, [r3, #0]
20000466:	2b00      	cmp	r3, #0
20000468:	d1f4      	bne.n	20000454 <main+0x60>
			}
			
			delay_milli(500);
2000046a:	23fa      	movs	r3, #250	; 0xfa
2000046c:	005b      	lsls	r3, r3, #1
2000046e:	0018      	movs	r0, r3
20000470:	f7ff fe06 	bl	20000080 <delay_milli>
			clear_disp();
20000474:	e7d2      	b.n	2000041c <main+0x28>
20000476:	46c0      	nop			; (mov r8, r8)
20000478:	20000484 	andcs	r0, r0, r4, lsl #9
2000047c:	20000494 	mulcs	r0, r4, r4
20000480:	08000209 	stmdaeq	r0, {r0, r3, r9}
20000484:	61666c41 	cmnvs	r6, r1, asr #24
20000488:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
2000048c:	6b736972 	blvs	21cdaa5c <main+0x1cda668>
20000490:	00000020 	andeq	r0, r0, r0, lsr #32
20000494:	70736944 	rsbsvc	r6, r3, r4, asr #18
20000498:	2079616c 	rsbscs	r6, r9, ip, ror #2
2000049c:	6574202d 	ldrbvs	r2, [r4, #-45]!	; 0xffffffd3
200004a0:	00007473 	andeq	r7, r0, r3, ror r4

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000002d5 	ldrdeq	r0, [r0], -r5
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	000000d9 	ldrdeq	r0, [r0], -r9
  10:	0001870c 	andeq	r8, r1, ip, lsl #14
	...
  20:	01710200 	cmneq	r1, r0, lsl #4
  24:	c7010000 	strgt	r0, [r1, -r0]
  28:	200003f4 	strdcs	r0, [r0], -r4
  2c:	0000008c 	andeq	r0, r0, ip, lsl #1
  30:	005f9c01 	subseq	r9, pc, r1, lsl #24
  34:	73030000 	movwvc	r0, #12288	; 0x3000
  38:	5fc80100 	svcpl	0x00c80100
  3c:	02000000 	andeq	r0, r0, #0
  40:	b7046c91 			; <UNDEFINED> instruction: 0xb7046c91
  44:	01000001 	tsteq	r0, r1
  48:	00006cc9 	andeq	r6, r0, r9, asr #25
  4c:	5c910200 	lfmpl	f0, 4, [r1], {0}
  50:	0001bd04 	andeq	fp, r1, r4, lsl #26
  54:	83ca0100 	bichi	r0, sl, #0, 2
  58:	02000000 	andeq	r0, r0, #0
  5c:	05004c91 	streq	r4, [r0, #-3217]	; 0xfffff36f
  60:	00006504 	andeq	r6, r0, r4, lsl #10
  64:	08010600 	stmdaeq	r1, {r9, sl}
  68:	000000d4 	ldrdeq	r0, [r0], -r4
  6c:	00006507 	andeq	r6, r0, r7, lsl #10
  70:	00007c00 	andeq	r7, r0, r0, lsl #24
  74:	007c0800 	rsbseq	r0, ip, r0, lsl #16
  78:	000d0000 	andeq	r0, sp, r0
  7c:	d2070406 	andle	r0, r7, #100663296	; 0x6000000
  80:	07000001 	streq	r0, [r0, -r1]
  84:	00000065 	andeq	r0, r0, r5, rrx
  88:	00000093 	muleq	r0, r3, r0
  8c:	00007c08 	andeq	r7, r0, r8, lsl #24
  90:	09000e00 	stmdbeq	r0, {r9, sl, fp}
  94:	00000176 	andeq	r0, r0, r6, ror r1
  98:	03c8bb01 	biceq	fp, r8, #1024	; 0x400
  9c:	002c2000 	eoreq	r2, ip, r0
  a0:	9c010000 	stcls	0, cr0, [r1], {-0}
  a4:	00005b02 	andeq	r5, r0, r2, lsl #22
  a8:	78b30100 	ldmvc	r3!, {r8}
  ac:	50200003 	eorpl	r0, r0, r3
  b0:	01000000 	mrseq	r0, (UNDEF: 0)
  b4:	0000e49c 	muleq	r0, ip, r4
  b8:	6f720a00 	svcvs	0x00720a00
  bc:	b3010077 	movwlt	r0, #4215	; 0x1077
  c0:	000000e4 	andeq	r0, r0, r4, ror #1
  c4:	0b6f9102 	bleq	1be44d4 <startup-0x1e41bb2c>
  c8:	000001cb 	andeq	r0, r0, fp, asr #3
  cc:	00e4b301 	rsceq	fp, r4, r1, lsl #6
  d0:	91020000 	mrsls	r0, (UNDEF: 2)
  d4:	00a7046e 	adceq	r0, r7, lr, ror #8
  d8:	b4010000 	strlt	r0, [r1], #-0
  dc:	000000e4 	andeq	r0, r0, r4, ror #1
  e0:	00779102 	rsbseq	r9, r7, r2, lsl #2
  e4:	cb080106 	blgt	200504 <startup-0x1fdffafc>
  e8:	02000000 	andeq	r0, r0, #0
  ec:	000001db 	ldrdeq	r0, [r0], -fp
  f0:	033cac01 	teqeq	ip, #256	; 0x100
  f4:	003c2000 	eorseq	r2, ip, r0
  f8:	9c010000 	stcls	0, cr0, [r1], {-0}
  fc:	0000010d 	andeq	r0, r0, sp, lsl #2
 100:	0100630a 	tsteq	r0, sl, lsl #6
 104:	0000e4ac 	andeq	lr, r0, ip, lsr #9
 108:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 10c:	002e0c00 	eoreq	r0, lr, r0, lsl #24
 110:	a2010000 	andge	r0, r1, #0
 114:	000000e4 	andeq	r0, r0, r4, ror #1
 118:	20000308 	andcs	r0, r0, r8, lsl #6
 11c:	00000034 	andeq	r0, r0, r4, lsr r0
 120:	01339c01 	teqeq	r3, r1, lsl #24
 124:	63030000 	movwvs	r0, #12288	; 0x3000
 128:	e4a30100 	strt	r0, [r3], #256	; 0x100
 12c:	02000000 	andeq	r0, r0, #0
 130:	02007791 	andeq	r7, r0, #38010880	; 0x2440000
 134:	00000044 	andeq	r0, r0, r4, asr #32
 138:	02d89b01 	sbcseq	r9, r8, #1024	; 0x400
 13c:	00302000 	eorseq	r2, r0, r0
 140:	9c010000 	stcls	0, cr0, [r1], {-0}
 144:	00000155 	andeq	r0, r0, r5, asr r1
 148:	0100630a 	tsteq	r0, sl, lsl #6
 14c:	0000e49b 	muleq	r0, fp, r4
 150:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 154:	00af0c00 	adceq	r0, pc, r0, lsl #24
 158:	8f010000 	svchi	0x00010000
 15c:	000000e4 	andeq	r0, r0, r4, ror #1
 160:	20000284 	andcs	r0, r0, r4, lsl #5
 164:	00000054 	andeq	r0, r0, r4, asr r0
 168:	017c9c01 	cmneq	ip, r1, lsl #24
 16c:	72030000 	andvc	r0, r3, #0
 170:	94010076 	strls	r0, [r1], #-118	; 0xffffff8a
 174:	000000e4 	andeq	r0, r0, r4, ror #1
 178:	006f9102 	rsbeq	r9, pc, r2, lsl #2
 17c:	0000680c 	andeq	r6, r0, ip, lsl #16
 180:	e4830100 	str	r0, [r3], #256	; 0x100
 184:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
 188:	56200002 	strtpl	r0, [r0], -r2
 18c:	01000000 	mrseq	r0, (UNDEF: 0)
 190:	0001a39c 	muleq	r1, ip, r3
 194:	76720300 	ldrbtvc	r0, [r2], -r0, lsl #6
 198:	e4880100 	str	r0, [r8], #256	; 0x100
 19c:	02000000 	andeq	r0, r0, #0
 1a0:	0d006f91 	stceq	15, cr6, [r0, #-580]	; 0xfffffdbc
 1a4:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 1a8:	02007a01 	andeq	r7, r0, #4096	; 0x1000
 1ac:	002e2000 	eoreq	r2, lr, r0
 1b0:	9c010000 	stcls	0, cr0, [r1], {-0}
 1b4:	00007a02 	andeq	r7, r0, r2, lsl #20
 1b8:	d6740100 	ldrbtle	r0, [r4], -r0, lsl #2
 1bc:	2a200001 	bcs	8001c8 <startup-0x1f7ffe38>
 1c0:	01000000 	mrseq	r0, (UNDEF: 0)
 1c4:	0001d89c 	muleq	r1, ip, r8
 1c8:	00ba0b00 	adcseq	r0, sl, r0, lsl #22
 1cc:	74010000 	strvc	r0, [r1], #-0
 1d0:	000000e4 	andeq	r0, r0, r4, ror #1
 1d4:	00779102 	rsbseq	r9, r7, r2, lsl #2
 1d8:	00008b02 	andeq	r8, r0, r2, lsl #22
 1dc:	ac6e0100 	stfgee	f0, [lr], #-0
 1e0:	2a200001 	bcs	8001ec <startup-0x1f7ffe14>
 1e4:	01000000 	mrseq	r0, (UNDEF: 0)
 1e8:	0001fc9c 	muleq	r1, ip, ip
 1ec:	017f0b00 	cmneq	pc, r0, lsl #22
 1f0:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
 1f4:	000000e4 	andeq	r0, r0, r4, ror #1
 1f8:	00779102 	rsbseq	r9, r7, r2, lsl #2
 1fc:	0000190e 	andeq	r1, r0, lr, lsl #18
 200:	5c660100 	stfple	f0, [r6], #-0
 204:	50200001 	eorpl	r0, r0, r1
 208:	01000000 	mrseq	r0, (UNDEF: 0)
 20c:	00022a9c 	muleq	r2, ip, sl
 210:	00780a00 	rsbseq	r0, r8, r0, lsl #20
 214:	00e46601 	rsceq	r6, r4, r1, lsl #12
 218:	91020000 	mrsls	r0, (UNDEF: 2)
 21c:	0063036f 	rsbeq	r0, r3, pc, ror #6
 220:	00e46801 	rsceq	r6, r4, r1, lsl #16
 224:	91020000 	mrsls	r0, (UNDEF: 2)
 228:	ec0e0077 	stc	0, cr0, [lr], {119}	; 0x77
 22c:	01000001 	tsteq	r0, r1
 230:	0001185e 	andeq	r1, r1, lr, asr r8
 234:	00004420 	andeq	r4, r0, r0, lsr #8
 238:	589c0100 	ldmpl	ip, {r8}
 23c:	0a000002 	beq	24c <startup-0x1ffffdb4>
 240:	5e010078 	mcrpl	0, 0, r0, cr1, cr8, {3}
 244:	000000e4 	andeq	r0, r0, r4, ror #1
 248:	036f9102 	cmneq	pc, #-2147483648	; 0x80000000
 24c:	60010063 	andvs	r0, r1, r3, rrx
 250:	000000e4 	andeq	r0, r0, r4, ror #1
 254:	00779102 	rsbseq	r9, r7, r2, lsl #2
 258:	00020a09 	andeq	r0, r2, r9, lsl #20
 25c:	a24a0100 	subge	r0, sl, #0, 2
 260:	76200000 	strtvc	r0, [r0], -r0
 264:	01000000 	mrseq	r0, (UNDEF: 0)
 268:	0000029c 	muleq	r0, ip, r2
 26c:	40010000 	andmi	r0, r1, r0
 270:	20000080 	andcs	r0, r0, r0, lsl #1
 274:	00000022 	andeq	r0, r0, r2, lsr #32
 278:	028c9c01 	addeq	r9, ip, #256	; 0x100
 27c:	6d0a0000 	stcvs	0, cr0, [sl, #-0]
 280:	40010073 	andmi	r0, r1, r3, ror r0
 284:	0000028c 	andeq	r0, r0, ip, lsl #5
 288:	00749102 	rsbseq	r9, r4, r2, lsl #2
 28c:	0c070406 	cfstrseq	mvf0, [r7], {6}
 290:	02000000 	andeq	r0, r0, #0
 294:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
 298:	00543701 	subseq	r3, r4, r1, lsl #14
 29c:	002c2000 	eoreq	r2, ip, r0
 2a0:	9c010000 	stcls	0, cr0, [r1], {-0}
 2a4:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
 2a8:	0073750a 	rsbseq	r7, r3, sl, lsl #10
 2ac:	028c3701 	addeq	r3, ip, #262144	; 0x40000
 2b0:	91020000 	mrsls	r0, (UNDEF: 2)
 2b4:	9b0f0074 	blls	3c048c <startup-0x1fc3fb74>
 2b8:	01000000 	mrseq	r0, (UNDEF: 0)
 2bc:	0000102d 	andeq	r1, r0, sp, lsr #32
 2c0:	00004420 	andeq	r4, r0, r0, lsr #8
 2c4:	0f9c0100 	svceq	0x009c0100
 2c8:	000001c3 	andeq	r0, r0, r3, asr #3
 2cc:	00001d01 	andeq	r1, r0, r1, lsl #26
 2d0:	000c2000 	andeq	r2, ip, r0
 2d4:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	012e0200 			; <UNDEFINED> instruction: 0x012e0200
  14:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	01111927 	tsteq	r1, r7, lsr #18
  20:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  24:	01194296 			; <UNDEFINED> instruction: 0x01194296
  28:	03000013 	movweq	r0, #19
  2c:	08030034 	stmdaeq	r3, {r2, r4, r5}
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  38:	34040000 	strcc	r0, [r4], #-0
  3c:	3a0e0300 	bcc	380c44 <startup-0x1fc7f3bc>
  40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	00180213 	andseq	r0, r8, r3, lsl r2
  48:	000f0500 	andeq	r0, pc, r0, lsl #10
  4c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  50:	24060000 	strcs	r0, [r6], #-0
  54:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  58:	000e030b 	andeq	r0, lr, fp, lsl #6
  5c:	01010700 	tsteq	r1, r0, lsl #14
  60:	13011349 	movwne	r1, #4937	; 0x1349
  64:	21080000 	mrscs	r0, (UNDEF: 8)
  68:	2f134900 	svccs	0x00134900
  6c:	0900000b 	stmdbeq	r0, {r0, r1, r3}
  70:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  74:	0b3a0e03 	bleq	e83888 <startup-0x1f17c778>
  78:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  7c:	06120111 			; <UNDEFINED> instruction: 0x06120111
  80:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  84:	0a000019 	beq	f0 <startup-0x1fffff10>
  88:	08030005 	stmdaeq	r3, {r0, r2}
  8c:	0b3b0b3a 	bleq	ec2d7c <startup-0x1f13d284>
  90:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  94:	050b0000 	streq	r0, [fp, #-0]
  98:	3a0e0300 	bcc	380ca0 <startup-0x1fc7f360>
  9c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  a0:	00180213 	andseq	r0, r8, r3, lsl r2
  a4:	012e0c00 			; <UNDEFINED> instruction: 0x012e0c00
  a8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  ac:	0b3b0b3a 	bleq	ec2d9c <startup-0x1f13d264>
  b0:	13491927 	movtne	r1, #39207	; 0x9927
  b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
  b8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  bc:	00130119 	andseq	r0, r3, r9, lsl r1
  c0:	002e0d00 	eoreq	r0, lr, r0, lsl #26
  c4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  c8:	0b3b0b3a 	bleq	ec2db8 <startup-0x1f13d248>
  cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
  d0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  d4:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
  d8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  dc:	0b3a0e03 	bleq	e838f0 <startup-0x1f17c710>
  e0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
  e8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  ec:	00130119 	andseq	r0, r3, r9, lsl r1
  f0:	002e0f00 	eoreq	r0, lr, r0, lsl #30
  f4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  f8:	0b3b0b3a 	bleq	ec2de8 <startup-0x1f13d218>
  fc:	01111927 	tsteq	r1, r7, lsr #18
 100:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 104:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000470 	andeq	r0, r0, r0, ror r4
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000480 	andcs	r0, r0, r0, lsl #9
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000118 	andeq	r0, r0, r8, lsl r1
   4:	00460002 	subeq	r0, r6, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	69726873 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, fp, sp, lr}^
  28:	442f6661 	strtmi	r6, [pc], #-1633	; 30 <startup-0x1fffffd0>
  2c:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
  30:	73746e65 	cmnvc	r4, #1616	; 0x650
  34:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
  38:	552f3262 	strpl	r3, [pc, #-610]!	; fffffdde <main+0xdffff9ea>
  3c:	33327070 	teqcc	r2, #112	; 0x70
  40:	74730000 	ldrbtvc	r0, [r3], #-0
  44:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  48:	00632e70 	rsbeq	r2, r3, r0, ror lr
  4c:	00000001 	andeq	r0, r0, r1
  50:	00020500 	andeq	r0, r2, r0, lsl #10
  54:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  58:	5e13011c 	mrcpl	1, 0, r0, cr3, cr12, {0}
  5c:	01000302 	tsteq	r0, r2, lsl #6
  60:	02050001 	andeq	r0, r5, #1
  64:	20000010 	andcs	r0, r0, r0, lsl r0
  68:	30012c03 	andcc	r2, r1, r3, lsl #24
  6c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
  70:	01040200 	mrseq	r0, R12_usr
  74:	67062006 	strvs	r2, [r6, -r6]
  78:	214ba03d 	cmpcs	fp, sp, lsr r0
  7c:	2a2f2f2f 	bcs	bcbd40 <startup-0x1f4342c0>
  80:	214c4c5e 	cmpcs	ip, lr, asr ip
  84:	304c5e3b 	subcc	r5, ip, fp, lsr lr
  88:	01040200 	mrseq	r0, R12_usr
  8c:	83062006 	movwhi	r2, #24582	; 0x6006
  90:	003f3d3d 	eorseq	r3, pc, sp, lsr sp	; <UNPREDICTABLE>
  94:	06010402 	streq	r0, [r1], -r2, lsl #8
  98:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
  9c:	02003f3d 	andeq	r3, r0, #61, 30	; 0xf4
  a0:	20060104 	andcs	r0, r6, r4, lsl #2
  a4:	3d3d8306 	ldccc	3, cr8, [sp, #-24]!	; 0xffffffe8
  a8:	59693e3d 	stmdbpl	r9!, {r0, r2, r3, r4, r5, r9, sl, fp, ip, sp}^
  ac:	696859bb 	stmdbvs	r8!, {r0, r1, r3, r4, r5, r7, r8, fp, ip, lr}^
  b0:	59130859 	ldmdbpl	r3, {r0, r3, r4, r6, fp}
  b4:	3d3d6776 	ldccc	7, cr6, [sp, #-472]!	; 0xfffffe28
  b8:	3d674c59 	stclcc	12, cr4, [r7, #-356]!	; 0xfffffe9c
  bc:	2f4d593d 	svccs	0x004d593d
  c0:	01040200 	mrseq	r0, R12_usr
  c4:	84062006 	strhi	r2, [r6], #-6
  c8:	3e3d3d3d 	mrccc	13, 1, r3, cr13, cr13, {1}
  cc:	3d3d673e 	ldccc	7, cr6, [sp, #-248]!	; 0xffffff08
  d0:	2f67675a 	svccs	0x0067675a
  d4:	3d673e92 	stclcc	14, cr3, [r7, #-584]!	; 0xfffffdb8
  d8:	67675a3d 			; <UNDEFINED> instruction: 0x67675a3d
  dc:	3d67842f 	cfstrdcc	mvd8, [r7, #-188]!	; 0xffffff44
  e0:	683d2f4b 	ldmdavs	sp!, {r0, r1, r3, r6, r8, r9, sl, fp, sp}
  e4:	2f2f3d3e 	svccs	0x002f3d3e
  e8:	762f3d4b 	strtvc	r3, [pc], -fp, asr #26
  ec:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
  f0:	06200601 	strteq	r0, [r0], -r1, lsl #12
  f4:	3d593d83 	ldclcc	13, cr3, [r9, #-524]	; 0xfffffdf4
  f8:	4b67914c 	blmi	19e4630 <startup-0x1e61b9d0>
  fc:	314c9f76 	hvccc	51702	; 0xc9f6
 100:	2f3d323d 	svccs	0x003d323d
 104:	85753ea0 	ldrbhi	r3, [r5, #-3744]!	; 0xfffff160
 108:	3d4b2f33 	stclcc	15, cr2, [fp, #-204]	; 0xffffff34
 10c:	4b4d7321 	blmi	135cd98 <startup-0x1eca3268>
 110:	4e73212f 	rpwmisp	f2, f3, #10.0
 114:	02587403 	subseq	r7, r8, #50331648	; 0x3000000
 118:	01010008 	tsteq	r1, r8

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  10:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  14:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  18:	63736100 	cmnvs	r3, #0, 2
  1c:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
  20:	5f6c7274 	svcpl	0x006c7274
  24:	5f746962 	svcpl	0x00746962
  28:	61656c63 	cmnvs	r5, r3, ror #24
  2c:	73610072 	cmnvc	r1, #114	; 0x72
  30:	5f696963 	svcpl	0x00696963
  34:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
  38:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
  3c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; fffffe74 <main+0xdffffa80>
  40:	0072656c 	rsbseq	r6, r2, ip, ror #10
  44:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  48:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
  4c:	5f657469 	svcpl	0x00657469
  50:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
  54:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
  58:	61007265 	tstvs	r0, r5, ror #4
  5c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  60:	546f675f 	strbtpl	r6, [pc], #-1887	; 68 <startup-0x1fffff98>
  64:	0059586f 	subseq	r5, r9, pc, ror #16
  68:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  6c:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
  70:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
  74:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
  78:	73610073 	cmnvc	r1, #115	; 0x73
  7c:	5f696963 	svcpl	0x00696963
  80:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
  84:	61645f65 	cmnvs	r4, r5, ror #30
  88:	61006174 	tstvs	r0, r4, ror r1
  8c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  90:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
  94:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
  98:	6400646d 	strvs	r6, [r0], #-1133	; 0xfffffb93
  9c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  a0:	3035325f 	eorscc	r3, r5, pc, asr r2
  a4:	6100736e 	tstvs	r0, lr, ror #6
  a8:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
  ac:	61007373 	tstvs	r0, r3, ror r3
  b0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  b4:	6165725f 	cmnvs	r5, pc, asr r2
  b8:	61645f64 	cmnvs	r4, r4, ror #30
  bc:	64006174 	strvs	r6, [r0], #-372	; 0xfffffe8c
  c0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  c4:	63696d5f 	cmnvs	r9, #6080	; 0x17c0
  c8:	75006f72 	strvc	r6, [r0, #-3954]	; 0xfffff08e
  cc:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  d0:	2064656e 	rsbcs	r6, r4, lr, ror #10
  d4:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
  d8:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  dc:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  e0:	332e3620 			; <UNDEFINED> instruction: 0x332e3620
  e4:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  e8:	30373130 	eorscc	r3, r7, r0, lsr r1
  ec:	20353132 	eorscs	r3, r5, r2, lsr r1
  f0:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  f4:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  f8:	415b2029 	cmpmi	fp, r9, lsr #32
  fc:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff3b2 <main+0xdfffefbe>
 100:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
 104:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
 108:	72622d36 	rsbvc	r2, r2, #3456	; 0xd80
 10c:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
 110:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
 114:	6f697369 	svcvs	0x00697369
 118:	3432206e 	ldrtcc	r2, [r2], #-110	; 0xffffff92
 11c:	32313535 	eorscc	r3, r1, #222298112	; 0xd400000
 120:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
 124:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 128:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 12c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 130:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 134:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 138:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
 13c:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
 140:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
 144:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
 148:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
 14c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 150:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 154:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 158:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 15c:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 160:	20672d20 	rsbcs	r2, r7, r0, lsr #26
 164:	20304f2d 	eorscs	r4, r0, sp, lsr #30
 168:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
 16c:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
 170:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 174:	6e69006e 	cdpvs	0, 6, cr0, cr9, cr14, {3}
 178:	615f7469 	cmpvs	pc, r9, ror #8
 17c:	63007070 	movwvs	r7, #112	; 0x70
 180:	616d6d6f 	cmnvs	sp, pc, ror #26
 184:	4300646e 	movwmi	r6, #1134	; 0x46e
 188:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 18c:	2f737265 	svccs	0x00737265
 190:	69726873 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, fp, sp, lr}^
 194:	442f6661 	strtmi	r6, [pc], #-1633	; 19c <startup-0x1ffffe64>
 198:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 19c:	73746e65 	cmnvc	r4, #1616	; 0x650
 1a0:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 1a4:	552f3262 	strpl	r3, [pc, #-610]!	; ffffff4a <main+0xdffffb56>
 1a8:	33327070 	teqcc	r2, #112	; 0x70
 1ac:	6174732f 	cmnvs	r4, pc, lsr #6
 1b0:	70757472 	rsbsvc	r7, r5, r2, ror r4
 1b4:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
 1b8:	31747365 	cmncc	r4, r5, ror #6
 1bc:	73657400 	cmnvc	r5, #0, 8
 1c0:	73003274 	movwvc	r3, #628	; 0x274
 1c4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 1c8:	63007075 	movwvs	r7, #117	; 0x75
 1cc:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 1d0:	6973006e 	ldmdbvs	r3!, {r1, r2, r3, r5, r6}^
 1d4:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
 1d8:	61006570 	tstvs	r0, r0, ror r5
 1dc:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1e0:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 1e4:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 1e8:	00726168 	rsbseq	r6, r2, r8, ror #2
 1ec:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1f0:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
 1f4:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 1f8:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 1fc:	63007465 	movwvs	r7, #1125	; 0x465
 200:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 204:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
 208:	73610070 	cmnvc	r1, #112	; 0x70
 20c:	5f696963 	svcpl	0x00696963
 210:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000044 	andeq	r0, r0, r4, asr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000054 	andcs	r0, r0, r4, asr r0
  48:	0000002c 	andeq	r0, r0, ip, lsr #32
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	100e4101 	andne	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
  60:	00000000 	andeq	r0, r0, r0
  64:	20000080 	andcs	r0, r0, r0, lsl #1
  68:	00000022 	andeq	r0, r0, r2, lsr #32
  6c:	40080e41 	andmi	r0, r8, r1, asr #28
  70:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  74:	100e4101 	andne	r4, lr, r1, lsl #2
  78:	00070d41 	andeq	r0, r7, r1, asr #26
  7c:	00000018 	andeq	r0, r0, r8, lsl r0
  80:	00000000 	andeq	r0, r0, r0
  84:	200000a2 	andcs	r0, r0, r2, lsr #1
  88:	00000076 	andeq	r0, r0, r6, ror r0
  8c:	40080e41 	andmi	r0, r8, r1, asr #28
  90:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  94:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	20000118 	andcs	r0, r0, r8, lsl r1
  a4:	00000044 	andeq	r0, r0, r4, asr #32
  a8:	40080e41 	andmi	r0, r8, r1, asr #28
  ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b0:	180e4101 	stmdane	lr, {r0, r8, lr}
  b4:	00070d41 	andeq	r0, r7, r1, asr #26
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	2000015c 	andcs	r0, r0, ip, asr r1
  c4:	00000050 	andeq	r0, r0, r0, asr r0
  c8:	40080e41 	andmi	r0, r8, r1, asr #28
  cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d0:	180e4101 	stmdane	lr, {r0, r8, lr}
  d4:	00070d41 	andeq	r0, r7, r1, asr #26
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	200001ac 	andcs	r0, r0, ip, lsr #3
  e4:	0000002a 	andeq	r0, r0, sl, lsr #32
  e8:	40080e41 	andmi	r0, r8, r1, asr #28
  ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f0:	100e4101 	andne	r4, lr, r1, lsl #2
  f4:	00070d41 	andeq	r0, r7, r1, asr #26
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	200001d6 	ldrdcs	r0, [r0], -r6
 104:	0000002a 	andeq	r0, r0, sl, lsr #32
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	100e4101 	andne	r4, lr, r1, lsl #2
 114:	00070d41 	andeq	r0, r7, r1, asr #26
 118:	00000018 	andeq	r0, r0, r8, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	20000200 	andcs	r0, r0, r0, lsl #4
 124:	0000002e 	andeq	r0, r0, lr, lsr #32
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 134:	00000020 	andeq	r0, r0, r0, lsr #32
 138:	00000000 	andeq	r0, r0, r0
 13c:	2000022e 	andcs	r0, r0, lr, lsr #4
 140:	00000056 	andeq	r0, r0, r6, asr r0
 144:	400c0e41 	andmi	r0, ip, r1, asr #28
 148:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 14c:	018e4002 	orreq	r4, lr, r2
 150:	41180e41 	tstmi	r8, r1, asr #28
 154:	0000070d 	andeq	r0, r0, sp, lsl #14
 158:	00000020 	andeq	r0, r0, r0, lsr #32
 15c:	00000000 	andeq	r0, r0, r0
 160:	20000284 	andcs	r0, r0, r4, lsl #5
 164:	00000054 	andeq	r0, r0, r4, asr r0
 168:	400c0e41 	andmi	r0, ip, r1, asr #28
 16c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 170:	018e4002 	orreq	r4, lr, r2
 174:	41180e41 	tstmi	r8, r1, asr #28
 178:	0000070d 	andeq	r0, r0, sp, lsl #14
 17c:	0000001c 	andeq	r0, r0, ip, lsl r0
 180:	00000000 	andeq	r0, r0, r0
 184:	200002d8 	ldrdcs	r0, [r0], -r8
 188:	00000030 	andeq	r0, r0, r0, lsr r0
 18c:	40080e41 	andmi	r0, r8, r1, asr #28
 190:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 194:	100e4101 	andne	r4, lr, r1, lsl #2
 198:	00070d41 	andeq	r0, r7, r1, asr #26
 19c:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a0:	00000000 	andeq	r0, r0, r0
 1a4:	20000308 	andcs	r0, r0, r8, lsl #6
 1a8:	00000034 	andeq	r0, r0, r4, lsr r0
 1ac:	40080e41 	andmi	r0, r8, r1, asr #28
 1b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b4:	100e4101 	andne	r4, lr, r1, lsl #2
 1b8:	00070d41 	andeq	r0, r7, r1, asr #26
 1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c0:	00000000 	andeq	r0, r0, r0
 1c4:	2000033c 	andcs	r0, r0, ip, lsr r3
 1c8:	0000003c 	andeq	r0, r0, ip, lsr r0
 1cc:	40080e41 	andmi	r0, r8, r1, asr #28
 1d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d4:	100e4101 	andne	r4, lr, r1, lsl #2
 1d8:	00070d41 	andeq	r0, r7, r1, asr #26
 1dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e0:	00000000 	andeq	r0, r0, r0
 1e4:	20000378 	andcs	r0, r0, r8, ror r3
 1e8:	00000050 	andeq	r0, r0, r0, asr r0
 1ec:	40080e41 	andmi	r0, r8, r1, asr #28
 1f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f4:	180e4101 	stmdane	lr, {r0, r8, lr}
 1f8:	00070d41 	andeq	r0, r7, r1, asr #26
 1fc:	00000018 	andeq	r0, r0, r8, lsl r0
 200:	00000000 	andeq	r0, r0, r0
 204:	200003c8 	andcs	r0, r0, r8, asr #7
 208:	0000002c 	andeq	r0, r0, ip, lsr #32
 20c:	40080e41 	andmi	r0, r8, r1, asr #28
 210:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 214:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 218:	00000020 	andeq	r0, r0, r0, lsr #32
 21c:	00000000 	andeq	r0, r0, r0
 220:	200003f4 	strdcs	r0, [r0], -r4
 224:	0000008c 	andeq	r0, r0, ip, lsl #1
 228:	400c0e41 	andmi	r0, ip, r1, asr #28
 22c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 230:	018e4002 	orreq	r4, lr, r2
 234:	41380e41 	teqmi	r8, r1, asr #28
 238:	0000070d 	andeq	r0, r0, sp, lsl #14
