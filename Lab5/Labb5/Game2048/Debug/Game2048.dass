
./Debug/Game2048.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f804 	bl	20000010 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <main>:
void init_app();
void game_won();
void game_lost();

void main(void)
{
20000010:	b590      	push	{r4, r7, lr}
20000012:	b083      	sub	sp, #12
20000014:	af00      	add	r7, sp, #0
	init_app();
20000016:	f000 f87f 	bl	20000118 <init_app>
	delay_milli(100);
2000001a:	2064      	movs	r0, #100	; 0x64
2000001c:	f000 fab6 	bl	2000058c <delay_milli>
	

	draw_gameboard();
20000020:	f001 f804 	bl	2000102c <draw_gameboard>
	graphic_draw_screen();
20000024:	f000 fb2e 	bl	20000684 <graphic_draw_screen>
	
	char val;
	
	while(1)
	{
		clearBackBuffer();
20000028:	f000 fac1 	bl	200005ae <clearBackBuffer>
		
		
		val=keyb();
2000002c:	1dfc      	adds	r4, r7, #7
2000002e:	f000 fc05 	bl	2000083c <keyb>
20000032:	0003      	movs	r3, r0
20000034:	7023      	strb	r3, [r4, #0]
		delay_milli(40);
20000036:	2028      	movs	r0, #40	; 0x28
20000038:	f000 faa8 	bl	2000058c <delay_milli>
			
		switch (val)
2000003c:	1dfb      	adds	r3, r7, #7
2000003e:	781b      	ldrb	r3, [r3, #0]
20000040:	2b04      	cmp	r3, #4
20000042:	d00c      	beq.n	2000005e <main+0x4e>
20000044:	dc02      	bgt.n	2000004c <main+0x3c>
20000046:	2b02      	cmp	r3, #2
20000048:	d00d      	beq.n	20000066 <main+0x56>
2000004a:	e014      	b.n	20000076 <main+0x66>
2000004c:	2b06      	cmp	r3, #6
2000004e:	d002      	beq.n	20000056 <main+0x46>
20000050:	2b08      	cmp	r3, #8
20000052:	d00c      	beq.n	2000006e <main+0x5e>
20000054:	e00f      	b.n	20000076 <main+0x66>
		{
			case 6:
			do_tick(D_RIGHT);
20000056:	2003      	movs	r0, #3
20000058:	f000 ffa4 	bl	20000fa4 <do_tick>
			break;
2000005c:	e00b      	b.n	20000076 <main+0x66>
			
			case 4:
			do_tick(D_LEFT);
2000005e:	2004      	movs	r0, #4
20000060:	f000 ffa0 	bl	20000fa4 <do_tick>
			break;
20000064:	e007      	b.n	20000076 <main+0x66>
			
			case 2:
			do_tick(D_UP);
20000066:	2001      	movs	r0, #1
20000068:	f000 ff9c 	bl	20000fa4 <do_tick>
			break;
2000006c:	e003      	b.n	20000076 <main+0x66>
			
			case 8:
			do_tick(D_DOWN);
2000006e:	2002      	movs	r0, #2
20000070:	f000 ff98 	bl	20000fa4 <do_tick>
			break;
20000074:	46c0      	nop			; (mov r8, r8)
			
		}
		
		
		switch (do_check_end_condition()) {
20000076:	f000 ff2f 	bl	20000ed8 <do_check_end_condition>
2000007a:	1e03      	subs	r3, r0, #0
2000007c:	d009      	beq.n	20000092 <main+0x82>
2000007e:	2b01      	cmp	r3, #1
20000080:	d004      	beq.n	2000008c <main+0x7c>
20000082:	3301      	adds	r3, #1
20000084:	d106      	bne.n	20000094 <main+0x84>
            case -1:
				game_lost();
20000086:	f000 f835 	bl	200000f4 <game_lost>
				return;
2000008a:	e01a      	b.n	200000c2 <main+0xb2>
            case 1:
				game_won();
2000008c:	f000 f820 	bl	200000d0 <game_won>
				return;
20000090:	e017      	b.n	200000c2 <main+0xb2>
            case 0:
                break;
20000092:	46c0      	nop			; (mov r8, r8)
        }
		 
		
		ascii_write_long(getTotalScore());
20000094:	f001 f96a 	bl	2000136c <getTotalScore>
20000098:	0003      	movs	r3, r0
2000009a:	0018      	movs	r0, r3
2000009c:	f001 fb80 	bl	200017a0 <ascii_write_long>
		if (getHasMoved())
200000a0:	f001 f954 	bl	2000134c <getHasMoved>
200000a4:	1e03      	subs	r3, r0, #0
200000a6:	d0bf      	beq.n	20000028 <main+0x18>
		{
			ascii_write_string("Drawing");
200000a8:	4b07      	ldr	r3, [pc, #28]	; (200000c8 <main+0xb8>)
200000aa:	0018      	movs	r0, r3
200000ac:	f001 fb36 	bl	2000171c <ascii_write_string>
			draw_gameboard();
200000b0:	f000 ffbc 	bl	2000102c <draw_gameboard>
			
			graphic_draw_screen();
200000b4:	f000 fae6 	bl	20000684 <graphic_draw_screen>
			
			ascii_write_string("Done");
200000b8:	4b04      	ldr	r3, [pc, #16]	; (200000cc <main+0xbc>)
200000ba:	0018      	movs	r0, r3
200000bc:	f001 fb2e 	bl	2000171c <ascii_write_string>
		clearBackBuffer();
200000c0:	e7b2      	b.n	20000028 <main+0x18>
			
		}
	}
	
	
}
200000c2:	46bd      	mov	sp, r7
200000c4:	b003      	add	sp, #12
200000c6:	bd90      	pop	{r4, r7, pc}
200000c8:	20002308 	andcs	r2, r0, r8, lsl #6
200000cc:	20002310 	andcs	r2, r0, r0, lsl r3

200000d0 <game_won>:




void game_won()
{
200000d0:	b580      	push	{r7, lr}
200000d2:	af00      	add	r7, sp, #0
	ascii_write_string("You won!");
200000d4:	4b06      	ldr	r3, [pc, #24]	; (200000f0 <game_won+0x20>)
200000d6:	0018      	movs	r0, r3
200000d8:	f001 fb20 	bl	2000171c <ascii_write_string>
	ascii_write_long(getTotalScore());
200000dc:	f001 f946 	bl	2000136c <getTotalScore>
200000e0:	0003      	movs	r3, r0
200000e2:	0018      	movs	r0, r3
200000e4:	f001 fb5c 	bl	200017a0 <ascii_write_long>
}
200000e8:	46c0      	nop			; (mov r8, r8)
200000ea:	46bd      	mov	sp, r7
200000ec:	bd80      	pop	{r7, pc}
200000ee:	46c0      	nop			; (mov r8, r8)
200000f0:	20002318 	andcs	r2, r0, r8, lsl r3

200000f4 <game_lost>:


void game_lost()
{
200000f4:	b580      	push	{r7, lr}
200000f6:	af00      	add	r7, sp, #0
	
	
	ascii_write_string("You lost!");
200000f8:	4b06      	ldr	r3, [pc, #24]	; (20000114 <game_lost+0x20>)
200000fa:	0018      	movs	r0, r3
200000fc:	f001 fb0e 	bl	2000171c <ascii_write_string>
//	ascii_write_long(getTotalScore());
	
	
	clearBackBuffer();
20000100:	f000 fa55 	bl	200005ae <clearBackBuffer>
	draw_gameoverScreen();
20000104:	f001 f8c0 	bl	20001288 <draw_gameoverScreen>
	graphic_draw_screen();
20000108:	f000 fabc 	bl	20000684 <graphic_draw_screen>
	
	
}
2000010c:	46c0      	nop			; (mov r8, r8)
2000010e:	46bd      	mov	sp, r7
20000110:	bd80      	pop	{r7, pc}
20000112:	46c0      	nop			; (mov r8, r8)
20000114:	20002324 	andcs	r2, r0, r4, lsr #6

20000118 <init_app>:

void init_app()
{
20000118:	b580      	push	{r7, lr}
2000011a:	af00      	add	r7, sp, #0
	
	graphic_initialize();
2000011c:	f000 f8a5 	bl	2000026a <graphic_initialize>
	graphic_clear_screen();
20000120:	f000 f9ef 	bl	20000502 <graphic_clear_screen>
	input_initialize();
20000124:	f000 fb16 	bl	20000754 <input_initialize>
	clearBackBuffer();
20000128:	f000 fa41 	bl	200005ae <clearBackBuffer>
	init_gameboard();
2000012c:	f000 ff58 	bl	20000fe0 <init_gameboard>
	ascii_init();
20000130:	f001 f982 	bl	20001438 <ascii_init>
	set_seed(getTicks());
20000134:	f000 f808 	bl	20000148 <getTicks>
20000138:	0003      	movs	r3, r0
2000013a:	0018      	movs	r0, r3
2000013c:	f001 f96c 	bl	20001418 <set_seed>
	
}
20000140:	46c0      	nop			; (mov r8, r8)
20000142:	46bd      	mov	sp, r7
20000144:	bd80      	pop	{r7, pc}
20000146:	46c0      	nop			; (mov r8, r8)

20000148 <getTicks>:

unsigned short TICKS__=0;


unsigned short getTicks()
{
20000148:	b580      	push	{r7, lr}
2000014a:	af00      	add	r7, sp, #0
	return TICKS__;
2000014c:	4b02      	ldr	r3, [pc, #8]	; (20000158 <getTicks+0x10>)
2000014e:	881b      	ldrh	r3, [r3, #0]
}
20000150:	0018      	movs	r0, r3
20000152:	46bd      	mov	sp, r7
20000154:	bd80      	pop	{r7, pc}
20000156:	46c0      	nop			; (mov r8, r8)
20000158:	20001b2c 	andcs	r1, r0, ip, lsr #22

2000015c <graphic_ctr_bit_set>:

static void graphic_ctr_bit_set(unsigned char x)
{
2000015c:	b580      	push	{r7, lr}
2000015e:	b084      	sub	sp, #16
20000160:	af00      	add	r7, sp, #0
20000162:	0002      	movs	r2, r0
20000164:	1dfb      	adds	r3, r7, #7
20000166:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = *portOdrLow;
20000168:	4a12      	ldr	r2, [pc, #72]	; (200001b4 <graphic_ctr_bit_set+0x58>)
2000016a:	230f      	movs	r3, #15
2000016c:	18fb      	adds	r3, r7, r3
2000016e:	7812      	ldrb	r2, [r2, #0]
20000170:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
20000172:	230f      	movs	r3, #15
20000174:	18fb      	adds	r3, r7, r3
20000176:	220f      	movs	r2, #15
20000178:	18ba      	adds	r2, r7, r2
2000017a:	7812      	ldrb	r2, [r2, #0]
2000017c:	2104      	movs	r1, #4
2000017e:	438a      	bics	r2, r1
20000180:	701a      	strb	r2, [r3, #0]
	c |= (~B_SELECT & x);
20000182:	1dfb      	adds	r3, r7, #7
20000184:	781b      	ldrb	r3, [r3, #0]
20000186:	b25b      	sxtb	r3, r3
20000188:	2204      	movs	r2, #4
2000018a:	4393      	bics	r3, r2
2000018c:	b25a      	sxtb	r2, r3
2000018e:	230f      	movs	r3, #15
20000190:	18fb      	adds	r3, r7, r3
20000192:	781b      	ldrb	r3, [r3, #0]
20000194:	b25b      	sxtb	r3, r3
20000196:	4313      	orrs	r3, r2
20000198:	b25a      	sxtb	r2, r3
2000019a:	230f      	movs	r3, #15
2000019c:	18fb      	adds	r3, r7, r3
2000019e:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
200001a0:	4a04      	ldr	r2, [pc, #16]	; (200001b4 <graphic_ctr_bit_set+0x58>)
200001a2:	230f      	movs	r3, #15
200001a4:	18fb      	adds	r3, r7, r3
200001a6:	781b      	ldrb	r3, [r3, #0]
200001a8:	7013      	strb	r3, [r2, #0]
}
200001aa:	46c0      	nop			; (mov r8, r8)
200001ac:	46bd      	mov	sp, r7
200001ae:	b004      	add	sp, #16
200001b0:	bd80      	pop	{r7, pc}
200001b2:	46c0      	nop			; (mov r8, r8)
200001b4:	40021014 	andmi	r1, r2, r4, lsl r0

200001b8 <graphic_ctr_bit_clear>:

static void graphic_ctr_bit_clear(unsigned char x)
{
200001b8:	b580      	push	{r7, lr}
200001ba:	b084      	sub	sp, #16
200001bc:	af00      	add	r7, sp, #0
200001be:	0002      	movs	r2, r0
200001c0:	1dfb      	adds	r3, r7, #7
200001c2:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = *portOdrLow;
200001c4:	4a11      	ldr	r2, [pc, #68]	; (2000020c <graphic_ctr_bit_clear+0x54>)
200001c6:	230f      	movs	r3, #15
200001c8:	18fb      	adds	r3, r7, r3
200001ca:	7812      	ldrb	r2, [r2, #0]
200001cc:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
200001ce:	230f      	movs	r3, #15
200001d0:	18fb      	adds	r3, r7, r3
200001d2:	220f      	movs	r2, #15
200001d4:	18ba      	adds	r2, r7, r2
200001d6:	7812      	ldrb	r2, [r2, #0]
200001d8:	2104      	movs	r1, #4
200001da:	438a      	bics	r2, r1
200001dc:	701a      	strb	r2, [r3, #0]
	c &= ~x;
200001de:	1dfb      	adds	r3, r7, #7
200001e0:	781b      	ldrb	r3, [r3, #0]
200001e2:	b25b      	sxtb	r3, r3
200001e4:	43db      	mvns	r3, r3
200001e6:	b25b      	sxtb	r3, r3
200001e8:	220f      	movs	r2, #15
200001ea:	18ba      	adds	r2, r7, r2
200001ec:	7812      	ldrb	r2, [r2, #0]
200001ee:	b252      	sxtb	r2, r2
200001f0:	4013      	ands	r3, r2
200001f2:	b25a      	sxtb	r2, r3
200001f4:	230f      	movs	r3, #15
200001f6:	18fb      	adds	r3, r7, r3
200001f8:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
200001fa:	4a04      	ldr	r2, [pc, #16]	; (2000020c <graphic_ctr_bit_clear+0x54>)
200001fc:	230f      	movs	r3, #15
200001fe:	18fb      	adds	r3, r7, r3
20000200:	781b      	ldrb	r3, [r3, #0]
20000202:	7013      	strb	r3, [r2, #0]
}
20000204:	46c0      	nop			; (mov r8, r8)
20000206:	46bd      	mov	sp, r7
20000208:	b004      	add	sp, #16
2000020a:	bd80      	pop	{r7, pc}
2000020c:	40021014 	andmi	r1, r2, r4, lsl r0

20000210 <select_controller>:


static void select_controller(unsigned char controller)
{
20000210:	b580      	push	{r7, lr}
20000212:	b082      	sub	sp, #8
20000214:	af00      	add	r7, sp, #0
20000216:	0002      	movs	r2, r0
20000218:	1dfb      	adds	r3, r7, #7
2000021a:	701a      	strb	r2, [r3, #0]
	switch(controller)
2000021c:	1dfb      	adds	r3, r7, #7
2000021e:	781b      	ldrb	r3, [r3, #0]
20000220:	2b08      	cmp	r3, #8
20000222:	d00c      	beq.n	2000023e <select_controller+0x2e>
20000224:	dc02      	bgt.n	2000022c <select_controller+0x1c>
20000226:	2b00      	cmp	r3, #0
20000228:	d005      	beq.n	20000236 <select_controller+0x26>
			break;
		case B_CS1|B_CS2:
			graphic_ctr_bit_set(B_CS1|B_CS2);
			break;
	}
}
2000022a:	e01a      	b.n	20000262 <select_controller+0x52>
	switch(controller)
2000022c:	2b10      	cmp	r3, #16
2000022e:	d00d      	beq.n	2000024c <select_controller+0x3c>
20000230:	2b18      	cmp	r3, #24
20000232:	d012      	beq.n	2000025a <select_controller+0x4a>
}
20000234:	e015      	b.n	20000262 <select_controller+0x52>
			graphic_ctr_bit_clear(B_CS1|B_CS2);
20000236:	2018      	movs	r0, #24
20000238:	f7ff ffbe 	bl	200001b8 <graphic_ctr_bit_clear>
			break;
2000023c:	e011      	b.n	20000262 <select_controller+0x52>
			graphic_ctr_bit_set(B_CS1);
2000023e:	2008      	movs	r0, #8
20000240:	f7ff ff8c 	bl	2000015c <graphic_ctr_bit_set>
			graphic_ctr_bit_clear(B_CS2);
20000244:	2010      	movs	r0, #16
20000246:	f7ff ffb7 	bl	200001b8 <graphic_ctr_bit_clear>
			break;
2000024a:	e00a      	b.n	20000262 <select_controller+0x52>
			graphic_ctr_bit_clear(B_CS1);
2000024c:	2008      	movs	r0, #8
2000024e:	f7ff ffb3 	bl	200001b8 <graphic_ctr_bit_clear>
			graphic_ctr_bit_set(B_CS2);
20000252:	2010      	movs	r0, #16
20000254:	f7ff ff82 	bl	2000015c <graphic_ctr_bit_set>
			break;
20000258:	e003      	b.n	20000262 <select_controller+0x52>
			graphic_ctr_bit_set(B_CS1|B_CS2);
2000025a:	2018      	movs	r0, #24
2000025c:	f7ff ff7e 	bl	2000015c <graphic_ctr_bit_set>
			break;
20000260:	46c0      	nop			; (mov r8, r8)
}
20000262:	46c0      	nop			; (mov r8, r8)
20000264:	46bd      	mov	sp, r7
20000266:	b002      	add	sp, #8
20000268:	bd80      	pop	{r7, pc}

2000026a <graphic_initialize>:

void graphic_initialize(void)
{
2000026a:	b580      	push	{r7, lr}
2000026c:	af00      	add	r7, sp, #0
	graphic_ctr_bit_set(B_E);
2000026e:	2040      	movs	r0, #64	; 0x40
20000270:	f7ff ff74 	bl	2000015c <graphic_ctr_bit_set>
	delay_micro(10);
20000274:	200a      	movs	r0, #10
20000276:	f000 f973 	bl	20000560 <delay_micro>
	
	graphic_ctr_bit_clear(B_CS1|B_CS2|B_RST|B_E);
2000027a:	2078      	movs	r0, #120	; 0x78
2000027c:	f7ff ff9c 	bl	200001b8 <graphic_ctr_bit_clear>
	delay_milli(30);
20000280:	201e      	movs	r0, #30
20000282:	f000 f983 	bl	2000058c <delay_milli>
	graphic_ctr_bit_set(B_RST);
20000286:	2020      	movs	r0, #32
20000288:	f7ff ff68 	bl	2000015c <graphic_ctr_bit_set>
	delay_milli(100);
2000028c:	2064      	movs	r0, #100	; 0x64
2000028e:	f000 f97d 	bl	2000058c <delay_milli>
	
	graphic_write_command(LCD_OFF,	B_CS1|B_CS2);
20000292:	2118      	movs	r1, #24
20000294:	203e      	movs	r0, #62	; 0x3e
20000296:	f000 f8f1 	bl	2000047c <graphic_write_command>
	graphic_write_command(LCD_ON,	B_CS1|B_CS2);
2000029a:	2118      	movs	r1, #24
2000029c:	203f      	movs	r0, #63	; 0x3f
2000029e:	f000 f8ed 	bl	2000047c <graphic_write_command>
	graphic_write_command(LCD_DISP_START,	B_CS1|B_CS2);
200002a2:	2118      	movs	r1, #24
200002a4:	20c0      	movs	r0, #192	; 0xc0
200002a6:	f000 f8e9 	bl	2000047c <graphic_write_command>
	graphic_write_command(LCD_SET_ADD,		B_CS1|B_CS2);
200002aa:	2118      	movs	r1, #24
200002ac:	2040      	movs	r0, #64	; 0x40
200002ae:	f000 f8e5 	bl	2000047c <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE,		B_CS1|B_CS2);
200002b2:	2118      	movs	r1, #24
200002b4:	20b8      	movs	r0, #184	; 0xb8
200002b6:	f000 f8e1 	bl	2000047c <graphic_write_command>
	select_controller(0);
200002ba:	2000      	movs	r0, #0
200002bc:	f7ff ffa8 	bl	20000210 <select_controller>
}
200002c0:	46c0      	nop			; (mov r8, r8)
200002c2:	46bd      	mov	sp, r7
200002c4:	bd80      	pop	{r7, pc}

200002c6 <graphic_wait_ready>:

static void graphic_wait_ready(void)
{
200002c6:	b580      	push	{r7, lr}
200002c8:	b082      	sub	sp, #8
200002ca:	af00      	add	r7, sp, #0
	unsigned char c;
	graphic_ctr_bit_clear(B_E);
200002cc:	2040      	movs	r0, #64	; 0x40
200002ce:	f7ff ff73 	bl	200001b8 <graphic_ctr_bit_clear>
	*portModer = 0x00005555;
200002d2:	4b17      	ldr	r3, [pc, #92]	; (20000330 <graphic_wait_ready+0x6a>)
200002d4:	4a17      	ldr	r2, [pc, #92]	; (20000334 <graphic_wait_ready+0x6e>)
200002d6:	601a      	str	r2, [r3, #0]
	graphic_ctr_bit_clear(B_RS);
200002d8:	2001      	movs	r0, #1
200002da:	f7ff ff6d 	bl	200001b8 <graphic_ctr_bit_clear>
	graphic_ctr_bit_set(B_RW);
200002de:	2002      	movs	r0, #2
200002e0:	f7ff ff3c 	bl	2000015c <graphic_ctr_bit_set>
	delay_250ns();
200002e4:	f000 f912 	bl	2000050c <delay_250ns>
	delay_250ns();
200002e8:	f000 f910 	bl	2000050c <delay_250ns>
	
	while (1)
	{
		graphic_ctr_bit_set(B_E);
200002ec:	2040      	movs	r0, #64	; 0x40
200002ee:	f7ff ff35 	bl	2000015c <graphic_ctr_bit_set>
		delay_250ns();
200002f2:	f000 f90b 	bl	2000050c <delay_250ns>
		delay_250ns();
200002f6:	f000 f909 	bl	2000050c <delay_250ns>
		c = *portIdrHigh & LCD_BUSY;
200002fa:	4b0f      	ldr	r3, [pc, #60]	; (20000338 <graphic_wait_ready+0x72>)
200002fc:	781b      	ldrb	r3, [r3, #0]
200002fe:	b2da      	uxtb	r2, r3
20000300:	1dfb      	adds	r3, r7, #7
20000302:	217f      	movs	r1, #127	; 0x7f
20000304:	438a      	bics	r2, r1
20000306:	701a      	strb	r2, [r3, #0]
		graphic_ctr_bit_clear(B_E);
20000308:	2040      	movs	r0, #64	; 0x40
2000030a:	f7ff ff55 	bl	200001b8 <graphic_ctr_bit_clear>
		delay_250ns();
2000030e:	f000 f8fd 	bl	2000050c <delay_250ns>
		delay_250ns();
20000312:	f000 f8fb 	bl	2000050c <delay_250ns>
		if (c == 0)
20000316:	1dfb      	adds	r3, r7, #7
20000318:	781b      	ldrb	r3, [r3, #0]
2000031a:	2b00      	cmp	r3, #0
2000031c:	d000      	beq.n	20000320 <graphic_wait_ready+0x5a>
		graphic_ctr_bit_set(B_E);
2000031e:	e7e5      	b.n	200002ec <graphic_wait_ready+0x26>
		{
			break;
20000320:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	*portModer = 0x55555555;
20000322:	4b03      	ldr	r3, [pc, #12]	; (20000330 <graphic_wait_ready+0x6a>)
20000324:	4a05      	ldr	r2, [pc, #20]	; (2000033c <graphic_wait_ready+0x76>)
20000326:	601a      	str	r2, [r3, #0]
}
20000328:	46c0      	nop			; (mov r8, r8)
2000032a:	46bd      	mov	sp, r7
2000032c:	b002      	add	sp, #8
2000032e:	bd80      	pop	{r7, pc}
20000330:	40021000 	andmi	r1, r2, r0
20000334:	00005555 	andeq	r5, r0, r5, asr r5
20000338:	40021011 	andmi	r1, r2, r1, lsl r0
2000033c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000340 <graphic_read>:


static unsigned char graphic_read(unsigned char controller)
{
20000340:	b580      	push	{r7, lr}
20000342:	b084      	sub	sp, #16
20000344:	af00      	add	r7, sp, #0
20000346:	0002      	movs	r2, r0
20000348:	1dfb      	adds	r3, r7, #7
2000034a:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	graphic_ctr_bit_clear(B_E);
2000034c:	2040      	movs	r0, #64	; 0x40
2000034e:	f7ff ff33 	bl	200001b8 <graphic_ctr_bit_clear>
	*portModer = 0x00005555;
20000352:	4b1e      	ldr	r3, [pc, #120]	; (200003cc <graphic_read+0x8c>)
20000354:	4a1e      	ldr	r2, [pc, #120]	; (200003d0 <graphic_read+0x90>)
20000356:	601a      	str	r2, [r3, #0]
	graphic_ctr_bit_set(B_RS|B_RW);
20000358:	2003      	movs	r0, #3
2000035a:	f7ff feff 	bl	2000015c <graphic_ctr_bit_set>
	select_controller(controller);
2000035e:	1dfb      	adds	r3, r7, #7
20000360:	781b      	ldrb	r3, [r3, #0]
20000362:	0018      	movs	r0, r3
20000364:	f7ff ff54 	bl	20000210 <select_controller>
	
	delay_250ns();
20000368:	f000 f8d0 	bl	2000050c <delay_250ns>
	delay_250ns();
2000036c:	f000 f8ce 	bl	2000050c <delay_250ns>
	
	graphic_ctr_bit_set(B_E);
20000370:	2040      	movs	r0, #64	; 0x40
20000372:	f7ff fef3 	bl	2000015c <graphic_ctr_bit_set>
	
	delay_250ns();
20000376:	f000 f8c9 	bl	2000050c <delay_250ns>
	delay_250ns();
2000037a:	f000 f8c7 	bl	2000050c <delay_250ns>
	
	c = *portIdrHigh;
2000037e:	4a15      	ldr	r2, [pc, #84]	; (200003d4 <graphic_read+0x94>)
20000380:	230f      	movs	r3, #15
20000382:	18fb      	adds	r3, r7, r3
20000384:	7812      	ldrb	r2, [r2, #0]
20000386:	701a      	strb	r2, [r3, #0]
	graphic_ctr_bit_clear(B_E);
20000388:	2040      	movs	r0, #64	; 0x40
2000038a:	f7ff ff15 	bl	200001b8 <graphic_ctr_bit_clear>
	
	*portModer = 0x55555555;
2000038e:	4b0f      	ldr	r3, [pc, #60]	; (200003cc <graphic_read+0x8c>)
20000390:	4a11      	ldr	r2, [pc, #68]	; (200003d8 <graphic_read+0x98>)
20000392:	601a      	str	r2, [r3, #0]
	
	
	if (controller & B_CS1)
20000394:	1dfb      	adds	r3, r7, #7
20000396:	781b      	ldrb	r3, [r3, #0]
20000398:	2208      	movs	r2, #8
2000039a:	4013      	ands	r3, r2
2000039c:	d004      	beq.n	200003a8 <graphic_read+0x68>
	{
		select_controller(B_CS1);
2000039e:	2008      	movs	r0, #8
200003a0:	f7ff ff36 	bl	20000210 <select_controller>
		graphic_wait_ready();
200003a4:	f7ff ff8f 	bl	200002c6 <graphic_wait_ready>
	}
	
	if (controller & B_CS2)
200003a8:	1dfb      	adds	r3, r7, #7
200003aa:	781b      	ldrb	r3, [r3, #0]
200003ac:	2210      	movs	r2, #16
200003ae:	4013      	ands	r3, r2
200003b0:	d004      	beq.n	200003bc <graphic_read+0x7c>
	{
		select_controller(B_CS2);
200003b2:	2010      	movs	r0, #16
200003b4:	f7ff ff2c 	bl	20000210 <select_controller>
		graphic_wait_ready();
200003b8:	f7ff ff85 	bl	200002c6 <graphic_wait_ready>
	}
	
	return c;
200003bc:	230f      	movs	r3, #15
200003be:	18fb      	adds	r3, r7, r3
200003c0:	781b      	ldrb	r3, [r3, #0]
}
200003c2:	0018      	movs	r0, r3
200003c4:	46bd      	mov	sp, r7
200003c6:	b004      	add	sp, #16
200003c8:	bd80      	pop	{r7, pc}
200003ca:	46c0      	nop			; (mov r8, r8)
200003cc:	40021000 	andmi	r1, r2, r0
200003d0:	00005555 	andeq	r5, r0, r5, asr r5
200003d4:	40021011 	andmi	r1, r2, r1, lsl r0
200003d8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200003dc <graphic_read_data>:
static unsigned char graphic_read_data(unsigned char controller)
{
200003dc:	b580      	push	{r7, lr}
200003de:	b082      	sub	sp, #8
200003e0:	af00      	add	r7, sp, #0
200003e2:	0002      	movs	r2, r0
200003e4:	1dfb      	adds	r3, r7, #7
200003e6:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
200003e8:	1dfb      	adds	r3, r7, #7
200003ea:	781b      	ldrb	r3, [r3, #0]
200003ec:	0018      	movs	r0, r3
200003ee:	f7ff ffa7 	bl	20000340 <graphic_read>
	return graphic_read(controller);
200003f2:	1dfb      	adds	r3, r7, #7
200003f4:	781b      	ldrb	r3, [r3, #0]
200003f6:	0018      	movs	r0, r3
200003f8:	f7ff ffa2 	bl	20000340 <graphic_read>
200003fc:	0003      	movs	r3, r0
}
200003fe:	0018      	movs	r0, r3
20000400:	46bd      	mov	sp, r7
20000402:	b002      	add	sp, #8
20000404:	bd80      	pop	{r7, pc}

20000406 <graphic_write>:


static void graphic_write(unsigned char value, unsigned char controller)
{
20000406:	b580      	push	{r7, lr}
20000408:	b082      	sub	sp, #8
2000040a:	af00      	add	r7, sp, #0
2000040c:	0002      	movs	r2, r0
2000040e:	1dfb      	adds	r3, r7, #7
20000410:	701a      	strb	r2, [r3, #0]
20000412:	1dbb      	adds	r3, r7, #6
20000414:	1c0a      	adds	r2, r1, #0
20000416:	701a      	strb	r2, [r3, #0]
	*portOdrHigh = value;
20000418:	4a17      	ldr	r2, [pc, #92]	; (20000478 <graphic_write+0x72>)
2000041a:	1dfb      	adds	r3, r7, #7
2000041c:	781b      	ldrb	r3, [r3, #0]
2000041e:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
20000420:	1dbb      	adds	r3, r7, #6
20000422:	781b      	ldrb	r3, [r3, #0]
20000424:	0018      	movs	r0, r3
20000426:	f7ff fef3 	bl	20000210 <select_controller>
	
	delay_250ns(); delay_250ns();
2000042a:	f000 f86f 	bl	2000050c <delay_250ns>
2000042e:	f000 f86d 	bl	2000050c <delay_250ns>
	
	graphic_ctr_bit_set(B_E);
20000432:	2040      	movs	r0, #64	; 0x40
20000434:	f7ff fe92 	bl	2000015c <graphic_ctr_bit_set>
	delay_250ns(); delay_250ns();
20000438:	f000 f868 	bl	2000050c <delay_250ns>
2000043c:	f000 f866 	bl	2000050c <delay_250ns>
	
	graphic_ctr_bit_clear(B_E);
20000440:	2040      	movs	r0, #64	; 0x40
20000442:	f7ff feb9 	bl	200001b8 <graphic_ctr_bit_clear>
	
	if (controller & B_CS1)
20000446:	1dbb      	adds	r3, r7, #6
20000448:	781b      	ldrb	r3, [r3, #0]
2000044a:	2208      	movs	r2, #8
2000044c:	4013      	ands	r3, r2
2000044e:	d004      	beq.n	2000045a <graphic_write+0x54>
	{
		select_controller(B_CS1);
20000450:	2008      	movs	r0, #8
20000452:	f7ff fedd 	bl	20000210 <select_controller>
		graphic_wait_ready();
20000456:	f7ff ff36 	bl	200002c6 <graphic_wait_ready>
	}
	
	if (controller & B_CS2)
2000045a:	1dbb      	adds	r3, r7, #6
2000045c:	781b      	ldrb	r3, [r3, #0]
2000045e:	2210      	movs	r2, #16
20000460:	4013      	ands	r3, r2
20000462:	d004      	beq.n	2000046e <graphic_write+0x68>
	{
		select_controller(B_CS2);
20000464:	2010      	movs	r0, #16
20000466:	f7ff fed3 	bl	20000210 <select_controller>
		graphic_wait_ready();
2000046a:	f7ff ff2c 	bl	200002c6 <graphic_wait_ready>
	}
	
}
2000046e:	46c0      	nop			; (mov r8, r8)
20000470:	46bd      	mov	sp, r7
20000472:	b002      	add	sp, #8
20000474:	bd80      	pop	{r7, pc}
20000476:	46c0      	nop			; (mov r8, r8)
20000478:	40021015 	andmi	r1, r2, r5, lsl r0

2000047c <graphic_write_command>:


static void graphic_write_command(unsigned char command, unsigned char controller)
{
2000047c:	b580      	push	{r7, lr}
2000047e:	b082      	sub	sp, #8
20000480:	af00      	add	r7, sp, #0
20000482:	0002      	movs	r2, r0
20000484:	1dfb      	adds	r3, r7, #7
20000486:	701a      	strb	r2, [r3, #0]
20000488:	1dbb      	adds	r3, r7, #6
2000048a:	1c0a      	adds	r2, r1, #0
2000048c:	701a      	strb	r2, [r3, #0]
	graphic_ctr_bit_clear(B_E);
2000048e:	2040      	movs	r0, #64	; 0x40
20000490:	f7ff fe92 	bl	200001b8 <graphic_ctr_bit_clear>
	select_controller(controller);
20000494:	1dbb      	adds	r3, r7, #6
20000496:	781b      	ldrb	r3, [r3, #0]
20000498:	0018      	movs	r0, r3
2000049a:	f7ff feb9 	bl	20000210 <select_controller>
	graphic_ctr_bit_clear(B_RS|B_RW);
2000049e:	2003      	movs	r0, #3
200004a0:	f7ff fe8a 	bl	200001b8 <graphic_ctr_bit_clear>
	graphic_write(command,controller);
200004a4:	1dbb      	adds	r3, r7, #6
200004a6:	781a      	ldrb	r2, [r3, #0]
200004a8:	1dfb      	adds	r3, r7, #7
200004aa:	781b      	ldrb	r3, [r3, #0]
200004ac:	0011      	movs	r1, r2
200004ae:	0018      	movs	r0, r3
200004b0:	f7ff ffa9 	bl	20000406 <graphic_write>
}
200004b4:	46c0      	nop			; (mov r8, r8)
200004b6:	46bd      	mov	sp, r7
200004b8:	b002      	add	sp, #8
200004ba:	bd80      	pop	{r7, pc}

200004bc <graphic_write_data>:
static void graphic_write_data(unsigned char data, unsigned char controller)
{
200004bc:	b580      	push	{r7, lr}
200004be:	b082      	sub	sp, #8
200004c0:	af00      	add	r7, sp, #0
200004c2:	0002      	movs	r2, r0
200004c4:	1dfb      	adds	r3, r7, #7
200004c6:	701a      	strb	r2, [r3, #0]
200004c8:	1dbb      	adds	r3, r7, #6
200004ca:	1c0a      	adds	r2, r1, #0
200004cc:	701a      	strb	r2, [r3, #0]
	graphic_ctr_bit_clear(B_E);
200004ce:	2040      	movs	r0, #64	; 0x40
200004d0:	f7ff fe72 	bl	200001b8 <graphic_ctr_bit_clear>
	select_controller(controller);
200004d4:	1dbb      	adds	r3, r7, #6
200004d6:	781b      	ldrb	r3, [r3, #0]
200004d8:	0018      	movs	r0, r3
200004da:	f7ff fe99 	bl	20000210 <select_controller>
	graphic_ctr_bit_set(B_RS);
200004de:	2001      	movs	r0, #1
200004e0:	f7ff fe3c 	bl	2000015c <graphic_ctr_bit_set>
	graphic_ctr_bit_clear(B_RW);
200004e4:	2002      	movs	r0, #2
200004e6:	f7ff fe67 	bl	200001b8 <graphic_ctr_bit_clear>
	graphic_write(data,controller);
200004ea:	1dbb      	adds	r3, r7, #6
200004ec:	781a      	ldrb	r2, [r3, #0]
200004ee:	1dfb      	adds	r3, r7, #7
200004f0:	781b      	ldrb	r3, [r3, #0]
200004f2:	0011      	movs	r1, r2
200004f4:	0018      	movs	r0, r3
200004f6:	f7ff ff86 	bl	20000406 <graphic_write>
	
}
200004fa:	46c0      	nop			; (mov r8, r8)
200004fc:	46bd      	mov	sp, r7
200004fe:	b002      	add	sp, #8
20000500:	bd80      	pop	{r7, pc}

20000502 <graphic_clear_screen>:

void graphic_clear_screen(void)
{
20000502:	b580      	push	{r7, lr}
20000504:	af00      	add	r7, sp, #0
	#ifdef SIMULATOR
		return;
20000506:	46c0      	nop			; (mov r8, r8)
		for (i = 0;i<=63;i++)
		{
			graphic_write_data(0,B_CS1|B_CS2);
		}
	}
}
20000508:	46bd      	mov	sp, r7
2000050a:	bd80      	pop	{r7, pc}

2000050c <delay_250ns>:


void delay_250ns(void){
2000050c:	b580      	push	{r7, lr}
2000050e:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
20000510:	4b0f      	ldr	r3, [pc, #60]	; (20000550 <delay_250ns+0x44>)
20000512:	2200      	movs	r2, #0
20000514:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/4) -1);
20000516:	4b0f      	ldr	r3, [pc, #60]	; (20000554 <delay_250ns+0x48>)
20000518:	2229      	movs	r2, #41	; 0x29
2000051a:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
2000051c:	4b0e      	ldr	r3, [pc, #56]	; (20000558 <delay_250ns+0x4c>)
2000051e:	2200      	movs	r2, #0
20000520:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000522:	4b0b      	ldr	r3, [pc, #44]	; (20000550 <delay_250ns+0x44>)
20000524:	2205      	movs	r2, #5
20000526:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){TICKS__++;}
20000528:	e005      	b.n	20000536 <delay_250ns+0x2a>
2000052a:	4b0c      	ldr	r3, [pc, #48]	; (2000055c <delay_250ns+0x50>)
2000052c:	881b      	ldrh	r3, [r3, #0]
2000052e:	3301      	adds	r3, #1
20000530:	b29a      	uxth	r2, r3
20000532:	4b0a      	ldr	r3, [pc, #40]	; (2000055c <delay_250ns+0x50>)
20000534:	801a      	strh	r2, [r3, #0]
20000536:	4b06      	ldr	r3, [pc, #24]	; (20000550 <delay_250ns+0x44>)
20000538:	681a      	ldr	r2, [r3, #0]
2000053a:	2380      	movs	r3, #128	; 0x80
2000053c:	025b      	lsls	r3, r3, #9
2000053e:	4013      	ands	r3, r2
20000540:	d0f3      	beq.n	2000052a <delay_250ns+0x1e>
	*STK_CTRL = 0;
20000542:	4b03      	ldr	r3, [pc, #12]	; (20000550 <delay_250ns+0x44>)
20000544:	2200      	movs	r2, #0
20000546:	601a      	str	r2, [r3, #0]
}
20000548:	46c0      	nop			; (mov r8, r8)
2000054a:	46bd      	mov	sp, r7
2000054c:	bd80      	pop	{r7, pc}
2000054e:	46c0      	nop			; (mov r8, r8)
20000550:	e000e010 	and	lr, r0, r0, lsl r0
20000554:	e000e014 	and	lr, r0, r4, lsl r0
20000558:	e000e018 	and	lr, r0, r8, lsl r0
2000055c:	20001b2c 	andcs	r1, r0, ip, lsr #22

20000560 <delay_micro>:

void delay_micro(unsigned int us){
20000560:	b580      	push	{r7, lr}
20000562:	b082      	sub	sp, #8
20000564:	af00      	add	r7, sp, #0
20000566:	6078      	str	r0, [r7, #4]
	while(us--) {
20000568:	e007      	b.n	2000057a <delay_micro+0x1a>
		delay_250ns();
2000056a:	f7ff ffcf 	bl	2000050c <delay_250ns>
		delay_250ns();
2000056e:	f7ff ffcd 	bl	2000050c <delay_250ns>
		delay_250ns();
20000572:	f7ff ffcb 	bl	2000050c <delay_250ns>
		delay_250ns();
20000576:	f7ff ffc9 	bl	2000050c <delay_250ns>
	while(us--) {
2000057a:	687b      	ldr	r3, [r7, #4]
2000057c:	1e5a      	subs	r2, r3, #1
2000057e:	607a      	str	r2, [r7, #4]
20000580:	2b00      	cmp	r3, #0
20000582:	d1f2      	bne.n	2000056a <delay_micro+0xa>
	}
}
20000584:	46c0      	nop			; (mov r8, r8)
20000586:	46bd      	mov	sp, r7
20000588:	b002      	add	sp, #8
2000058a:	bd80      	pop	{r7, pc}

2000058c <delay_milli>:

void delay_milli(unsigned int ms){
2000058c:	b580      	push	{r7, lr}
2000058e:	b082      	sub	sp, #8
20000590:	af00      	add	r7, sp, #0
20000592:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		while(ms--)
20000594:	e002      	b.n	2000059c <delay_milli+0x10>
			delay_micro(1);
20000596:	2001      	movs	r0, #1
20000598:	f7ff ffe2 	bl	20000560 <delay_micro>
		while(ms--)
2000059c:	687b      	ldr	r3, [r7, #4]
2000059e:	1e5a      	subs	r2, r3, #1
200005a0:	607a      	str	r2, [r7, #4]
200005a2:	2b00      	cmp	r3, #0
200005a4:	d1f7      	bne.n	20000596 <delay_milli+0xa>
	#else
	//ms *= 1000;
		while(ms--)
			delay_micro(1000);
	#endif
}
200005a6:	46c0      	nop			; (mov r8, r8)
200005a8:	46bd      	mov	sp, r7
200005aa:	b002      	add	sp, #8
200005ac:	bd80      	pop	{r7, pc}

200005ae <clearBackBuffer>:


void clearBackBuffer(void)
{
200005ae:	b580      	push	{r7, lr}
200005b0:	b082      	sub	sp, #8
200005b2:	af00      	add	r7, sp, #0
	int i;
	for (i = 0; i < 1024; i++)
200005b4:	2300      	movs	r3, #0
200005b6:	607b      	str	r3, [r7, #4]
200005b8:	e007      	b.n	200005ca <clearBackBuffer+0x1c>
		backBuffer[i] = 0;
200005ba:	4a08      	ldr	r2, [pc, #32]	; (200005dc <clearBackBuffer+0x2e>)
200005bc:	687b      	ldr	r3, [r7, #4]
200005be:	18d3      	adds	r3, r2, r3
200005c0:	2200      	movs	r2, #0
200005c2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 1024; i++)
200005c4:	687b      	ldr	r3, [r7, #4]
200005c6:	3301      	adds	r3, #1
200005c8:	607b      	str	r3, [r7, #4]
200005ca:	687b      	ldr	r3, [r7, #4]
200005cc:	4a04      	ldr	r2, [pc, #16]	; (200005e0 <clearBackBuffer+0x32>)
200005ce:	4293      	cmp	r3, r2
200005d0:	ddf3      	ble.n	200005ba <clearBackBuffer+0xc>
}
200005d2:	46c0      	nop			; (mov r8, r8)
200005d4:	46bd      	mov	sp, r7
200005d6:	b002      	add	sp, #8
200005d8:	bd80      	pop	{r7, pc}
200005da:	46c0      	nop			; (mov r8, r8)
200005dc:	20001b88 	andcs	r1, r0, r8, lsl #23
200005e0:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

200005e4 <pixel>:

void pixel(int x, int y) 
{
200005e4:	b580      	push	{r7, lr}
200005e6:	b084      	sub	sp, #16
200005e8:	af00      	add	r7, sp, #0
200005ea:	6078      	str	r0, [r7, #4]
200005ec:	6039      	str	r1, [r7, #0]
	unsigned char mask;
	int index = 0;
200005ee:	2300      	movs	r3, #0
200005f0:	60fb      	str	r3, [r7, #12]
	if( (x > 128 ) || (x < 1) || (y > 64) || (y < 1) ) return;
200005f2:	687b      	ldr	r3, [r7, #4]
200005f4:	2b80      	cmp	r3, #128	; 0x80
200005f6:	dc3d      	bgt.n	20000674 <pixel+0x90>
200005f8:	687b      	ldr	r3, [r7, #4]
200005fa:	2b00      	cmp	r3, #0
200005fc:	dd3a      	ble.n	20000674 <pixel+0x90>
200005fe:	683b      	ldr	r3, [r7, #0]
20000600:	2b40      	cmp	r3, #64	; 0x40
20000602:	dc37      	bgt.n	20000674 <pixel+0x90>
20000604:	683b      	ldr	r3, [r7, #0]
20000606:	2b00      	cmp	r3, #0
20000608:	dd34      	ble.n	20000674 <pixel+0x90>
	mask = 1 << ((y-1)%8);
2000060a:	683b      	ldr	r3, [r7, #0]
2000060c:	3b01      	subs	r3, #1
2000060e:	4a1b      	ldr	r2, [pc, #108]	; (2000067c <pixel+0x98>)
20000610:	4013      	ands	r3, r2
20000612:	d504      	bpl.n	2000061e <pixel+0x3a>
20000614:	3b01      	subs	r3, #1
20000616:	2208      	movs	r2, #8
20000618:	4252      	negs	r2, r2
2000061a:	4313      	orrs	r3, r2
2000061c:	3301      	adds	r3, #1
2000061e:	001a      	movs	r2, r3
20000620:	2301      	movs	r3, #1
20000622:	4093      	lsls	r3, r2
20000624:	001a      	movs	r2, r3
20000626:	230b      	movs	r3, #11
20000628:	18fb      	adds	r3, r7, r3
2000062a:	701a      	strb	r2, [r3, #0]
	if(x > 63) 
2000062c:	687b      	ldr	r3, [r7, #4]
2000062e:	2b3f      	cmp	r3, #63	; 0x3f
20000630:	dd05      	ble.n	2000063e <pixel+0x5a>
	{
		x -= 64;
20000632:	687b      	ldr	r3, [r7, #4]
20000634:	3b40      	subs	r3, #64	; 0x40
20000636:	607b      	str	r3, [r7, #4]
		index = 512;
20000638:	2380      	movs	r3, #128	; 0x80
2000063a:	009b      	lsls	r3, r3, #2
2000063c:	60fb      	str	r3, [r7, #12]
	}
	index += x + ((y-1)/8)*64;
2000063e:	683b      	ldr	r3, [r7, #0]
20000640:	3b01      	subs	r3, #1
20000642:	2b00      	cmp	r3, #0
20000644:	da00      	bge.n	20000648 <pixel+0x64>
20000646:	3307      	adds	r3, #7
20000648:	10db      	asrs	r3, r3, #3
2000064a:	019a      	lsls	r2, r3, #6
2000064c:	687b      	ldr	r3, [r7, #4]
2000064e:	18d3      	adds	r3, r2, r3
20000650:	68fa      	ldr	r2, [r7, #12]
20000652:	18d3      	adds	r3, r2, r3
20000654:	60fb      	str	r3, [r7, #12]
	backBuffer[index] |= mask;
20000656:	4a0a      	ldr	r2, [pc, #40]	; (20000680 <pixel+0x9c>)
20000658:	68fb      	ldr	r3, [r7, #12]
2000065a:	18d3      	adds	r3, r2, r3
2000065c:	781a      	ldrb	r2, [r3, #0]
2000065e:	230b      	movs	r3, #11
20000660:	18fb      	adds	r3, r7, r3
20000662:	781b      	ldrb	r3, [r3, #0]
20000664:	4313      	orrs	r3, r2
20000666:	b2d9      	uxtb	r1, r3
20000668:	4a05      	ldr	r2, [pc, #20]	; (20000680 <pixel+0x9c>)
2000066a:	68fb      	ldr	r3, [r7, #12]
2000066c:	18d3      	adds	r3, r2, r3
2000066e:	1c0a      	adds	r2, r1, #0
20000670:	701a      	strb	r2, [r3, #0]
20000672:	e000      	b.n	20000676 <pixel+0x92>
	if( (x > 128 ) || (x < 1) || (y > 64) || (y < 1) ) return;
20000674:	46c0      	nop			; (mov r8, r8)
}
20000676:	46bd      	mov	sp, r7
20000678:	b004      	add	sp, #16
2000067a:	bd80      	pop	{r7, pc}
2000067c:	80000007 	andhi	r0, r0, r7
20000680:	20001b88 	andcs	r1, r0, r8, lsl #23

20000684 <graphic_draw_screen>:

void graphic_draw_screen(void)
{
20000684:	b580      	push	{r7, lr}
20000686:	b084      	sub	sp, #16
20000688:	af00      	add	r7, sp, #0
	unsigned char i, j, controller, c;
	unsigned int k = 0;
2000068a:	2300      	movs	r3, #0
2000068c:	60bb      	str	r3, [r7, #8]
	for(c = 0; c < 2; c++) 
2000068e:	230d      	movs	r3, #13
20000690:	18fb      	adds	r3, r7, r3
20000692:	2200      	movs	r2, #0
20000694:	701a      	strb	r2, [r3, #0]
20000696:	e052      	b.n	2000073e <graphic_draw_screen+0xba>
	{
		controller = (c == 0) ? B_CS1 : B_CS2;
20000698:	230d      	movs	r3, #13
2000069a:	18fb      	adds	r3, r7, r3
2000069c:	781b      	ldrb	r3, [r3, #0]
2000069e:	2b00      	cmp	r3, #0
200006a0:	d101      	bne.n	200006a6 <graphic_draw_screen+0x22>
200006a2:	2208      	movs	r2, #8
200006a4:	e000      	b.n	200006a8 <graphic_draw_screen+0x24>
200006a6:	2210      	movs	r2, #16
200006a8:	1dfb      	adds	r3, r7, #7
200006aa:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 8; j++) 
200006ac:	230e      	movs	r3, #14
200006ae:	18fb      	adds	r3, r7, r3
200006b0:	2200      	movs	r2, #0
200006b2:	701a      	strb	r2, [r3, #0]
200006b4:	e037      	b.n	20000726 <graphic_draw_screen+0xa2>
		{
			graphic_write_command(LCD_SET_PAGE | j, controller);
200006b6:	230e      	movs	r3, #14
200006b8:	18fb      	adds	r3, r7, r3
200006ba:	781b      	ldrb	r3, [r3, #0]
200006bc:	2248      	movs	r2, #72	; 0x48
200006be:	4252      	negs	r2, r2
200006c0:	4313      	orrs	r3, r2
200006c2:	b2da      	uxtb	r2, r3
200006c4:	1dfb      	adds	r3, r7, #7
200006c6:	781b      	ldrb	r3, [r3, #0]
200006c8:	0019      	movs	r1, r3
200006ca:	0010      	movs	r0, r2
200006cc:	f7ff fed6 	bl	2000047c <graphic_write_command>
			graphic_write_command(LCD_SET_ADD | 0, controller);
200006d0:	1dfb      	adds	r3, r7, #7
200006d2:	781b      	ldrb	r3, [r3, #0]
200006d4:	0019      	movs	r1, r3
200006d6:	2040      	movs	r0, #64	; 0x40
200006d8:	f7ff fed0 	bl	2000047c <graphic_write_command>
			for(i = 0; i <= 63; i++, k++) 
200006dc:	230f      	movs	r3, #15
200006de:	18fb      	adds	r3, r7, r3
200006e0:	2200      	movs	r2, #0
200006e2:	701a      	strb	r2, [r3, #0]
200006e4:	e013      	b.n	2000070e <graphic_draw_screen+0x8a>
			{
				graphic_write_data(backBuffer[k], controller);
200006e6:	4a1a      	ldr	r2, [pc, #104]	; (20000750 <graphic_draw_screen+0xcc>)
200006e8:	68bb      	ldr	r3, [r7, #8]
200006ea:	18d3      	adds	r3, r2, r3
200006ec:	781a      	ldrb	r2, [r3, #0]
200006ee:	1dfb      	adds	r3, r7, #7
200006f0:	781b      	ldrb	r3, [r3, #0]
200006f2:	0019      	movs	r1, r3
200006f4:	0010      	movs	r0, r2
200006f6:	f7ff fee1 	bl	200004bc <graphic_write_data>
			for(i = 0; i <= 63; i++, k++) 
200006fa:	230f      	movs	r3, #15
200006fc:	18fb      	adds	r3, r7, r3
200006fe:	781a      	ldrb	r2, [r3, #0]
20000700:	230f      	movs	r3, #15
20000702:	18fb      	adds	r3, r7, r3
20000704:	3201      	adds	r2, #1
20000706:	701a      	strb	r2, [r3, #0]
20000708:	68bb      	ldr	r3, [r7, #8]
2000070a:	3301      	adds	r3, #1
2000070c:	60bb      	str	r3, [r7, #8]
2000070e:	230f      	movs	r3, #15
20000710:	18fb      	adds	r3, r7, r3
20000712:	781b      	ldrb	r3, [r3, #0]
20000714:	2b3f      	cmp	r3, #63	; 0x3f
20000716:	d9e6      	bls.n	200006e6 <graphic_draw_screen+0x62>
		for(j = 0; j < 8; j++) 
20000718:	230e      	movs	r3, #14
2000071a:	18fb      	adds	r3, r7, r3
2000071c:	781a      	ldrb	r2, [r3, #0]
2000071e:	230e      	movs	r3, #14
20000720:	18fb      	adds	r3, r7, r3
20000722:	3201      	adds	r2, #1
20000724:	701a      	strb	r2, [r3, #0]
20000726:	230e      	movs	r3, #14
20000728:	18fb      	adds	r3, r7, r3
2000072a:	781b      	ldrb	r3, [r3, #0]
2000072c:	2b07      	cmp	r3, #7
2000072e:	d9c2      	bls.n	200006b6 <graphic_draw_screen+0x32>
	for(c = 0; c < 2; c++) 
20000730:	230d      	movs	r3, #13
20000732:	18fb      	adds	r3, r7, r3
20000734:	781a      	ldrb	r2, [r3, #0]
20000736:	230d      	movs	r3, #13
20000738:	18fb      	adds	r3, r7, r3
2000073a:	3201      	adds	r2, #1
2000073c:	701a      	strb	r2, [r3, #0]
2000073e:	230d      	movs	r3, #13
20000740:	18fb      	adds	r3, r7, r3
20000742:	781b      	ldrb	r3, [r3, #0]
20000744:	2b01      	cmp	r3, #1
20000746:	d9a7      	bls.n	20000698 <graphic_draw_screen+0x14>
			}
		}
	}
20000748:	46c0      	nop			; (mov r8, r8)
2000074a:	46bd      	mov	sp, r7
2000074c:	b004      	add	sp, #16
2000074e:	bd80      	pop	{r7, pc}
20000750:	20001b88 	andcs	r1, r0, r8, lsl #23

20000754 <input_initialize>:
#include "input.h"

void input_initialize(void)
{
20000754:	b580      	push	{r7, lr}
20000756:	af00      	add	r7, sp, #0
	*((unsigned long *)  0x40023830)= 0x18;
20000758:	4b09      	ldr	r3, [pc, #36]	; (20000780 <input_initialize+0x2c>)
2000075a:	2218      	movs	r2, #24
2000075c:	601a      	str	r2, [r3, #0]
	*GPIO_MODER = 0x55005555;
2000075e:	4b09      	ldr	r3, [pc, #36]	; (20000784 <input_initialize+0x30>)
20000760:	4a09      	ldr	r2, [pc, #36]	; (20000788 <input_initialize+0x34>)
20000762:	601a      	str	r2, [r3, #0]
	*GPIO_PUPDR |=0x00AA;
20000764:	4b09      	ldr	r3, [pc, #36]	; (2000078c <input_initialize+0x38>)
20000766:	4a09      	ldr	r2, [pc, #36]	; (2000078c <input_initialize+0x38>)
20000768:	6812      	ldr	r2, [r2, #0]
2000076a:	21aa      	movs	r1, #170	; 0xaa
2000076c:	430a      	orrs	r2, r1
2000076e:	601a      	str	r2, [r3, #0]
	*GPIO_OTYPER |=0x0;
20000770:	4b07      	ldr	r3, [pc, #28]	; (20000790 <input_initialize+0x3c>)
20000772:	4a07      	ldr	r2, [pc, #28]	; (20000790 <input_initialize+0x3c>)
20000774:	8812      	ldrh	r2, [r2, #0]
20000776:	b292      	uxth	r2, r2
20000778:	801a      	strh	r2, [r3, #0]
	
	
}
2000077a:	46c0      	nop			; (mov r8, r8)
2000077c:	46bd      	mov	sp, r7
2000077e:	bd80      	pop	{r7, pc}
20000780:	40023830 	andmi	r3, r2, r0, lsr r8
20000784:	40020c00 	andmi	r0, r2, r0, lsl #24
20000788:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
2000078c:	40020c0c 	andmi	r0, r2, ip, lsl #24
20000790:	40020c04 	andmi	r0, r2, r4, lsl #24

20000794 <kbdActivate>:


void kbdActivate(unsigned int row)
{
20000794:	b580      	push	{r7, lr}
20000796:	b082      	sub	sp, #8
20000798:	af00      	add	r7, sp, #0
2000079a:	6078      	str	r0, [r7, #4]
	switch (row)
2000079c:	687b      	ldr	r3, [r7, #4]
2000079e:	2b04      	cmp	r3, #4
200007a0:	d819      	bhi.n	200007d6 <kbdActivate+0x42>
200007a2:	687b      	ldr	r3, [r7, #4]
200007a4:	009a      	lsls	r2, r3, #2
200007a6:	4b0e      	ldr	r3, [pc, #56]	; (200007e0 <kbdActivate+0x4c>)
200007a8:	18d3      	adds	r3, r2, r3
200007aa:	681b      	ldr	r3, [r3, #0]
200007ac:	469f      	mov	pc, r3
	{
		case 1:	*GPIO_ODR_HIGH = 0x10;	break;
200007ae:	4b0d      	ldr	r3, [pc, #52]	; (200007e4 <kbdActivate+0x50>)
200007b0:	2210      	movs	r2, #16
200007b2:	701a      	strb	r2, [r3, #0]
200007b4:	e00f      	b.n	200007d6 <kbdActivate+0x42>
		case 2: *GPIO_ODR_HIGH = 0x20;	break;
200007b6:	4b0b      	ldr	r3, [pc, #44]	; (200007e4 <kbdActivate+0x50>)
200007b8:	2220      	movs	r2, #32
200007ba:	701a      	strb	r2, [r3, #0]
200007bc:	e00b      	b.n	200007d6 <kbdActivate+0x42>
		case 3:	*GPIO_ODR_HIGH = 0x40;	break;
200007be:	4b09      	ldr	r3, [pc, #36]	; (200007e4 <kbdActivate+0x50>)
200007c0:	2240      	movs	r2, #64	; 0x40
200007c2:	701a      	strb	r2, [r3, #0]
200007c4:	e007      	b.n	200007d6 <kbdActivate+0x42>
		case 4:	*GPIO_ODR_HIGH = 0x80;	break;
200007c6:	4b07      	ldr	r3, [pc, #28]	; (200007e4 <kbdActivate+0x50>)
200007c8:	2280      	movs	r2, #128	; 0x80
200007ca:	701a      	strb	r2, [r3, #0]
200007cc:	e003      	b.n	200007d6 <kbdActivate+0x42>
		case 0: *GPIO_ODR_HIGH = 0x00;	break;
200007ce:	4b05      	ldr	r3, [pc, #20]	; (200007e4 <kbdActivate+0x50>)
200007d0:	2200      	movs	r2, #0
200007d2:	701a      	strb	r2, [r3, #0]
200007d4:	46c0      	nop			; (mov r8, r8)
	}
}
200007d6:	46c0      	nop			; (mov r8, r8)
200007d8:	46bd      	mov	sp, r7
200007da:	b002      	add	sp, #8
200007dc:	bd80      	pop	{r7, pc}
200007de:	46c0      	nop			; (mov r8, r8)
200007e0:	20002330 	andcs	r2, r0, r0, lsr r3
200007e4:	40020c15 	andmi	r0, r2, r5, lsl ip

200007e8 <kbdGetCol>:

int kbdGetCol(void)
{
200007e8:	b580      	push	{r7, lr}
200007ea:	b082      	sub	sp, #8
200007ec:	af00      	add	r7, sp, #0
	unsigned char c;
	c= *GPIO_IDR_HIGH;
200007ee:	4a12      	ldr	r2, [pc, #72]	; (20000838 <kbdGetCol+0x50>)
200007f0:	1dfb      	adds	r3, r7, #7
200007f2:	7812      	ldrb	r2, [r2, #0]
200007f4:	701a      	strb	r2, [r3, #0]
	
	if (c	&	0x8)	return 4;
200007f6:	1dfb      	adds	r3, r7, #7
200007f8:	781b      	ldrb	r3, [r3, #0]
200007fa:	2208      	movs	r2, #8
200007fc:	4013      	ands	r3, r2
200007fe:	d001      	beq.n	20000804 <kbdGetCol+0x1c>
20000800:	2304      	movs	r3, #4
20000802:	e015      	b.n	20000830 <kbdGetCol+0x48>
	if (c	&	0x4)	return 3;
20000804:	1dfb      	adds	r3, r7, #7
20000806:	781b      	ldrb	r3, [r3, #0]
20000808:	2204      	movs	r2, #4
2000080a:	4013      	ands	r3, r2
2000080c:	d001      	beq.n	20000812 <kbdGetCol+0x2a>
2000080e:	2303      	movs	r3, #3
20000810:	e00e      	b.n	20000830 <kbdGetCol+0x48>
	if (c	&	0x2)	return 2;
20000812:	1dfb      	adds	r3, r7, #7
20000814:	781b      	ldrb	r3, [r3, #0]
20000816:	2202      	movs	r2, #2
20000818:	4013      	ands	r3, r2
2000081a:	d001      	beq.n	20000820 <kbdGetCol+0x38>
2000081c:	2302      	movs	r3, #2
2000081e:	e007      	b.n	20000830 <kbdGetCol+0x48>
	if (c	&	0x1)	return 1;
20000820:	1dfb      	adds	r3, r7, #7
20000822:	781b      	ldrb	r3, [r3, #0]
20000824:	2201      	movs	r2, #1
20000826:	4013      	ands	r3, r2
20000828:	d001      	beq.n	2000082e <kbdGetCol+0x46>
2000082a:	2301      	movs	r3, #1
2000082c:	e000      	b.n	20000830 <kbdGetCol+0x48>
	
	return 0;
2000082e:	2300      	movs	r3, #0
}
20000830:	0018      	movs	r0, r3
20000832:	46bd      	mov	sp, r7
20000834:	b002      	add	sp, #8
20000836:	bd80      	pop	{r7, pc}
20000838:	40020c11 	andmi	r0, r2, r1, lsl ip

2000083c <keyb>:


unsigned char keyb(void)
{
2000083c:	b590      	push	{r4, r7, lr}
2000083e:	b087      	sub	sp, #28
20000840:	af00      	add	r7, sp, #0
	unsigned char key[]={1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
20000842:	003b      	movs	r3, r7
20000844:	4a16      	ldr	r2, [pc, #88]	; (200008a0 <keyb+0x64>)
20000846:	ca13      	ldmia	r2!, {r0, r1, r4}
20000848:	c313      	stmia	r3!, {r0, r1, r4}
2000084a:	6812      	ldr	r2, [r2, #0]
2000084c:	601a      	str	r2, [r3, #0]
	
	int row, col;
	
	for (row =1; row<=4;row++)
2000084e:	2301      	movs	r3, #1
20000850:	617b      	str	r3, [r7, #20]
20000852:	e019      	b.n	20000888 <keyb+0x4c>
	{
		kbdActivate(row);
20000854:	697b      	ldr	r3, [r7, #20]
20000856:	0018      	movs	r0, r3
20000858:	f7ff ff9c 	bl	20000794 <kbdActivate>
		if ((col=kbdGetCol()))
2000085c:	f7ff ffc4 	bl	200007e8 <kbdGetCol>
20000860:	0003      	movs	r3, r0
20000862:	613b      	str	r3, [r7, #16]
20000864:	693b      	ldr	r3, [r7, #16]
20000866:	2b00      	cmp	r3, #0
20000868:	d00b      	beq.n	20000882 <keyb+0x46>
		{
			kbdActivate(0);
2000086a:	2000      	movs	r0, #0
2000086c:	f7ff ff92 	bl	20000794 <kbdActivate>
			return key[4*(row-1)+(col-1)];
20000870:	697b      	ldr	r3, [r7, #20]
20000872:	3b01      	subs	r3, #1
20000874:	009a      	lsls	r2, r3, #2
20000876:	693b      	ldr	r3, [r7, #16]
20000878:	3b01      	subs	r3, #1
2000087a:	18d3      	adds	r3, r2, r3
2000087c:	003a      	movs	r2, r7
2000087e:	5cd3      	ldrb	r3, [r2, r3]
20000880:	e009      	b.n	20000896 <keyb+0x5a>
	for (row =1; row<=4;row++)
20000882:	697b      	ldr	r3, [r7, #20]
20000884:	3301      	adds	r3, #1
20000886:	617b      	str	r3, [r7, #20]
20000888:	697b      	ldr	r3, [r7, #20]
2000088a:	2b04      	cmp	r3, #4
2000088c:	dde2      	ble.n	20000854 <keyb+0x18>
		}
	}
	
	kbdActivate(0);
2000088e:	2000      	movs	r0, #0
20000890:	f7ff ff80 	bl	20000794 <kbdActivate>
	return 0xFF;
20000894:	23ff      	movs	r3, #255	; 0xff
20000896:	0018      	movs	r0, r3
20000898:	46bd      	mov	sp, r7
2000089a:	b007      	add	sp, #28
2000089c:	bd90      	pop	{r4, r7, pc}
2000089e:	46c0      	nop			; (mov r8, r8)
200008a0:	20002344 	andcs	r2, r0, r4, asr #6

200008a4 <do_gravity>:
		0, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048
};


void do_gravity(int d)
{
200008a4:	b580      	push	{r7, lr}
200008a6:	b08e      	sub	sp, #56	; 0x38
200008a8:	af00      	add	r7, sp, #0
200008aa:	6078      	str	r0, [r7, #4]
                }                                                           \
            }                                                               \
        }                                                                   \
    } while (0);

	switch (d) {
200008ac:	687b      	ldr	r3, [r7, #4]
200008ae:	2b02      	cmp	r3, #2
200008b0:	d100      	bne.n	200008b4 <do_gravity+0x10>
200008b2:	e09f      	b.n	200009f4 <do_gravity+0x150>
200008b4:	dc03      	bgt.n	200008be <do_gravity+0x1a>
200008b6:	2b01      	cmp	r3, #1
200008b8:	d100      	bne.n	200008bc <do_gravity+0x18>
200008ba:	e0e6      	b.n	20000a8a <do_gravity+0x1e6>
			GRAVITATE_DIRECTION(y, x, 0, < 3, 1, 0, < 4, 1, 0, 1);
			break;
	}

#undef GRAVITATE_DIRECTION
}
200008bc:	e130      	b.n	20000b20 <do_gravity+0x27c>
	switch (d) {
200008be:	2b03      	cmp	r3, #3
200008c0:	d04d      	beq.n	2000095e <do_gravity+0xba>
200008c2:	2b04      	cmp	r3, #4
200008c4:	d000      	beq.n	200008c8 <do_gravity+0x24>
}
200008c6:	e12b      	b.n	20000b20 <do_gravity+0x27c>
			GRAVITATE_DIRECTION(x, y, 0, < 3, 1, 0, < 4, 1, 1, 0);
200008c8:	2300      	movs	r3, #0
200008ca:	637b      	str	r3, [r7, #52]	; 0x34
200008cc:	e043      	b.n	20000956 <do_gravity+0xb2>
200008ce:	2301      	movs	r3, #1
200008d0:	637b      	str	r3, [r7, #52]	; 0x34
200008d2:	2300      	movs	r3, #0
200008d4:	633b      	str	r3, [r7, #48]	; 0x30
200008d6:	e03b      	b.n	20000950 <do_gravity+0xac>
200008d8:	2300      	movs	r3, #0
200008da:	62fb      	str	r3, [r7, #44]	; 0x2c
200008dc:	e032      	b.n	20000944 <do_gravity+0xa0>
200008de:	4b92      	ldr	r3, [pc, #584]	; (20000b28 <do_gravity+0x284>)
200008e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
200008e2:	0091      	lsls	r1, r2, #2
200008e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
200008e6:	188a      	adds	r2, r1, r2
200008e8:	0092      	lsls	r2, r2, #2
200008ea:	58d3      	ldr	r3, [r2, r3]
200008ec:	2b00      	cmp	r3, #0
200008ee:	d126      	bne.n	2000093e <do_gravity+0x9a>
200008f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200008f2:	1c5a      	adds	r2, r3, #1
200008f4:	4b8c      	ldr	r3, [pc, #560]	; (20000b28 <do_gravity+0x284>)
200008f6:	0091      	lsls	r1, r2, #2
200008f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
200008fa:	188a      	adds	r2, r1, r2
200008fc:	0092      	lsls	r2, r2, #2
200008fe:	58d3      	ldr	r3, [r2, r3]
20000900:	2b00      	cmp	r3, #0
20000902:	d01c      	beq.n	2000093e <do_gravity+0x9a>
20000904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20000906:	1c5a      	adds	r2, r3, #1
20000908:	4b87      	ldr	r3, [pc, #540]	; (20000b28 <do_gravity+0x284>)
2000090a:	0091      	lsls	r1, r2, #2
2000090c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
2000090e:	188a      	adds	r2, r1, r2
20000910:	0092      	lsls	r2, r2, #2
20000912:	58d1      	ldr	r1, [r2, r3]
20000914:	4b84      	ldr	r3, [pc, #528]	; (20000b28 <do_gravity+0x284>)
20000916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20000918:	0090      	lsls	r0, r2, #2
2000091a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
2000091c:	1882      	adds	r2, r0, r2
2000091e:	0092      	lsls	r2, r2, #2
20000920:	50d1      	str	r1, [r2, r3]
20000922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20000924:	1c5a      	adds	r2, r3, #1
20000926:	2300      	movs	r3, #0
20000928:	637b      	str	r3, [r7, #52]	; 0x34
2000092a:	4b7f      	ldr	r3, [pc, #508]	; (20000b28 <do_gravity+0x284>)
2000092c:	0091      	lsls	r1, r2, #2
2000092e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20000930:	188a      	adds	r2, r1, r2
20000932:	0092      	lsls	r2, r2, #2
20000934:	6b79      	ldr	r1, [r7, #52]	; 0x34
20000936:	50d1      	str	r1, [r2, r3]
20000938:	4b7b      	ldr	r3, [pc, #492]	; (20000b28 <do_gravity+0x284>)
2000093a:	2201      	movs	r2, #1
2000093c:	641a      	str	r2, [r3, #64]	; 0x40
2000093e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000940:	3301      	adds	r3, #1
20000942:	62fb      	str	r3, [r7, #44]	; 0x2c
20000944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000946:	2b03      	cmp	r3, #3
20000948:	ddc9      	ble.n	200008de <do_gravity+0x3a>
2000094a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000094c:	3301      	adds	r3, #1
2000094e:	633b      	str	r3, [r7, #48]	; 0x30
20000950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20000952:	2b02      	cmp	r3, #2
20000954:	ddc0      	ble.n	200008d8 <do_gravity+0x34>
20000956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000958:	2b00      	cmp	r3, #0
2000095a:	d0b8      	beq.n	200008ce <do_gravity+0x2a>
			break;
2000095c:	e0e0      	b.n	20000b20 <do_gravity+0x27c>
			GRAVITATE_DIRECTION(x, y, 3, > 0, -1, 0, < 4, 1, -1, 0);
2000095e:	2300      	movs	r3, #0
20000960:	62bb      	str	r3, [r7, #40]	; 0x28
20000962:	e043      	b.n	200009ec <do_gravity+0x148>
20000964:	2301      	movs	r3, #1
20000966:	62bb      	str	r3, [r7, #40]	; 0x28
20000968:	2303      	movs	r3, #3
2000096a:	627b      	str	r3, [r7, #36]	; 0x24
2000096c:	e03b      	b.n	200009e6 <do_gravity+0x142>
2000096e:	2300      	movs	r3, #0
20000970:	623b      	str	r3, [r7, #32]
20000972:	e032      	b.n	200009da <do_gravity+0x136>
20000974:	4b6c      	ldr	r3, [pc, #432]	; (20000b28 <do_gravity+0x284>)
20000976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000978:	0091      	lsls	r1, r2, #2
2000097a:	6a3a      	ldr	r2, [r7, #32]
2000097c:	188a      	adds	r2, r1, r2
2000097e:	0092      	lsls	r2, r2, #2
20000980:	58d3      	ldr	r3, [r2, r3]
20000982:	2b00      	cmp	r3, #0
20000984:	d126      	bne.n	200009d4 <do_gravity+0x130>
20000986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000988:	1e5a      	subs	r2, r3, #1
2000098a:	4b67      	ldr	r3, [pc, #412]	; (20000b28 <do_gravity+0x284>)
2000098c:	0091      	lsls	r1, r2, #2
2000098e:	6a3a      	ldr	r2, [r7, #32]
20000990:	188a      	adds	r2, r1, r2
20000992:	0092      	lsls	r2, r2, #2
20000994:	58d3      	ldr	r3, [r2, r3]
20000996:	2b00      	cmp	r3, #0
20000998:	d01c      	beq.n	200009d4 <do_gravity+0x130>
2000099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000099c:	1e5a      	subs	r2, r3, #1
2000099e:	4b62      	ldr	r3, [pc, #392]	; (20000b28 <do_gravity+0x284>)
200009a0:	0091      	lsls	r1, r2, #2
200009a2:	6a3a      	ldr	r2, [r7, #32]
200009a4:	188a      	adds	r2, r1, r2
200009a6:	0092      	lsls	r2, r2, #2
200009a8:	58d1      	ldr	r1, [r2, r3]
200009aa:	4b5f      	ldr	r3, [pc, #380]	; (20000b28 <do_gravity+0x284>)
200009ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200009ae:	0090      	lsls	r0, r2, #2
200009b0:	6a3a      	ldr	r2, [r7, #32]
200009b2:	1882      	adds	r2, r0, r2
200009b4:	0092      	lsls	r2, r2, #2
200009b6:	50d1      	str	r1, [r2, r3]
200009b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200009ba:	1e5a      	subs	r2, r3, #1
200009bc:	2300      	movs	r3, #0
200009be:	62bb      	str	r3, [r7, #40]	; 0x28
200009c0:	4b59      	ldr	r3, [pc, #356]	; (20000b28 <do_gravity+0x284>)
200009c2:	0091      	lsls	r1, r2, #2
200009c4:	6a3a      	ldr	r2, [r7, #32]
200009c6:	188a      	adds	r2, r1, r2
200009c8:	0092      	lsls	r2, r2, #2
200009ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
200009cc:	50d1      	str	r1, [r2, r3]
200009ce:	4b56      	ldr	r3, [pc, #344]	; (20000b28 <do_gravity+0x284>)
200009d0:	2201      	movs	r2, #1
200009d2:	641a      	str	r2, [r3, #64]	; 0x40
200009d4:	6a3b      	ldr	r3, [r7, #32]
200009d6:	3301      	adds	r3, #1
200009d8:	623b      	str	r3, [r7, #32]
200009da:	6a3b      	ldr	r3, [r7, #32]
200009dc:	2b03      	cmp	r3, #3
200009de:	ddc9      	ble.n	20000974 <do_gravity+0xd0>
200009e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200009e2:	3b01      	subs	r3, #1
200009e4:	627b      	str	r3, [r7, #36]	; 0x24
200009e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200009e8:	2b00      	cmp	r3, #0
200009ea:	dcc0      	bgt.n	2000096e <do_gravity+0xca>
200009ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
200009ee:	2b00      	cmp	r3, #0
200009f0:	d0b8      	beq.n	20000964 <do_gravity+0xc0>
			break;
200009f2:	e095      	b.n	20000b20 <do_gravity+0x27c>
			GRAVITATE_DIRECTION(y, x, 3, > 0, -1, 0, < 4, 1, 0, -1);
200009f4:	2300      	movs	r3, #0
200009f6:	61fb      	str	r3, [r7, #28]
200009f8:	e043      	b.n	20000a82 <do_gravity+0x1de>
200009fa:	2301      	movs	r3, #1
200009fc:	61fb      	str	r3, [r7, #28]
200009fe:	2303      	movs	r3, #3
20000a00:	61bb      	str	r3, [r7, #24]
20000a02:	e03b      	b.n	20000a7c <do_gravity+0x1d8>
20000a04:	2300      	movs	r3, #0
20000a06:	617b      	str	r3, [r7, #20]
20000a08:	e032      	b.n	20000a70 <do_gravity+0x1cc>
20000a0a:	4b47      	ldr	r3, [pc, #284]	; (20000b28 <do_gravity+0x284>)
20000a0c:	697a      	ldr	r2, [r7, #20]
20000a0e:	0091      	lsls	r1, r2, #2
20000a10:	69ba      	ldr	r2, [r7, #24]
20000a12:	188a      	adds	r2, r1, r2
20000a14:	0092      	lsls	r2, r2, #2
20000a16:	58d3      	ldr	r3, [r2, r3]
20000a18:	2b00      	cmp	r3, #0
20000a1a:	d126      	bne.n	20000a6a <do_gravity+0x1c6>
20000a1c:	69bb      	ldr	r3, [r7, #24]
20000a1e:	1e5a      	subs	r2, r3, #1
20000a20:	4b41      	ldr	r3, [pc, #260]	; (20000b28 <do_gravity+0x284>)
20000a22:	6979      	ldr	r1, [r7, #20]
20000a24:	0089      	lsls	r1, r1, #2
20000a26:	188a      	adds	r2, r1, r2
20000a28:	0092      	lsls	r2, r2, #2
20000a2a:	58d3      	ldr	r3, [r2, r3]
20000a2c:	2b00      	cmp	r3, #0
20000a2e:	d01c      	beq.n	20000a6a <do_gravity+0x1c6>
20000a30:	69bb      	ldr	r3, [r7, #24]
20000a32:	1e5a      	subs	r2, r3, #1
20000a34:	4b3c      	ldr	r3, [pc, #240]	; (20000b28 <do_gravity+0x284>)
20000a36:	6979      	ldr	r1, [r7, #20]
20000a38:	0089      	lsls	r1, r1, #2
20000a3a:	188a      	adds	r2, r1, r2
20000a3c:	0092      	lsls	r2, r2, #2
20000a3e:	58d1      	ldr	r1, [r2, r3]
20000a40:	4b39      	ldr	r3, [pc, #228]	; (20000b28 <do_gravity+0x284>)
20000a42:	697a      	ldr	r2, [r7, #20]
20000a44:	0090      	lsls	r0, r2, #2
20000a46:	69ba      	ldr	r2, [r7, #24]
20000a48:	1882      	adds	r2, r0, r2
20000a4a:	0092      	lsls	r2, r2, #2
20000a4c:	50d1      	str	r1, [r2, r3]
20000a4e:	69bb      	ldr	r3, [r7, #24]
20000a50:	1e5a      	subs	r2, r3, #1
20000a52:	2300      	movs	r3, #0
20000a54:	61fb      	str	r3, [r7, #28]
20000a56:	4b34      	ldr	r3, [pc, #208]	; (20000b28 <do_gravity+0x284>)
20000a58:	6979      	ldr	r1, [r7, #20]
20000a5a:	0089      	lsls	r1, r1, #2
20000a5c:	188a      	adds	r2, r1, r2
20000a5e:	0092      	lsls	r2, r2, #2
20000a60:	69f9      	ldr	r1, [r7, #28]
20000a62:	50d1      	str	r1, [r2, r3]
20000a64:	4b30      	ldr	r3, [pc, #192]	; (20000b28 <do_gravity+0x284>)
20000a66:	2201      	movs	r2, #1
20000a68:	641a      	str	r2, [r3, #64]	; 0x40
20000a6a:	697b      	ldr	r3, [r7, #20]
20000a6c:	3301      	adds	r3, #1
20000a6e:	617b      	str	r3, [r7, #20]
20000a70:	697b      	ldr	r3, [r7, #20]
20000a72:	2b03      	cmp	r3, #3
20000a74:	ddc9      	ble.n	20000a0a <do_gravity+0x166>
20000a76:	69bb      	ldr	r3, [r7, #24]
20000a78:	3b01      	subs	r3, #1
20000a7a:	61bb      	str	r3, [r7, #24]
20000a7c:	69bb      	ldr	r3, [r7, #24]
20000a7e:	2b00      	cmp	r3, #0
20000a80:	dcc0      	bgt.n	20000a04 <do_gravity+0x160>
20000a82:	69fb      	ldr	r3, [r7, #28]
20000a84:	2b00      	cmp	r3, #0
20000a86:	d0b8      	beq.n	200009fa <do_gravity+0x156>
			break;
20000a88:	e04a      	b.n	20000b20 <do_gravity+0x27c>
			GRAVITATE_DIRECTION(y, x, 0, < 3, 1, 0, < 4, 1, 0, 1);
20000a8a:	2300      	movs	r3, #0
20000a8c:	613b      	str	r3, [r7, #16]
20000a8e:	e043      	b.n	20000b18 <do_gravity+0x274>
20000a90:	2301      	movs	r3, #1
20000a92:	613b      	str	r3, [r7, #16]
20000a94:	2300      	movs	r3, #0
20000a96:	60fb      	str	r3, [r7, #12]
20000a98:	e03b      	b.n	20000b12 <do_gravity+0x26e>
20000a9a:	2300      	movs	r3, #0
20000a9c:	60bb      	str	r3, [r7, #8]
20000a9e:	e032      	b.n	20000b06 <do_gravity+0x262>
20000aa0:	4b21      	ldr	r3, [pc, #132]	; (20000b28 <do_gravity+0x284>)
20000aa2:	68ba      	ldr	r2, [r7, #8]
20000aa4:	0091      	lsls	r1, r2, #2
20000aa6:	68fa      	ldr	r2, [r7, #12]
20000aa8:	188a      	adds	r2, r1, r2
20000aaa:	0092      	lsls	r2, r2, #2
20000aac:	58d3      	ldr	r3, [r2, r3]
20000aae:	2b00      	cmp	r3, #0
20000ab0:	d126      	bne.n	20000b00 <do_gravity+0x25c>
20000ab2:	68fb      	ldr	r3, [r7, #12]
20000ab4:	1c5a      	adds	r2, r3, #1
20000ab6:	4b1c      	ldr	r3, [pc, #112]	; (20000b28 <do_gravity+0x284>)
20000ab8:	68b9      	ldr	r1, [r7, #8]
20000aba:	0089      	lsls	r1, r1, #2
20000abc:	188a      	adds	r2, r1, r2
20000abe:	0092      	lsls	r2, r2, #2
20000ac0:	58d3      	ldr	r3, [r2, r3]
20000ac2:	2b00      	cmp	r3, #0
20000ac4:	d01c      	beq.n	20000b00 <do_gravity+0x25c>
20000ac6:	68fb      	ldr	r3, [r7, #12]
20000ac8:	1c5a      	adds	r2, r3, #1
20000aca:	4b17      	ldr	r3, [pc, #92]	; (20000b28 <do_gravity+0x284>)
20000acc:	68b9      	ldr	r1, [r7, #8]
20000ace:	0089      	lsls	r1, r1, #2
20000ad0:	188a      	adds	r2, r1, r2
20000ad2:	0092      	lsls	r2, r2, #2
20000ad4:	58d1      	ldr	r1, [r2, r3]
20000ad6:	4b14      	ldr	r3, [pc, #80]	; (20000b28 <do_gravity+0x284>)
20000ad8:	68ba      	ldr	r2, [r7, #8]
20000ada:	0090      	lsls	r0, r2, #2
20000adc:	68fa      	ldr	r2, [r7, #12]
20000ade:	1882      	adds	r2, r0, r2
20000ae0:	0092      	lsls	r2, r2, #2
20000ae2:	50d1      	str	r1, [r2, r3]
20000ae4:	68fb      	ldr	r3, [r7, #12]
20000ae6:	1c5a      	adds	r2, r3, #1
20000ae8:	2300      	movs	r3, #0
20000aea:	613b      	str	r3, [r7, #16]
20000aec:	4b0e      	ldr	r3, [pc, #56]	; (20000b28 <do_gravity+0x284>)
20000aee:	68b9      	ldr	r1, [r7, #8]
20000af0:	0089      	lsls	r1, r1, #2
20000af2:	188a      	adds	r2, r1, r2
20000af4:	0092      	lsls	r2, r2, #2
20000af6:	6939      	ldr	r1, [r7, #16]
20000af8:	50d1      	str	r1, [r2, r3]
20000afa:	4b0b      	ldr	r3, [pc, #44]	; (20000b28 <do_gravity+0x284>)
20000afc:	2201      	movs	r2, #1
20000afe:	641a      	str	r2, [r3, #64]	; 0x40
20000b00:	68bb      	ldr	r3, [r7, #8]
20000b02:	3301      	adds	r3, #1
20000b04:	60bb      	str	r3, [r7, #8]
20000b06:	68bb      	ldr	r3, [r7, #8]
20000b08:	2b03      	cmp	r3, #3
20000b0a:	ddc9      	ble.n	20000aa0 <do_gravity+0x1fc>
20000b0c:	68fb      	ldr	r3, [r7, #12]
20000b0e:	3301      	adds	r3, #1
20000b10:	60fb      	str	r3, [r7, #12]
20000b12:	68fb      	ldr	r3, [r7, #12]
20000b14:	2b02      	cmp	r3, #2
20000b16:	ddc0      	ble.n	20000a9a <do_gravity+0x1f6>
20000b18:	693b      	ldr	r3, [r7, #16]
20000b1a:	2b00      	cmp	r3, #0
20000b1c:	d0b8      	beq.n	20000a90 <do_gravity+0x1ec>
			break;
20000b1e:	46c0      	nop			; (mov r8, r8)
}
20000b20:	46c0      	nop			; (mov r8, r8)
20000b22:	46bd      	mov	sp, r7
20000b24:	b00e      	add	sp, #56	; 0x38
20000b26:	bd80      	pop	{r7, pc}
20000b28:	20001b30 	andcs	r1, r0, r0, lsr fp

20000b2c <do_merge>:

void do_merge(int d)
{
20000b2c:	b580      	push	{r7, lr}
20000b2e:	b08a      	sub	sp, #40	; 0x28
20000b30:	af00      	add	r7, sp, #0
20000b32:	6078      	str	r0, [r7, #4]
                }                                                           \
            }                                                               \
        }                                                                   \
    } while (0)

	game.score_last_move = 0;
20000b34:	4bae      	ldr	r3, [pc, #696]	; (20000df0 <do_merge+0x2c4>)
20000b36:	2200      	movs	r2, #0
20000b38:	649a      	str	r2, [r3, #72]	; 0x48

	switch (d) {
20000b3a:	687b      	ldr	r3, [r7, #4]
20000b3c:	2b02      	cmp	r3, #2
20000b3e:	d100      	bne.n	20000b42 <do_merge+0x16>
20000b40:	e0e3      	b.n	20000d0a <do_merge+0x1de>
20000b42:	dc03      	bgt.n	20000b4c <do_merge+0x20>
20000b44:	2b01      	cmp	r3, #1
20000b46:	d100      	bne.n	20000b4a <do_merge+0x1e>
20000b48:	e14c      	b.n	20000de4 <do_merge+0x2b8>
			MERGE_DIRECTION(y, x, 0, < 3, 1, 0, < 4, 1, 0, 1);
			break;
	}

#undef MERGE_DIRECTION
}
20000b4a:	e1bc      	b.n	20000ec6 <do_merge+0x39a>
	switch (d) {
20000b4c:	2b03      	cmp	r3, #3
20000b4e:	d06f      	beq.n	20000c30 <do_merge+0x104>
20000b50:	2b04      	cmp	r3, #4
20000b52:	d000      	beq.n	20000b56 <do_merge+0x2a>
}
20000b54:	e1b7      	b.n	20000ec6 <do_merge+0x39a>
			MERGE_DIRECTION(x, y, 0, < 3, 1, 0, < 4, 1, 1, 0);
20000b56:	2300      	movs	r3, #0
20000b58:	627b      	str	r3, [r7, #36]	; 0x24
20000b5a:	e065      	b.n	20000c28 <do_merge+0xfc>
20000b5c:	2300      	movs	r3, #0
20000b5e:	623b      	str	r3, [r7, #32]
20000b60:	e05c      	b.n	20000c1c <do_merge+0xf0>
20000b62:	4ba3      	ldr	r3, [pc, #652]	; (20000df0 <do_merge+0x2c4>)
20000b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000b66:	0091      	lsls	r1, r2, #2
20000b68:	6a3a      	ldr	r2, [r7, #32]
20000b6a:	188a      	adds	r2, r1, r2
20000b6c:	0092      	lsls	r2, r2, #2
20000b6e:	58d3      	ldr	r3, [r2, r3]
20000b70:	2b00      	cmp	r3, #0
20000b72:	d050      	beq.n	20000c16 <do_merge+0xea>
20000b74:	4b9e      	ldr	r3, [pc, #632]	; (20000df0 <do_merge+0x2c4>)
20000b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000b78:	0091      	lsls	r1, r2, #2
20000b7a:	6a3a      	ldr	r2, [r7, #32]
20000b7c:	188a      	adds	r2, r1, r2
20000b7e:	0092      	lsls	r2, r2, #2
20000b80:	58d2      	ldr	r2, [r2, r3]
20000b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000b84:	1c59      	adds	r1, r3, #1
20000b86:	4b9a      	ldr	r3, [pc, #616]	; (20000df0 <do_merge+0x2c4>)
20000b88:	0088      	lsls	r0, r1, #2
20000b8a:	6a39      	ldr	r1, [r7, #32]
20000b8c:	1841      	adds	r1, r0, r1
20000b8e:	0089      	lsls	r1, r1, #2
20000b90:	58cb      	ldr	r3, [r1, r3]
20000b92:	429a      	cmp	r2, r3
20000b94:	d13f      	bne.n	20000c16 <do_merge+0xea>
20000b96:	4b96      	ldr	r3, [pc, #600]	; (20000df0 <do_merge+0x2c4>)
20000b98:	2201      	movs	r2, #1
20000b9a:	641a      	str	r2, [r3, #64]	; 0x40
20000b9c:	4b94      	ldr	r3, [pc, #592]	; (20000df0 <do_merge+0x2c4>)
20000b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20000ba0:	4a93      	ldr	r2, [pc, #588]	; (20000df0 <do_merge+0x2c4>)
20000ba2:	6a79      	ldr	r1, [r7, #36]	; 0x24
20000ba4:	0088      	lsls	r0, r1, #2
20000ba6:	6a39      	ldr	r1, [r7, #32]
20000ba8:	1841      	adds	r1, r0, r1
20000baa:	0089      	lsls	r1, r1, #2
20000bac:	588a      	ldr	r2, [r1, r2]
20000bae:	18d1      	adds	r1, r2, r3
20000bb0:	4b8f      	ldr	r3, [pc, #572]	; (20000df0 <do_merge+0x2c4>)
20000bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000bb4:	0090      	lsls	r0, r2, #2
20000bb6:	6a3a      	ldr	r2, [r7, #32]
20000bb8:	1882      	adds	r2, r0, r2
20000bba:	0092      	lsls	r2, r2, #2
20000bbc:	50d1      	str	r1, [r2, r3]
20000bbe:	4b8c      	ldr	r3, [pc, #560]	; (20000df0 <do_merge+0x2c4>)
20000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20000bc2:	1e5a      	subs	r2, r3, #1
20000bc4:	4b8a      	ldr	r3, [pc, #552]	; (20000df0 <do_merge+0x2c4>)
20000bc6:	64da      	str	r2, [r3, #76]	; 0x4c
20000bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000bca:	1c5a      	adds	r2, r3, #1
20000bcc:	4b88      	ldr	r3, [pc, #544]	; (20000df0 <do_merge+0x2c4>)
20000bce:	0091      	lsls	r1, r2, #2
20000bd0:	6a3a      	ldr	r2, [r7, #32]
20000bd2:	188a      	adds	r2, r1, r2
20000bd4:	0092      	lsls	r2, r2, #2
20000bd6:	2100      	movs	r1, #0
20000bd8:	50d1      	str	r1, [r2, r3]
20000bda:	4b85      	ldr	r3, [pc, #532]	; (20000df0 <do_merge+0x2c4>)
20000bdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
20000bde:	4b84      	ldr	r3, [pc, #528]	; (20000df0 <do_merge+0x2c4>)
20000be0:	6a79      	ldr	r1, [r7, #36]	; 0x24
20000be2:	0088      	lsls	r0, r1, #2
20000be4:	6a39      	ldr	r1, [r7, #32]
20000be6:	1841      	adds	r1, r0, r1
20000be8:	0089      	lsls	r1, r1, #2
20000bea:	58c9      	ldr	r1, [r1, r3]
20000bec:	4b81      	ldr	r3, [pc, #516]	; (20000df4 <do_merge+0x2c8>)
20000bee:	0089      	lsls	r1, r1, #2
20000bf0:	58cb      	ldr	r3, [r1, r3]
20000bf2:	18d2      	adds	r2, r2, r3
20000bf4:	4b7e      	ldr	r3, [pc, #504]	; (20000df0 <do_merge+0x2c4>)
20000bf6:	649a      	str	r2, [r3, #72]	; 0x48
20000bf8:	4b7d      	ldr	r3, [pc, #500]	; (20000df0 <do_merge+0x2c4>)
20000bfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20000bfc:	4b7c      	ldr	r3, [pc, #496]	; (20000df0 <do_merge+0x2c4>)
20000bfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
20000c00:	0088      	lsls	r0, r1, #2
20000c02:	6a39      	ldr	r1, [r7, #32]
20000c04:	1841      	adds	r1, r0, r1
20000c06:	0089      	lsls	r1, r1, #2
20000c08:	58c9      	ldr	r1, [r1, r3]
20000c0a:	4b7a      	ldr	r3, [pc, #488]	; (20000df4 <do_merge+0x2c8>)
20000c0c:	0089      	lsls	r1, r1, #2
20000c0e:	58cb      	ldr	r3, [r1, r3]
20000c10:	18d2      	adds	r2, r2, r3
20000c12:	4b77      	ldr	r3, [pc, #476]	; (20000df0 <do_merge+0x2c4>)
20000c14:	645a      	str	r2, [r3, #68]	; 0x44
20000c16:	6a3b      	ldr	r3, [r7, #32]
20000c18:	3301      	adds	r3, #1
20000c1a:	623b      	str	r3, [r7, #32]
20000c1c:	6a3b      	ldr	r3, [r7, #32]
20000c1e:	2b03      	cmp	r3, #3
20000c20:	dd9f      	ble.n	20000b62 <do_merge+0x36>
20000c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000c24:	3301      	adds	r3, #1
20000c26:	627b      	str	r3, [r7, #36]	; 0x24
20000c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000c2a:	2b02      	cmp	r3, #2
20000c2c:	dd96      	ble.n	20000b5c <do_merge+0x30>
			break;
20000c2e:	e14a      	b.n	20000ec6 <do_merge+0x39a>
			MERGE_DIRECTION(x, y, 3, > 0, -1, 0, < 4, 1, -1, 0);
20000c30:	2303      	movs	r3, #3
20000c32:	61fb      	str	r3, [r7, #28]
20000c34:	e065      	b.n	20000d02 <do_merge+0x1d6>
20000c36:	2300      	movs	r3, #0
20000c38:	61bb      	str	r3, [r7, #24]
20000c3a:	e05c      	b.n	20000cf6 <do_merge+0x1ca>
20000c3c:	4b6c      	ldr	r3, [pc, #432]	; (20000df0 <do_merge+0x2c4>)
20000c3e:	69fa      	ldr	r2, [r7, #28]
20000c40:	0091      	lsls	r1, r2, #2
20000c42:	69ba      	ldr	r2, [r7, #24]
20000c44:	188a      	adds	r2, r1, r2
20000c46:	0092      	lsls	r2, r2, #2
20000c48:	58d3      	ldr	r3, [r2, r3]
20000c4a:	2b00      	cmp	r3, #0
20000c4c:	d050      	beq.n	20000cf0 <do_merge+0x1c4>
20000c4e:	4b68      	ldr	r3, [pc, #416]	; (20000df0 <do_merge+0x2c4>)
20000c50:	69fa      	ldr	r2, [r7, #28]
20000c52:	0091      	lsls	r1, r2, #2
20000c54:	69ba      	ldr	r2, [r7, #24]
20000c56:	188a      	adds	r2, r1, r2
20000c58:	0092      	lsls	r2, r2, #2
20000c5a:	58d2      	ldr	r2, [r2, r3]
20000c5c:	69fb      	ldr	r3, [r7, #28]
20000c5e:	1e59      	subs	r1, r3, #1
20000c60:	4b63      	ldr	r3, [pc, #396]	; (20000df0 <do_merge+0x2c4>)
20000c62:	0088      	lsls	r0, r1, #2
20000c64:	69b9      	ldr	r1, [r7, #24]
20000c66:	1841      	adds	r1, r0, r1
20000c68:	0089      	lsls	r1, r1, #2
20000c6a:	58cb      	ldr	r3, [r1, r3]
20000c6c:	429a      	cmp	r2, r3
20000c6e:	d13f      	bne.n	20000cf0 <do_merge+0x1c4>
20000c70:	4b5f      	ldr	r3, [pc, #380]	; (20000df0 <do_merge+0x2c4>)
20000c72:	2201      	movs	r2, #1
20000c74:	641a      	str	r2, [r3, #64]	; 0x40
20000c76:	4b5e      	ldr	r3, [pc, #376]	; (20000df0 <do_merge+0x2c4>)
20000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20000c7a:	4a5d      	ldr	r2, [pc, #372]	; (20000df0 <do_merge+0x2c4>)
20000c7c:	69f9      	ldr	r1, [r7, #28]
20000c7e:	0088      	lsls	r0, r1, #2
20000c80:	69b9      	ldr	r1, [r7, #24]
20000c82:	1841      	adds	r1, r0, r1
20000c84:	0089      	lsls	r1, r1, #2
20000c86:	588a      	ldr	r2, [r1, r2]
20000c88:	18d1      	adds	r1, r2, r3
20000c8a:	4b59      	ldr	r3, [pc, #356]	; (20000df0 <do_merge+0x2c4>)
20000c8c:	69fa      	ldr	r2, [r7, #28]
20000c8e:	0090      	lsls	r0, r2, #2
20000c90:	69ba      	ldr	r2, [r7, #24]
20000c92:	1882      	adds	r2, r0, r2
20000c94:	0092      	lsls	r2, r2, #2
20000c96:	50d1      	str	r1, [r2, r3]
20000c98:	4b55      	ldr	r3, [pc, #340]	; (20000df0 <do_merge+0x2c4>)
20000c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20000c9c:	1e5a      	subs	r2, r3, #1
20000c9e:	4b54      	ldr	r3, [pc, #336]	; (20000df0 <do_merge+0x2c4>)
20000ca0:	64da      	str	r2, [r3, #76]	; 0x4c
20000ca2:	69fb      	ldr	r3, [r7, #28]
20000ca4:	1e5a      	subs	r2, r3, #1
20000ca6:	4b52      	ldr	r3, [pc, #328]	; (20000df0 <do_merge+0x2c4>)
20000ca8:	0091      	lsls	r1, r2, #2
20000caa:	69ba      	ldr	r2, [r7, #24]
20000cac:	188a      	adds	r2, r1, r2
20000cae:	0092      	lsls	r2, r2, #2
20000cb0:	2100      	movs	r1, #0
20000cb2:	50d1      	str	r1, [r2, r3]
20000cb4:	4b4e      	ldr	r3, [pc, #312]	; (20000df0 <do_merge+0x2c4>)
20000cb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
20000cb8:	4b4d      	ldr	r3, [pc, #308]	; (20000df0 <do_merge+0x2c4>)
20000cba:	69f9      	ldr	r1, [r7, #28]
20000cbc:	0088      	lsls	r0, r1, #2
20000cbe:	69b9      	ldr	r1, [r7, #24]
20000cc0:	1841      	adds	r1, r0, r1
20000cc2:	0089      	lsls	r1, r1, #2
20000cc4:	58c9      	ldr	r1, [r1, r3]
20000cc6:	4b4b      	ldr	r3, [pc, #300]	; (20000df4 <do_merge+0x2c8>)
20000cc8:	0089      	lsls	r1, r1, #2
20000cca:	58cb      	ldr	r3, [r1, r3]
20000ccc:	18d2      	adds	r2, r2, r3
20000cce:	4b48      	ldr	r3, [pc, #288]	; (20000df0 <do_merge+0x2c4>)
20000cd0:	649a      	str	r2, [r3, #72]	; 0x48
20000cd2:	4b47      	ldr	r3, [pc, #284]	; (20000df0 <do_merge+0x2c4>)
20000cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20000cd6:	4b46      	ldr	r3, [pc, #280]	; (20000df0 <do_merge+0x2c4>)
20000cd8:	69f9      	ldr	r1, [r7, #28]
20000cda:	0088      	lsls	r0, r1, #2
20000cdc:	69b9      	ldr	r1, [r7, #24]
20000cde:	1841      	adds	r1, r0, r1
20000ce0:	0089      	lsls	r1, r1, #2
20000ce2:	58c9      	ldr	r1, [r1, r3]
20000ce4:	4b43      	ldr	r3, [pc, #268]	; (20000df4 <do_merge+0x2c8>)
20000ce6:	0089      	lsls	r1, r1, #2
20000ce8:	58cb      	ldr	r3, [r1, r3]
20000cea:	18d2      	adds	r2, r2, r3
20000cec:	4b40      	ldr	r3, [pc, #256]	; (20000df0 <do_merge+0x2c4>)
20000cee:	645a      	str	r2, [r3, #68]	; 0x44
20000cf0:	69bb      	ldr	r3, [r7, #24]
20000cf2:	3301      	adds	r3, #1
20000cf4:	61bb      	str	r3, [r7, #24]
20000cf6:	69bb      	ldr	r3, [r7, #24]
20000cf8:	2b03      	cmp	r3, #3
20000cfa:	dd9f      	ble.n	20000c3c <do_merge+0x110>
20000cfc:	69fb      	ldr	r3, [r7, #28]
20000cfe:	3b01      	subs	r3, #1
20000d00:	61fb      	str	r3, [r7, #28]
20000d02:	69fb      	ldr	r3, [r7, #28]
20000d04:	2b00      	cmp	r3, #0
20000d06:	dc96      	bgt.n	20000c36 <do_merge+0x10a>
			break;
20000d08:	e0dd      	b.n	20000ec6 <do_merge+0x39a>
			MERGE_DIRECTION(y, x, 3, > 0, -1, 0, < 4, 1, 0, -1);
20000d0a:	2303      	movs	r3, #3
20000d0c:	617b      	str	r3, [r7, #20]
20000d0e:	e065      	b.n	20000ddc <do_merge+0x2b0>
20000d10:	2300      	movs	r3, #0
20000d12:	613b      	str	r3, [r7, #16]
20000d14:	e05c      	b.n	20000dd0 <do_merge+0x2a4>
20000d16:	4b36      	ldr	r3, [pc, #216]	; (20000df0 <do_merge+0x2c4>)
20000d18:	693a      	ldr	r2, [r7, #16]
20000d1a:	0091      	lsls	r1, r2, #2
20000d1c:	697a      	ldr	r2, [r7, #20]
20000d1e:	188a      	adds	r2, r1, r2
20000d20:	0092      	lsls	r2, r2, #2
20000d22:	58d3      	ldr	r3, [r2, r3]
20000d24:	2b00      	cmp	r3, #0
20000d26:	d050      	beq.n	20000dca <do_merge+0x29e>
20000d28:	4b31      	ldr	r3, [pc, #196]	; (20000df0 <do_merge+0x2c4>)
20000d2a:	693a      	ldr	r2, [r7, #16]
20000d2c:	0091      	lsls	r1, r2, #2
20000d2e:	697a      	ldr	r2, [r7, #20]
20000d30:	188a      	adds	r2, r1, r2
20000d32:	0092      	lsls	r2, r2, #2
20000d34:	58d2      	ldr	r2, [r2, r3]
20000d36:	697b      	ldr	r3, [r7, #20]
20000d38:	1e59      	subs	r1, r3, #1
20000d3a:	4b2d      	ldr	r3, [pc, #180]	; (20000df0 <do_merge+0x2c4>)
20000d3c:	6938      	ldr	r0, [r7, #16]
20000d3e:	0080      	lsls	r0, r0, #2
20000d40:	1841      	adds	r1, r0, r1
20000d42:	0089      	lsls	r1, r1, #2
20000d44:	58cb      	ldr	r3, [r1, r3]
20000d46:	429a      	cmp	r2, r3
20000d48:	d13f      	bne.n	20000dca <do_merge+0x29e>
20000d4a:	4b29      	ldr	r3, [pc, #164]	; (20000df0 <do_merge+0x2c4>)
20000d4c:	2201      	movs	r2, #1
20000d4e:	641a      	str	r2, [r3, #64]	; 0x40
20000d50:	4b27      	ldr	r3, [pc, #156]	; (20000df0 <do_merge+0x2c4>)
20000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20000d54:	4a26      	ldr	r2, [pc, #152]	; (20000df0 <do_merge+0x2c4>)
20000d56:	6939      	ldr	r1, [r7, #16]
20000d58:	0088      	lsls	r0, r1, #2
20000d5a:	6979      	ldr	r1, [r7, #20]
20000d5c:	1841      	adds	r1, r0, r1
20000d5e:	0089      	lsls	r1, r1, #2
20000d60:	588a      	ldr	r2, [r1, r2]
20000d62:	18d1      	adds	r1, r2, r3
20000d64:	4b22      	ldr	r3, [pc, #136]	; (20000df0 <do_merge+0x2c4>)
20000d66:	693a      	ldr	r2, [r7, #16]
20000d68:	0090      	lsls	r0, r2, #2
20000d6a:	697a      	ldr	r2, [r7, #20]
20000d6c:	1882      	adds	r2, r0, r2
20000d6e:	0092      	lsls	r2, r2, #2
20000d70:	50d1      	str	r1, [r2, r3]
20000d72:	4b1f      	ldr	r3, [pc, #124]	; (20000df0 <do_merge+0x2c4>)
20000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20000d76:	1e5a      	subs	r2, r3, #1
20000d78:	4b1d      	ldr	r3, [pc, #116]	; (20000df0 <do_merge+0x2c4>)
20000d7a:	64da      	str	r2, [r3, #76]	; 0x4c
20000d7c:	697b      	ldr	r3, [r7, #20]
20000d7e:	1e5a      	subs	r2, r3, #1
20000d80:	4b1b      	ldr	r3, [pc, #108]	; (20000df0 <do_merge+0x2c4>)
20000d82:	6939      	ldr	r1, [r7, #16]
20000d84:	0089      	lsls	r1, r1, #2
20000d86:	188a      	adds	r2, r1, r2
20000d88:	0092      	lsls	r2, r2, #2
20000d8a:	2100      	movs	r1, #0
20000d8c:	50d1      	str	r1, [r2, r3]
20000d8e:	4b18      	ldr	r3, [pc, #96]	; (20000df0 <do_merge+0x2c4>)
20000d90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
20000d92:	4b17      	ldr	r3, [pc, #92]	; (20000df0 <do_merge+0x2c4>)
20000d94:	6939      	ldr	r1, [r7, #16]
20000d96:	0088      	lsls	r0, r1, #2
20000d98:	6979      	ldr	r1, [r7, #20]
20000d9a:	1841      	adds	r1, r0, r1
20000d9c:	0089      	lsls	r1, r1, #2
20000d9e:	58c9      	ldr	r1, [r1, r3]
20000da0:	4b14      	ldr	r3, [pc, #80]	; (20000df4 <do_merge+0x2c8>)
20000da2:	0089      	lsls	r1, r1, #2
20000da4:	58cb      	ldr	r3, [r1, r3]
20000da6:	18d2      	adds	r2, r2, r3
20000da8:	4b11      	ldr	r3, [pc, #68]	; (20000df0 <do_merge+0x2c4>)
20000daa:	649a      	str	r2, [r3, #72]	; 0x48
20000dac:	4b10      	ldr	r3, [pc, #64]	; (20000df0 <do_merge+0x2c4>)
20000dae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20000db0:	4b0f      	ldr	r3, [pc, #60]	; (20000df0 <do_merge+0x2c4>)
20000db2:	6939      	ldr	r1, [r7, #16]
20000db4:	0088      	lsls	r0, r1, #2
20000db6:	6979      	ldr	r1, [r7, #20]
20000db8:	1841      	adds	r1, r0, r1
20000dba:	0089      	lsls	r1, r1, #2
20000dbc:	58c9      	ldr	r1, [r1, r3]
20000dbe:	4b0d      	ldr	r3, [pc, #52]	; (20000df4 <do_merge+0x2c8>)
20000dc0:	0089      	lsls	r1, r1, #2
20000dc2:	58cb      	ldr	r3, [r1, r3]
20000dc4:	18d2      	adds	r2, r2, r3
20000dc6:	4b0a      	ldr	r3, [pc, #40]	; (20000df0 <do_merge+0x2c4>)
20000dc8:	645a      	str	r2, [r3, #68]	; 0x44
20000dca:	693b      	ldr	r3, [r7, #16]
20000dcc:	3301      	adds	r3, #1
20000dce:	613b      	str	r3, [r7, #16]
20000dd0:	693b      	ldr	r3, [r7, #16]
20000dd2:	2b03      	cmp	r3, #3
20000dd4:	dd9f      	ble.n	20000d16 <do_merge+0x1ea>
20000dd6:	697b      	ldr	r3, [r7, #20]
20000dd8:	3b01      	subs	r3, #1
20000dda:	617b      	str	r3, [r7, #20]
20000ddc:	697b      	ldr	r3, [r7, #20]
20000dde:	2b00      	cmp	r3, #0
20000de0:	dc96      	bgt.n	20000d10 <do_merge+0x1e4>
			break;
20000de2:	e070      	b.n	20000ec6 <do_merge+0x39a>
			MERGE_DIRECTION(y, x, 0, < 3, 1, 0, < 4, 1, 0, 1);
20000de4:	2300      	movs	r3, #0
20000de6:	60fb      	str	r3, [r7, #12]
20000de8:	e069      	b.n	20000ebe <do_merge+0x392>
20000dea:	2300      	movs	r3, #0
20000dec:	60bb      	str	r3, [r7, #8]
20000dee:	e060      	b.n	20000eb2 <do_merge+0x386>
20000df0:	20001b30 	andcs	r1, r0, r0, lsr fp
20000df4:	20002354 	andcs	r2, r0, r4, asr r3
20000df8:	4b35      	ldr	r3, [pc, #212]	; (20000ed0 <do_merge+0x3a4>)
20000dfa:	68ba      	ldr	r2, [r7, #8]
20000dfc:	0091      	lsls	r1, r2, #2
20000dfe:	68fa      	ldr	r2, [r7, #12]
20000e00:	188a      	adds	r2, r1, r2
20000e02:	0092      	lsls	r2, r2, #2
20000e04:	58d3      	ldr	r3, [r2, r3]
20000e06:	2b00      	cmp	r3, #0
20000e08:	d050      	beq.n	20000eac <do_merge+0x380>
20000e0a:	4b31      	ldr	r3, [pc, #196]	; (20000ed0 <do_merge+0x3a4>)
20000e0c:	68ba      	ldr	r2, [r7, #8]
20000e0e:	0091      	lsls	r1, r2, #2
20000e10:	68fa      	ldr	r2, [r7, #12]
20000e12:	188a      	adds	r2, r1, r2
20000e14:	0092      	lsls	r2, r2, #2
20000e16:	58d2      	ldr	r2, [r2, r3]
20000e18:	68fb      	ldr	r3, [r7, #12]
20000e1a:	1c59      	adds	r1, r3, #1
20000e1c:	4b2c      	ldr	r3, [pc, #176]	; (20000ed0 <do_merge+0x3a4>)
20000e1e:	68b8      	ldr	r0, [r7, #8]
20000e20:	0080      	lsls	r0, r0, #2
20000e22:	1841      	adds	r1, r0, r1
20000e24:	0089      	lsls	r1, r1, #2
20000e26:	58cb      	ldr	r3, [r1, r3]
20000e28:	429a      	cmp	r2, r3
20000e2a:	d13f      	bne.n	20000eac <do_merge+0x380>
20000e2c:	4b28      	ldr	r3, [pc, #160]	; (20000ed0 <do_merge+0x3a4>)
20000e2e:	2201      	movs	r2, #1
20000e30:	641a      	str	r2, [r3, #64]	; 0x40
20000e32:	4b27      	ldr	r3, [pc, #156]	; (20000ed0 <do_merge+0x3a4>)
20000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20000e36:	4a26      	ldr	r2, [pc, #152]	; (20000ed0 <do_merge+0x3a4>)
20000e38:	68b9      	ldr	r1, [r7, #8]
20000e3a:	0088      	lsls	r0, r1, #2
20000e3c:	68f9      	ldr	r1, [r7, #12]
20000e3e:	1841      	adds	r1, r0, r1
20000e40:	0089      	lsls	r1, r1, #2
20000e42:	588a      	ldr	r2, [r1, r2]
20000e44:	18d1      	adds	r1, r2, r3
20000e46:	4b22      	ldr	r3, [pc, #136]	; (20000ed0 <do_merge+0x3a4>)
20000e48:	68ba      	ldr	r2, [r7, #8]
20000e4a:	0090      	lsls	r0, r2, #2
20000e4c:	68fa      	ldr	r2, [r7, #12]
20000e4e:	1882      	adds	r2, r0, r2
20000e50:	0092      	lsls	r2, r2, #2
20000e52:	50d1      	str	r1, [r2, r3]
20000e54:	4b1e      	ldr	r3, [pc, #120]	; (20000ed0 <do_merge+0x3a4>)
20000e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20000e58:	1e5a      	subs	r2, r3, #1
20000e5a:	4b1d      	ldr	r3, [pc, #116]	; (20000ed0 <do_merge+0x3a4>)
20000e5c:	64da      	str	r2, [r3, #76]	; 0x4c
20000e5e:	68fb      	ldr	r3, [r7, #12]
20000e60:	1c5a      	adds	r2, r3, #1
20000e62:	4b1b      	ldr	r3, [pc, #108]	; (20000ed0 <do_merge+0x3a4>)
20000e64:	68b9      	ldr	r1, [r7, #8]
20000e66:	0089      	lsls	r1, r1, #2
20000e68:	188a      	adds	r2, r1, r2
20000e6a:	0092      	lsls	r2, r2, #2
20000e6c:	2100      	movs	r1, #0
20000e6e:	50d1      	str	r1, [r2, r3]
20000e70:	4b17      	ldr	r3, [pc, #92]	; (20000ed0 <do_merge+0x3a4>)
20000e72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
20000e74:	4b16      	ldr	r3, [pc, #88]	; (20000ed0 <do_merge+0x3a4>)
20000e76:	68b9      	ldr	r1, [r7, #8]
20000e78:	0088      	lsls	r0, r1, #2
20000e7a:	68f9      	ldr	r1, [r7, #12]
20000e7c:	1841      	adds	r1, r0, r1
20000e7e:	0089      	lsls	r1, r1, #2
20000e80:	58c9      	ldr	r1, [r1, r3]
20000e82:	4b14      	ldr	r3, [pc, #80]	; (20000ed4 <do_merge+0x3a8>)
20000e84:	0089      	lsls	r1, r1, #2
20000e86:	58cb      	ldr	r3, [r1, r3]
20000e88:	18d2      	adds	r2, r2, r3
20000e8a:	4b11      	ldr	r3, [pc, #68]	; (20000ed0 <do_merge+0x3a4>)
20000e8c:	649a      	str	r2, [r3, #72]	; 0x48
20000e8e:	4b10      	ldr	r3, [pc, #64]	; (20000ed0 <do_merge+0x3a4>)
20000e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20000e92:	4b0f      	ldr	r3, [pc, #60]	; (20000ed0 <do_merge+0x3a4>)
20000e94:	68b9      	ldr	r1, [r7, #8]
20000e96:	0088      	lsls	r0, r1, #2
20000e98:	68f9      	ldr	r1, [r7, #12]
20000e9a:	1841      	adds	r1, r0, r1
20000e9c:	0089      	lsls	r1, r1, #2
20000e9e:	58c9      	ldr	r1, [r1, r3]
20000ea0:	4b0c      	ldr	r3, [pc, #48]	; (20000ed4 <do_merge+0x3a8>)
20000ea2:	0089      	lsls	r1, r1, #2
20000ea4:	58cb      	ldr	r3, [r1, r3]
20000ea6:	18d2      	adds	r2, r2, r3
20000ea8:	4b09      	ldr	r3, [pc, #36]	; (20000ed0 <do_merge+0x3a4>)
20000eaa:	645a      	str	r2, [r3, #68]	; 0x44
20000eac:	68bb      	ldr	r3, [r7, #8]
20000eae:	3301      	adds	r3, #1
20000eb0:	60bb      	str	r3, [r7, #8]
20000eb2:	68bb      	ldr	r3, [r7, #8]
20000eb4:	2b03      	cmp	r3, #3
20000eb6:	dd9f      	ble.n	20000df8 <do_merge+0x2cc>
20000eb8:	68fb      	ldr	r3, [r7, #12]
20000eba:	3301      	adds	r3, #1
20000ebc:	60fb      	str	r3, [r7, #12]
20000ebe:	68fb      	ldr	r3, [r7, #12]
20000ec0:	2b02      	cmp	r3, #2
20000ec2:	dd92      	ble.n	20000dea <do_merge+0x2be>
			break;
20000ec4:	46c0      	nop			; (mov r8, r8)
}
20000ec6:	46c0      	nop			; (mov r8, r8)
20000ec8:	46bd      	mov	sp, r7
20000eca:	b00a      	add	sp, #40	; 0x28
20000ecc:	bd80      	pop	{r7, pc}
20000ece:	46c0      	nop			; (mov r8, r8)
20000ed0:	20001b30 	andcs	r1, r0, r0, lsr fp
20000ed4:	20002354 	andcs	r2, r0, r4, asr r3

20000ed8 <do_check_end_condition>:


int do_check_end_condition(void)
{
20000ed8:	b580      	push	{r7, lr}
20000eda:	b084      	sub	sp, #16
20000edc:	af00      	add	r7, sp, #0
	int ret = -1;
20000ede:	2301      	movs	r3, #1
20000ee0:	425b      	negs	r3, r3
20000ee2:	60fb      	str	r3, [r7, #12]
	for (int x = 0; x < 4; ++x) {
20000ee4:	2300      	movs	r3, #0
20000ee6:	60bb      	str	r3, [r7, #8]
20000ee8:	e050      	b.n	20000f8c <do_check_end_condition+0xb4>
		for (int y = 0; y < 4; ++y) {
20000eea:	2300      	movs	r3, #0
20000eec:	607b      	str	r3, [r7, #4]
20000eee:	e047      	b.n	20000f80 <do_check_end_condition+0xa8>
			if (values[game.grid[x][y]] == 2048)
20000ef0:	4b2a      	ldr	r3, [pc, #168]	; (20000f9c <do_check_end_condition+0xc4>)
20000ef2:	68ba      	ldr	r2, [r7, #8]
20000ef4:	0091      	lsls	r1, r2, #2
20000ef6:	687a      	ldr	r2, [r7, #4]
20000ef8:	188a      	adds	r2, r1, r2
20000efa:	0092      	lsls	r2, r2, #2
20000efc:	58d2      	ldr	r2, [r2, r3]
20000efe:	4b28      	ldr	r3, [pc, #160]	; (20000fa0 <do_check_end_condition+0xc8>)
20000f00:	0092      	lsls	r2, r2, #2
20000f02:	58d2      	ldr	r2, [r2, r3]
20000f04:	2380      	movs	r3, #128	; 0x80
20000f06:	011b      	lsls	r3, r3, #4
20000f08:	429a      	cmp	r2, r3
20000f0a:	d101      	bne.n	20000f10 <do_check_end_condition+0x38>
				return 1;
20000f0c:	2301      	movs	r3, #1
20000f0e:	e041      	b.n	20000f94 <do_check_end_condition+0xbc>
			if (!game.grid[x][y] ||
20000f10:	4b22      	ldr	r3, [pc, #136]	; (20000f9c <do_check_end_condition+0xc4>)
20000f12:	68ba      	ldr	r2, [r7, #8]
20000f14:	0091      	lsls	r1, r2, #2
20000f16:	687a      	ldr	r2, [r7, #4]
20000f18:	188a      	adds	r2, r1, r2
20000f1a:	0092      	lsls	r2, r2, #2
20000f1c:	58d3      	ldr	r3, [r2, r3]
20000f1e:	2b00      	cmp	r3, #0
20000f20:	d029      	beq.n	20000f76 <do_check_end_condition+0x9e>
			    ((x + 1 < 4) && (game.grid[x][y] == game.grid[x + 1][y])) ||
20000f22:	68bb      	ldr	r3, [r7, #8]
20000f24:	3301      	adds	r3, #1
			if (!game.grid[x][y] ||
20000f26:	2b03      	cmp	r3, #3
20000f28:	dc10      	bgt.n	20000f4c <do_check_end_condition+0x74>
			    ((x + 1 < 4) && (game.grid[x][y] == game.grid[x + 1][y])) ||
20000f2a:	4b1c      	ldr	r3, [pc, #112]	; (20000f9c <do_check_end_condition+0xc4>)
20000f2c:	68ba      	ldr	r2, [r7, #8]
20000f2e:	0091      	lsls	r1, r2, #2
20000f30:	687a      	ldr	r2, [r7, #4]
20000f32:	188a      	adds	r2, r1, r2
20000f34:	0092      	lsls	r2, r2, #2
20000f36:	58d2      	ldr	r2, [r2, r3]
20000f38:	68bb      	ldr	r3, [r7, #8]
20000f3a:	1c59      	adds	r1, r3, #1
20000f3c:	4b17      	ldr	r3, [pc, #92]	; (20000f9c <do_check_end_condition+0xc4>)
20000f3e:	0088      	lsls	r0, r1, #2
20000f40:	6879      	ldr	r1, [r7, #4]
20000f42:	1841      	adds	r1, r0, r1
20000f44:	0089      	lsls	r1, r1, #2
20000f46:	58cb      	ldr	r3, [r1, r3]
20000f48:	429a      	cmp	r2, r3
20000f4a:	d014      	beq.n	20000f76 <do_check_end_condition+0x9e>
			    ((y + 1 < 4) && (game.grid[x][y] == game.grid[x][y + 1])))
20000f4c:	687b      	ldr	r3, [r7, #4]
20000f4e:	3301      	adds	r3, #1
			    ((x + 1 < 4) && (game.grid[x][y] == game.grid[x + 1][y])) ||
20000f50:	2b03      	cmp	r3, #3
20000f52:	dc12      	bgt.n	20000f7a <do_check_end_condition+0xa2>
			    ((y + 1 < 4) && (game.grid[x][y] == game.grid[x][y + 1])))
20000f54:	4b11      	ldr	r3, [pc, #68]	; (20000f9c <do_check_end_condition+0xc4>)
20000f56:	68ba      	ldr	r2, [r7, #8]
20000f58:	0091      	lsls	r1, r2, #2
20000f5a:	687a      	ldr	r2, [r7, #4]
20000f5c:	188a      	adds	r2, r1, r2
20000f5e:	0092      	lsls	r2, r2, #2
20000f60:	58d2      	ldr	r2, [r2, r3]
20000f62:	687b      	ldr	r3, [r7, #4]
20000f64:	1c59      	adds	r1, r3, #1
20000f66:	4b0d      	ldr	r3, [pc, #52]	; (20000f9c <do_check_end_condition+0xc4>)
20000f68:	68b8      	ldr	r0, [r7, #8]
20000f6a:	0080      	lsls	r0, r0, #2
20000f6c:	1841      	adds	r1, r0, r1
20000f6e:	0089      	lsls	r1, r1, #2
20000f70:	58cb      	ldr	r3, [r1, r3]
20000f72:	429a      	cmp	r2, r3
20000f74:	d101      	bne.n	20000f7a <do_check_end_condition+0xa2>
				ret = 0;
20000f76:	2300      	movs	r3, #0
20000f78:	60fb      	str	r3, [r7, #12]
		for (int y = 0; y < 4; ++y) {
20000f7a:	687b      	ldr	r3, [r7, #4]
20000f7c:	3301      	adds	r3, #1
20000f7e:	607b      	str	r3, [r7, #4]
20000f80:	687b      	ldr	r3, [r7, #4]
20000f82:	2b03      	cmp	r3, #3
20000f84:	ddb4      	ble.n	20000ef0 <do_check_end_condition+0x18>
	for (int x = 0; x < 4; ++x) {
20000f86:	68bb      	ldr	r3, [r7, #8]
20000f88:	3301      	adds	r3, #1
20000f8a:	60bb      	str	r3, [r7, #8]
20000f8c:	68bb      	ldr	r3, [r7, #8]
20000f8e:	2b03      	cmp	r3, #3
20000f90:	ddab      	ble.n	20000eea <do_check_end_condition+0x12>
		}
	}
	return ret;
20000f92:	68fb      	ldr	r3, [r7, #12]
}
20000f94:	0018      	movs	r0, r3
20000f96:	46bd      	mov	sp, r7
20000f98:	b004      	add	sp, #16
20000f9a:	bd80      	pop	{r7, pc}
20000f9c:	20001b30 	andcs	r1, r0, r0, lsr fp
20000fa0:	20002354 	andcs	r2, r0, r4, asr r3

20000fa4 <do_tick>:


int do_tick(int d)
{
20000fa4:	b580      	push	{r7, lr}
20000fa6:	b082      	sub	sp, #8
20000fa8:	af00      	add	r7, sp, #0
20000faa:	6078      	str	r0, [r7, #4]
	game.have_moved = 0;
20000fac:	4b0b      	ldr	r3, [pc, #44]	; (20000fdc <do_tick+0x38>)
20000fae:	2200      	movs	r2, #0
20000fb0:	641a      	str	r2, [r3, #64]	; 0x40
	do_gravity(d);
20000fb2:	687b      	ldr	r3, [r7, #4]
20000fb4:	0018      	movs	r0, r3
20000fb6:	f7ff fc75 	bl	200008a4 <do_gravity>
	do_merge(d);
20000fba:	687b      	ldr	r3, [r7, #4]
20000fbc:	0018      	movs	r0, r3
20000fbe:	f7ff fdb5 	bl	20000b2c <do_merge>
	do_gravity(d);
20000fc2:	687b      	ldr	r3, [r7, #4]
20000fc4:	0018      	movs	r0, r3
20000fc6:	f7ff fc6d 	bl	200008a4 <do_gravity>
	do_newblock();
20000fca:	f000 f905 	bl	200011d8 <do_newblock>
	return game.have_moved;
20000fce:	4b03      	ldr	r3, [pc, #12]	; (20000fdc <do_tick+0x38>)
20000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
20000fd2:	0018      	movs	r0, r3
20000fd4:	46bd      	mov	sp, r7
20000fd6:	b002      	add	sp, #8
20000fd8:	bd80      	pop	{r7, pc}
20000fda:	46c0      	nop			; (mov r8, r8)
20000fdc:	20001b30 	andcs	r1, r0, r0, lsr fp

20000fe0 <init_gameboard>:

void init_gameboard(void)
{
20000fe0:	b580      	push	{r7, lr}
20000fe2:	b082      	sub	sp, #8
20000fe4:	af00      	add	r7, sp, #0
	for (int i=0;i<4;i++)
20000fe6:	2300      	movs	r3, #0
20000fe8:	607b      	str	r3, [r7, #4]
20000fea:	e013      	b.n	20001014 <init_gameboard+0x34>
		for (int j=0;j<4;j++)
20000fec:	2300      	movs	r3, #0
20000fee:	603b      	str	r3, [r7, #0]
20000ff0:	e00a      	b.n	20001008 <init_gameboard+0x28>
			game.grid[i][j]=0;
20000ff2:	4b0d      	ldr	r3, [pc, #52]	; (20001028 <init_gameboard+0x48>)
20000ff4:	687a      	ldr	r2, [r7, #4]
20000ff6:	0091      	lsls	r1, r2, #2
20000ff8:	683a      	ldr	r2, [r7, #0]
20000ffa:	188a      	adds	r2, r1, r2
20000ffc:	0092      	lsls	r2, r2, #2
20000ffe:	2100      	movs	r1, #0
20001000:	50d1      	str	r1, [r2, r3]
		for (int j=0;j<4;j++)
20001002:	683b      	ldr	r3, [r7, #0]
20001004:	3301      	adds	r3, #1
20001006:	603b      	str	r3, [r7, #0]
20001008:	683b      	ldr	r3, [r7, #0]
2000100a:	2b03      	cmp	r3, #3
2000100c:	ddf1      	ble.n	20000ff2 <init_gameboard+0x12>
	for (int i=0;i<4;i++)
2000100e:	687b      	ldr	r3, [r7, #4]
20001010:	3301      	adds	r3, #1
20001012:	607b      	str	r3, [r7, #4]
20001014:	687b      	ldr	r3, [r7, #4]
20001016:	2b03      	cmp	r3, #3
20001018:	dde8      	ble.n	20000fec <init_gameboard+0xc>
			
	do_newblock();
2000101a:	f000 f8dd 	bl	200011d8 <do_newblock>

}
2000101e:	46c0      	nop			; (mov r8, r8)
20001020:	46bd      	mov	sp, r7
20001022:	b002      	add	sp, #8
20001024:	bd80      	pop	{r7, pc}
20001026:	46c0      	nop			; (mov r8, r8)
20001028:	20001b30 	andcs	r1, r0, r0, lsr fp

2000102c <draw_gameboard>:

void draw_gameboard()
{
2000102c:	b580      	push	{r7, lr}
2000102e:	b082      	sub	sp, #8
20001030:	af00      	add	r7, sp, #0
	for (int i=0;i<4;i++){
20001032:	2300      	movs	r3, #0
20001034:	607b      	str	r3, [r7, #4]
20001036:	e017      	b.n	20001068 <draw_gameboard+0x3c>
		for (int j=0;j<4;j++)
20001038:	2300      	movs	r3, #0
2000103a:	603b      	str	r3, [r7, #0]
2000103c:	e00e      	b.n	2000105c <draw_gameboard+0x30>
		{
			draw_tile(i,j,game.grid[i][j]);
2000103e:	4b0e      	ldr	r3, [pc, #56]	; (20001078 <draw_gameboard+0x4c>)
20001040:	687a      	ldr	r2, [r7, #4]
20001042:	0091      	lsls	r1, r2, #2
20001044:	683a      	ldr	r2, [r7, #0]
20001046:	188a      	adds	r2, r1, r2
20001048:	0092      	lsls	r2, r2, #2
2000104a:	58d2      	ldr	r2, [r2, r3]
2000104c:	6839      	ldr	r1, [r7, #0]
2000104e:	687b      	ldr	r3, [r7, #4]
20001050:	0018      	movs	r0, r3
20001052:	f000 f813 	bl	2000107c <draw_tile>
		for (int j=0;j<4;j++)
20001056:	683b      	ldr	r3, [r7, #0]
20001058:	3301      	adds	r3, #1
2000105a:	603b      	str	r3, [r7, #0]
2000105c:	683b      	ldr	r3, [r7, #0]
2000105e:	2b03      	cmp	r3, #3
20001060:	dded      	ble.n	2000103e <draw_gameboard+0x12>
	for (int i=0;i<4;i++){
20001062:	687b      	ldr	r3, [r7, #4]
20001064:	3301      	adds	r3, #1
20001066:	607b      	str	r3, [r7, #4]
20001068:	687b      	ldr	r3, [r7, #4]
2000106a:	2b03      	cmp	r3, #3
2000106c:	dde4      	ble.n	20001038 <draw_gameboard+0xc>
		}
	}
}
2000106e:	46c0      	nop			; (mov r8, r8)
20001070:	46bd      	mov	sp, r7
20001072:	b002      	add	sp, #8
20001074:	bd80      	pop	{r7, pc}
20001076:	46c0      	nop			; (mov r8, r8)
20001078:	20001b30 	andcs	r1, r0, r0, lsr fp

2000107c <draw_tile>:

void draw_tile(int posx,int posy,int val)
{
2000107c:	b580      	push	{r7, lr}
2000107e:	b08e      	sub	sp, #56	; 0x38
20001080:	af00      	add	r7, sp, #0
20001082:	60f8      	str	r0, [r7, #12]
20001084:	60b9      	str	r1, [r7, #8]
20001086:	607a      	str	r2, [r7, #4]
	int x =16*posx;
20001088:	68fb      	ldr	r3, [r7, #12]
2000108a:	011b      	lsls	r3, r3, #4
2000108c:	627b      	str	r3, [r7, #36]	; 0x24
	int y =16*posy;
2000108e:	68bb      	ldr	r3, [r7, #8]
20001090:	011b      	lsls	r3, r3, #4
20001092:	623b      	str	r3, [r7, #32]
	x+=32;
20001094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001096:	3320      	adds	r3, #32
20001098:	627b      	str	r3, [r7, #36]	; 0x24
	int width = 16;
2000109a:	2310      	movs	r3, #16
2000109c:	61fb      	str	r3, [r7, #28]
	int height = 16;
2000109e:	2310      	movs	r3, #16
200010a0:	61bb      	str	r3, [r7, #24]
	
	unsigned char* data = getTileData(val);
200010a2:	687b      	ldr	r3, [r7, #4]
200010a4:	0018      	movs	r0, r3
200010a6:	f000 f854 	bl	20001152 <getTileData>
200010aa:	0003      	movs	r3, r0
200010ac:	617b      	str	r3, [r7, #20]
	
	
	int i,j,k,width_in_bytes;
		
		if (width%8==0)
200010ae:	69fb      	ldr	r3, [r7, #28]
200010b0:	2207      	movs	r2, #7
200010b2:	4013      	ands	r3, r2
200010b4:	d106      	bne.n	200010c4 <draw_tile+0x48>
			width_in_bytes= width/8;
200010b6:	69fb      	ldr	r3, [r7, #28]
200010b8:	2b00      	cmp	r3, #0
200010ba:	da00      	bge.n	200010be <draw_tile+0x42>
200010bc:	3307      	adds	r3, #7
200010be:	10db      	asrs	r3, r3, #3
200010c0:	62bb      	str	r3, [r7, #40]	; 0x28
200010c2:	e002      	b.n	200010ca <draw_tile+0x4e>
		else
			width_in_bytes = width+1;
200010c4:	69fb      	ldr	r3, [r7, #28]
200010c6:	3301      	adds	r3, #1
200010c8:	62bb      	str	r3, [r7, #40]	; 0x28
			
			
		for (i = 0;i<height;i++)
200010ca:	2300      	movs	r3, #0
200010cc:	637b      	str	r3, [r7, #52]	; 0x34
200010ce:	e038      	b.n	20001142 <draw_tile+0xc6>
		{
			for (j=0;j<width_in_bytes;j++)
200010d0:	2300      	movs	r3, #0
200010d2:	633b      	str	r3, [r7, #48]	; 0x30
200010d4:	e02e      	b.n	20001134 <draw_tile+0xb8>
			{
				unsigned char byte = data[i*width_in_bytes + j];
200010d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200010d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
200010da:	435a      	muls	r2, r3
200010dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200010de:	18d3      	adds	r3, r2, r3
200010e0:	001a      	movs	r2, r3
200010e2:	697b      	ldr	r3, [r7, #20]
200010e4:	189a      	adds	r2, r3, r2
200010e6:	2313      	movs	r3, #19
200010e8:	18fb      	adds	r3, r7, r3
200010ea:	7812      	ldrb	r2, [r2, #0]
200010ec:	701a      	strb	r2, [r3, #0]
				for (k=0;k<8;k++)
200010ee:	2300      	movs	r3, #0
200010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
200010f2:	e019      	b.n	20001128 <draw_tile+0xac>
				{
					if (byte&(1<<k))
200010f4:	2313      	movs	r3, #19
200010f6:	18fb      	adds	r3, r7, r3
200010f8:	781a      	ldrb	r2, [r3, #0]
200010fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200010fc:	411a      	asrs	r2, r3
200010fe:	0013      	movs	r3, r2
20001100:	2201      	movs	r2, #1
20001102:	4013      	ands	r3, r2
20001104:	d00d      	beq.n	20001122 <draw_tile+0xa6>
						pixel(8*j+k+x+1,i+y+1);
20001106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001108:	00da      	lsls	r2, r3, #3
2000110a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000110c:	18d2      	adds	r2, r2, r3
2000110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001110:	18d3      	adds	r3, r2, r3
20001112:	1c58      	adds	r0, r3, #1
20001114:	6b7a      	ldr	r2, [r7, #52]	; 0x34
20001116:	6a3b      	ldr	r3, [r7, #32]
20001118:	18d3      	adds	r3, r2, r3
2000111a:	3301      	adds	r3, #1
2000111c:	0019      	movs	r1, r3
2000111e:	f7ff fa61 	bl	200005e4 <pixel>
				for (k=0;k<8;k++)
20001122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001124:	3301      	adds	r3, #1
20001126:	62fb      	str	r3, [r7, #44]	; 0x2c
20001128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000112a:	2b07      	cmp	r3, #7
2000112c:	dde2      	ble.n	200010f4 <draw_tile+0x78>
			for (j=0;j<width_in_bytes;j++)
2000112e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001130:	3301      	adds	r3, #1
20001132:	633b      	str	r3, [r7, #48]	; 0x30
20001134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20001136:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001138:	429a      	cmp	r2, r3
2000113a:	dbcc      	blt.n	200010d6 <draw_tile+0x5a>
		for (i = 0;i<height;i++)
2000113c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000113e:	3301      	adds	r3, #1
20001140:	637b      	str	r3, [r7, #52]	; 0x34
20001142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
20001144:	69bb      	ldr	r3, [r7, #24]
20001146:	429a      	cmp	r2, r3
20001148:	dbc2      	blt.n	200010d0 <draw_tile+0x54>
				}
			}
		}
}
2000114a:	46c0      	nop			; (mov r8, r8)
2000114c:	46bd      	mov	sp, r7
2000114e:	b00e      	add	sp, #56	; 0x38
20001150:	bd80      	pop	{r7, pc}

20001152 <getTileData>:



unsigned char * getTileData(int value)
{
20001152:	b580      	push	{r7, lr}
20001154:	b082      	sub	sp, #8
20001156:	af00      	add	r7, sp, #0
20001158:	6078      	str	r0, [r7, #4]
	#include "tile_256.xbm"
	#include "tile_512.xbm"
	#include "tile_1024.xbm"
	#include "tile_2048.xbm"
	
	switch (value)
2000115a:	687b      	ldr	r3, [r7, #4]
2000115c:	2b0b      	cmp	r3, #11
2000115e:	d81d      	bhi.n	2000119c <getTileData+0x4a>
20001160:	687b      	ldr	r3, [r7, #4]
20001162:	009a      	lsls	r2, r3, #2
20001164:	4b0f      	ldr	r3, [pc, #60]	; (200011a4 <getTileData+0x52>)
20001166:	18d3      	adds	r3, r2, r3
20001168:	681b      	ldr	r3, [r3, #0]
2000116a:	469f      	mov	pc, r3
	{
		case 0:
		return tile_0_bits;
2000116c:	4b0e      	ldr	r3, [pc, #56]	; (200011a8 <getTileData+0x56>)
2000116e:	e015      	b.n	2000119c <getTileData+0x4a>
		
		case 1:
		return tile_2_bits;
20001170:	4b0e      	ldr	r3, [pc, #56]	; (200011ac <getTileData+0x5a>)
20001172:	e013      	b.n	2000119c <getTileData+0x4a>
		
		case 2:
		return tile_4_bits;
20001174:	4b0e      	ldr	r3, [pc, #56]	; (200011b0 <getTileData+0x5e>)
20001176:	e011      	b.n	2000119c <getTileData+0x4a>
		
		case 3:
		return tile_8_bits;
20001178:	4b0e      	ldr	r3, [pc, #56]	; (200011b4 <getTileData+0x62>)
2000117a:	e00f      	b.n	2000119c <getTileData+0x4a>
		
		case 4:
		return tile_16_bits;
2000117c:	4b0e      	ldr	r3, [pc, #56]	; (200011b8 <getTileData+0x66>)
2000117e:	e00d      	b.n	2000119c <getTileData+0x4a>
		
		case 5:
		return tile_32_bits;
20001180:	4b0e      	ldr	r3, [pc, #56]	; (200011bc <getTileData+0x6a>)
20001182:	e00b      	b.n	2000119c <getTileData+0x4a>
		
		case 6:
		return tile_64_bits;
20001184:	4b0e      	ldr	r3, [pc, #56]	; (200011c0 <getTileData+0x6e>)
20001186:	e009      	b.n	2000119c <getTileData+0x4a>
		
		case 7:
		return tile_128_bits;
20001188:	4b0e      	ldr	r3, [pc, #56]	; (200011c4 <getTileData+0x72>)
2000118a:	e007      	b.n	2000119c <getTileData+0x4a>
		
		case 8:
		return tile_256_bits;
2000118c:	4b0e      	ldr	r3, [pc, #56]	; (200011c8 <getTileData+0x76>)
2000118e:	e005      	b.n	2000119c <getTileData+0x4a>
		
		case 9:
		return tile_512_bits;
20001190:	4b0e      	ldr	r3, [pc, #56]	; (200011cc <getTileData+0x7a>)
20001192:	e003      	b.n	2000119c <getTileData+0x4a>
		
		case 10:
		return tile_1024_bits;
20001194:	4b0e      	ldr	r3, [pc, #56]	; (200011d0 <getTileData+0x7e>)
20001196:	e001      	b.n	2000119c <getTileData+0x4a>
		
		case 11:
		return tile_2048_bits;
20001198:	4b0e      	ldr	r3, [pc, #56]	; (200011d4 <getTileData+0x82>)
2000119a:	e7ff      	b.n	2000119c <getTileData+0x4a>
	}
	
}
2000119c:	0018      	movs	r0, r3
2000119e:	46bd      	mov	sp, r7
200011a0:	b002      	add	sp, #8
200011a2:	bd80      	pop	{r7, pc}
200011a4:	20002384 	andcs	r2, r0, r4, lsl #7
200011a8:	20001f88 	andcs	r1, r0, r8, lsl #31
200011ac:	20001fa8 	andcs	r1, r0, r8, lsr #31
200011b0:	20001fc8 	andcs	r1, r0, r8, asr #31
200011b4:	20001fe8 	andcs	r1, r0, r8, ror #31
200011b8:	20002008 	andcs	r2, r0, r8
200011bc:	20002028 	andcs	r2, r0, r8, lsr #32
200011c0:	20002048 	andcs	r2, r0, r8, asr #32
200011c4:	20002068 	andcs	r2, r0, r8, rrx
200011c8:	20002088 	andcs	r2, r0, r8, lsl #1
200011cc:	200020a8 	andcs	r2, r0, r8, lsr #1
200011d0:	200020c8 	andcs	r2, r0, r8, asr #1
200011d4:	200020e8 	andcs	r2, r0, r8, ror #1

200011d8 <do_newblock>:

void do_newblock(void) {
200011d8:	b580      	push	{r7, lr}
200011da:	b084      	sub	sp, #16
200011dc:	af00      	add	r7, sp, #0
    if (game.blocks_in_play >= 16) return;
200011de:	4b29      	ldr	r3, [pc, #164]	; (20001284 <do_newblock+0xac>)
200011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200011e2:	2b0f      	cmp	r3, #15
200011e4:	dc4a      	bgt.n	2000127c <do_newblock+0xa4>
 
    int bn = rand() % (16 - game.blocks_in_play);
200011e6:	f000 f8cb 	bl	20001380 <rand>
200011ea:	4b26      	ldr	r3, [pc, #152]	; (20001284 <do_newblock+0xac>)
200011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200011ee:	2210      	movs	r2, #16
200011f0:	1ad3      	subs	r3, r2, r3
200011f2:	0019      	movs	r1, r3
200011f4:	f000 fbaa 	bl	2000194c <__aeabi_uidivmod>
200011f8:	000b      	movs	r3, r1
200011fa:	603b      	str	r3, [r7, #0]
    int pn = 0;
200011fc:	2300      	movs	r3, #0
200011fe:	60fb      	str	r3, [r7, #12]
 
    for (int x = 0; x < 4; ++x) {
20001200:	2300      	movs	r3, #0
20001202:	60bb      	str	r3, [r7, #8]
20001204:	e036      	b.n	20001274 <do_newblock+0x9c>
        for (int y = 0; y < 4; ++y) {
20001206:	2300      	movs	r3, #0
20001208:	607b      	str	r3, [r7, #4]
2000120a:	e02d      	b.n	20001268 <do_newblock+0x90>
            if (game.grid[x][y])
2000120c:	4b1d      	ldr	r3, [pc, #116]	; (20001284 <do_newblock+0xac>)
2000120e:	68ba      	ldr	r2, [r7, #8]
20001210:	0091      	lsls	r1, r2, #2
20001212:	687a      	ldr	r2, [r7, #4]
20001214:	188a      	adds	r2, r1, r2
20001216:	0092      	lsls	r2, r2, #2
20001218:	58d3      	ldr	r3, [r2, r3]
2000121a:	2b00      	cmp	r3, #0
2000121c:	d120      	bne.n	20001260 <do_newblock+0x88>
                continue;
 
            if (pn == bn){
2000121e:	68fa      	ldr	r2, [r7, #12]
20001220:	683b      	ldr	r3, [r7, #0]
20001222:	429a      	cmp	r2, r3
20001224:	d118      	bne.n	20001258 <do_newblock+0x80>
                game.grid[x][y] = rand() % 10 ? 1 : 2;
20001226:	f000 f8ab 	bl	20001380 <rand>
2000122a:	0003      	movs	r3, r0
2000122c:	210a      	movs	r1, #10
2000122e:	0018      	movs	r0, r3
20001230:	f000 fb8c 	bl	2000194c <__aeabi_uidivmod>
20001234:	1e0b      	subs	r3, r1, #0
20001236:	d001      	beq.n	2000123c <do_newblock+0x64>
20001238:	2301      	movs	r3, #1
2000123a:	e000      	b.n	2000123e <do_newblock+0x66>
2000123c:	2302      	movs	r3, #2
2000123e:	4a11      	ldr	r2, [pc, #68]	; (20001284 <do_newblock+0xac>)
20001240:	68b9      	ldr	r1, [r7, #8]
20001242:	0088      	lsls	r0, r1, #2
20001244:	6879      	ldr	r1, [r7, #4]
20001246:	1841      	adds	r1, r0, r1
20001248:	0089      	lsls	r1, r1, #2
2000124a:	508b      	str	r3, [r1, r2]
                game.blocks_in_play += 1;
2000124c:	4b0d      	ldr	r3, [pc, #52]	; (20001284 <do_newblock+0xac>)
2000124e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20001250:	1c5a      	adds	r2, r3, #1
20001252:	4b0c      	ldr	r3, [pc, #48]	; (20001284 <do_newblock+0xac>)
20001254:	64da      	str	r2, [r3, #76]	; 0x4c
                return;
20001256:	e012      	b.n	2000127e <do_newblock+0xa6>
            }
            else {
                ++pn;
20001258:	68fb      	ldr	r3, [r7, #12]
2000125a:	3301      	adds	r3, #1
2000125c:	60fb      	str	r3, [r7, #12]
2000125e:	e000      	b.n	20001262 <do_newblock+0x8a>
                continue;
20001260:	46c0      	nop			; (mov r8, r8)
        for (int y = 0; y < 4; ++y) {
20001262:	687b      	ldr	r3, [r7, #4]
20001264:	3301      	adds	r3, #1
20001266:	607b      	str	r3, [r7, #4]
20001268:	687b      	ldr	r3, [r7, #4]
2000126a:	2b03      	cmp	r3, #3
2000126c:	ddce      	ble.n	2000120c <do_newblock+0x34>
    for (int x = 0; x < 4; ++x) {
2000126e:	68bb      	ldr	r3, [r7, #8]
20001270:	3301      	adds	r3, #1
20001272:	60bb      	str	r3, [r7, #8]
20001274:	68bb      	ldr	r3, [r7, #8]
20001276:	2b03      	cmp	r3, #3
20001278:	ddc5      	ble.n	20001206 <do_newblock+0x2e>
2000127a:	e000      	b.n	2000127e <do_newblock+0xa6>
    if (game.blocks_in_play >= 16) return;
2000127c:	46c0      	nop			; (mov r8, r8)
            }
        }
    }
}
2000127e:	46bd      	mov	sp, r7
20001280:	b004      	add	sp, #16
20001282:	bd80      	pop	{r7, pc}
20001284:	20001b30 	andcs	r1, r0, r0, lsr fp

20001288 <draw_gameoverScreen>:


void draw_gameoverScreen()
{
20001288:	b580      	push	{r7, lr}
2000128a:	b08a      	sub	sp, #40	; 0x28
2000128c:	af00      	add	r7, sp, #0
	#include "game_over.xbm";
	
	int x =0;
2000128e:	2300      	movs	r3, #0
20001290:	617b      	str	r3, [r7, #20]
	int y =0;
20001292:	2300      	movs	r3, #0
20001294:	613b      	str	r3, [r7, #16]
	x+=32;
20001296:	697b      	ldr	r3, [r7, #20]
20001298:	3320      	adds	r3, #32
2000129a:	617b      	str	r3, [r7, #20]
	
	int width = game_over_width;
2000129c:	2340      	movs	r3, #64	; 0x40
2000129e:	60fb      	str	r3, [r7, #12]
	int height = game_over_height;
200012a0:	2340      	movs	r3, #64	; 0x40
200012a2:	60bb      	str	r3, [r7, #8]
	
	unsigned char* data =game_over_bits;
200012a4:	4b28      	ldr	r3, [pc, #160]	; (20001348 <draw_gameoverScreen+0xc0>)
200012a6:	607b      	str	r3, [r7, #4]
	
	
	int i,j,k,width_in_bytes;
		
		if (width%8==0)
200012a8:	68fb      	ldr	r3, [r7, #12]
200012aa:	2207      	movs	r2, #7
200012ac:	4013      	ands	r3, r2
200012ae:	d106      	bne.n	200012be <draw_gameoverScreen+0x36>
			width_in_bytes= width/8;
200012b0:	68fb      	ldr	r3, [r7, #12]
200012b2:	2b00      	cmp	r3, #0
200012b4:	da00      	bge.n	200012b8 <draw_gameoverScreen+0x30>
200012b6:	3307      	adds	r3, #7
200012b8:	10db      	asrs	r3, r3, #3
200012ba:	61bb      	str	r3, [r7, #24]
200012bc:	e002      	b.n	200012c4 <draw_gameoverScreen+0x3c>
		else
			width_in_bytes = width+1;
200012be:	68fb      	ldr	r3, [r7, #12]
200012c0:	3301      	adds	r3, #1
200012c2:	61bb      	str	r3, [r7, #24]
			
			
		for (i = 0;i<height;i++)
200012c4:	2300      	movs	r3, #0
200012c6:	627b      	str	r3, [r7, #36]	; 0x24
200012c8:	e036      	b.n	20001338 <draw_gameoverScreen+0xb0>
		{
			for (j=0;j<width_in_bytes;j++)
200012ca:	2300      	movs	r3, #0
200012cc:	623b      	str	r3, [r7, #32]
200012ce:	e02c      	b.n	2000132a <draw_gameoverScreen+0xa2>
			{
				unsigned char byte = data[i*width_in_bytes + j];
200012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200012d2:	69ba      	ldr	r2, [r7, #24]
200012d4:	435a      	muls	r2, r3
200012d6:	6a3b      	ldr	r3, [r7, #32]
200012d8:	18d3      	adds	r3, r2, r3
200012da:	001a      	movs	r2, r3
200012dc:	687b      	ldr	r3, [r7, #4]
200012de:	189a      	adds	r2, r3, r2
200012e0:	1cfb      	adds	r3, r7, #3
200012e2:	7812      	ldrb	r2, [r2, #0]
200012e4:	701a      	strb	r2, [r3, #0]
				for (k=0;k<8;k++)
200012e6:	2300      	movs	r3, #0
200012e8:	61fb      	str	r3, [r7, #28]
200012ea:	e018      	b.n	2000131e <draw_gameoverScreen+0x96>
				{
					if (byte&(1<<k))
200012ec:	1cfb      	adds	r3, r7, #3
200012ee:	781a      	ldrb	r2, [r3, #0]
200012f0:	69fb      	ldr	r3, [r7, #28]
200012f2:	411a      	asrs	r2, r3
200012f4:	0013      	movs	r3, r2
200012f6:	2201      	movs	r2, #1
200012f8:	4013      	ands	r3, r2
200012fa:	d00d      	beq.n	20001318 <draw_gameoverScreen+0x90>
						pixel(8*j+k+x+1,i+y+1);
200012fc:	6a3b      	ldr	r3, [r7, #32]
200012fe:	00da      	lsls	r2, r3, #3
20001300:	69fb      	ldr	r3, [r7, #28]
20001302:	18d2      	adds	r2, r2, r3
20001304:	697b      	ldr	r3, [r7, #20]
20001306:	18d3      	adds	r3, r2, r3
20001308:	1c58      	adds	r0, r3, #1
2000130a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000130c:	693b      	ldr	r3, [r7, #16]
2000130e:	18d3      	adds	r3, r2, r3
20001310:	3301      	adds	r3, #1
20001312:	0019      	movs	r1, r3
20001314:	f7ff f966 	bl	200005e4 <pixel>
				for (k=0;k<8;k++)
20001318:	69fb      	ldr	r3, [r7, #28]
2000131a:	3301      	adds	r3, #1
2000131c:	61fb      	str	r3, [r7, #28]
2000131e:	69fb      	ldr	r3, [r7, #28]
20001320:	2b07      	cmp	r3, #7
20001322:	dde3      	ble.n	200012ec <draw_gameoverScreen+0x64>
			for (j=0;j<width_in_bytes;j++)
20001324:	6a3b      	ldr	r3, [r7, #32]
20001326:	3301      	adds	r3, #1
20001328:	623b      	str	r3, [r7, #32]
2000132a:	6a3a      	ldr	r2, [r7, #32]
2000132c:	69bb      	ldr	r3, [r7, #24]
2000132e:	429a      	cmp	r2, r3
20001330:	dbce      	blt.n	200012d0 <draw_gameoverScreen+0x48>
		for (i = 0;i<height;i++)
20001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001334:	3301      	adds	r3, #1
20001336:	627b      	str	r3, [r7, #36]	; 0x24
20001338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000133a:	68bb      	ldr	r3, [r7, #8]
2000133c:	429a      	cmp	r2, r3
2000133e:	dbc4      	blt.n	200012ca <draw_gameoverScreen+0x42>
				}
			}
		}
}
20001340:	46c0      	nop			; (mov r8, r8)
20001342:	46bd      	mov	sp, r7
20001344:	b00a      	add	sp, #40	; 0x28
20001346:	bd80      	pop	{r7, pc}
20001348:	20002108 	andcs	r2, r0, r8, lsl #2

2000134c <getHasMoved>:

int getHasMoved()
{
2000134c:	b580      	push	{r7, lr}
2000134e:	b082      	sub	sp, #8
20001350:	af00      	add	r7, sp, #0
	int res=game.have_moved;
20001352:	4b05      	ldr	r3, [pc, #20]	; (20001368 <getHasMoved+0x1c>)
20001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001356:	607b      	str	r3, [r7, #4]
	
	game.have_moved=0;
20001358:	4b03      	ldr	r3, [pc, #12]	; (20001368 <getHasMoved+0x1c>)
2000135a:	2200      	movs	r2, #0
2000135c:	641a      	str	r2, [r3, #64]	; 0x40
	
	return res;
2000135e:	687b      	ldr	r3, [r7, #4]
	
}
20001360:	0018      	movs	r0, r3
20001362:	46bd      	mov	sp, r7
20001364:	b002      	add	sp, #8
20001366:	bd80      	pop	{r7, pc}
20001368:	20001b30 	andcs	r1, r0, r0, lsr fp

2000136c <getTotalScore>:

long getTotalScore()
{
2000136c:	b580      	push	{r7, lr}
2000136e:	af00      	add	r7, sp, #0
	return game.total_score;
20001370:	4b02      	ldr	r3, [pc, #8]	; (2000137c <getTotalScore+0x10>)
20001372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20001374:	0018      	movs	r0, r3
20001376:	46bd      	mov	sp, r7
20001378:	bd80      	pop	{r7, pc}
2000137a:	46c0      	nop			; (mov r8, r8)
2000137c:	20001b30 	andcs	r1, r0, r0, lsr fp

20001380 <rand>:

#include "random_generator.h"
#include "display.h"

unsigned rand()
{
20001380:	b580      	push	{r7, lr}
20001382:	af00      	add	r7, sp, #0

	bit  = ((lfsr >> 0) ^ (lfsr >> 2) ^ (lfsr >> 3) ^ (lfsr >> 5) ) & 1;
20001384:	4b15      	ldr	r3, [pc, #84]	; (200013dc <rand+0x5c>)
20001386:	881b      	ldrh	r3, [r3, #0]
20001388:	089b      	lsrs	r3, r3, #2
2000138a:	b29a      	uxth	r2, r3
2000138c:	4b13      	ldr	r3, [pc, #76]	; (200013dc <rand+0x5c>)
2000138e:	881b      	ldrh	r3, [r3, #0]
20001390:	4053      	eors	r3, r2
20001392:	b29a      	uxth	r2, r3
20001394:	4b11      	ldr	r3, [pc, #68]	; (200013dc <rand+0x5c>)
20001396:	881b      	ldrh	r3, [r3, #0]
20001398:	08db      	lsrs	r3, r3, #3
2000139a:	b29b      	uxth	r3, r3
2000139c:	4053      	eors	r3, r2
2000139e:	b29a      	uxth	r2, r3
200013a0:	4b0e      	ldr	r3, [pc, #56]	; (200013dc <rand+0x5c>)
200013a2:	881b      	ldrh	r3, [r3, #0]
200013a4:	095b      	lsrs	r3, r3, #5
200013a6:	b29b      	uxth	r3, r3
200013a8:	4053      	eors	r3, r2
200013aa:	b29b      	uxth	r3, r3
200013ac:	001a      	movs	r2, r3
200013ae:	2301      	movs	r3, #1
200013b0:	401a      	ands	r2, r3
200013b2:	4b0b      	ldr	r3, [pc, #44]	; (200013e0 <rand+0x60>)
200013b4:	601a      	str	r2, [r3, #0]
	return lfsr =  (lfsr >> 1) | (bit << 15);
200013b6:	4b09      	ldr	r3, [pc, #36]	; (200013dc <rand+0x5c>)
200013b8:	881b      	ldrh	r3, [r3, #0]
200013ba:	085b      	lsrs	r3, r3, #1
200013bc:	b29a      	uxth	r2, r3
200013be:	4b08      	ldr	r3, [pc, #32]	; (200013e0 <rand+0x60>)
200013c0:	681b      	ldr	r3, [r3, #0]
200013c2:	b29b      	uxth	r3, r3
200013c4:	03db      	lsls	r3, r3, #15
200013c6:	b29b      	uxth	r3, r3
200013c8:	4313      	orrs	r3, r2
200013ca:	b29a      	uxth	r2, r3
200013cc:	4b03      	ldr	r3, [pc, #12]	; (200013dc <rand+0x5c>)
200013ce:	801a      	strh	r2, [r3, #0]
200013d0:	4b02      	ldr	r3, [pc, #8]	; (200013dc <rand+0x5c>)
200013d2:	881b      	ldrh	r3, [r3, #0]
}
200013d4:	0018      	movs	r0, r3
200013d6:	46bd      	mov	sp, r7
200013d8:	bd80      	pop	{r7, pc}
200013da:	46c0      	nop			; (mov r8, r8)
200013dc:	20001b84 	andcs	r1, r0, r4, lsl #23
200013e0:	20001b80 	andcs	r1, r0, r0, lsl #23

200013e4 <rand_interval>:

unsigned rand_interval(int from, int to){
200013e4:	b580      	push	{r7, lr}
200013e6:	b084      	sub	sp, #16
200013e8:	af00      	add	r7, sp, #0
200013ea:	6078      	str	r0, [r7, #4]
200013ec:	6039      	str	r1, [r7, #0]
	unsigned res = rand();
200013ee:	f7ff ffc7 	bl	20001380 <rand>
200013f2:	0003      	movs	r3, r0
200013f4:	60fb      	str	r3, [r7, #12]
	res = res+from;
200013f6:	687b      	ldr	r3, [r7, #4]
200013f8:	68fa      	ldr	r2, [r7, #12]
200013fa:	18d3      	adds	r3, r2, r3
200013fc:	60fb      	str	r3, [r7, #12]
	res = res%to;
200013fe:	683a      	ldr	r2, [r7, #0]
20001400:	68fb      	ldr	r3, [r7, #12]
20001402:	0011      	movs	r1, r2
20001404:	0018      	movs	r0, r3
20001406:	f000 faa1 	bl	2000194c <__aeabi_uidivmod>
2000140a:	000b      	movs	r3, r1
2000140c:	60fb      	str	r3, [r7, #12]

	return res;
2000140e:	68fb      	ldr	r3, [r7, #12]
}
20001410:	0018      	movs	r0, r3
20001412:	46bd      	mov	sp, r7
20001414:	b004      	add	sp, #16
20001416:	bd80      	pop	{r7, pc}

20001418 <set_seed>:

void set_seed(unsigned short seed)
{
20001418:	b580      	push	{r7, lr}
2000141a:	b082      	sub	sp, #8
2000141c:	af00      	add	r7, sp, #0
2000141e:	0002      	movs	r2, r0
20001420:	1dbb      	adds	r3, r7, #6
20001422:	801a      	strh	r2, [r3, #0]
	lfsr=seed;
20001424:	4b03      	ldr	r3, [pc, #12]	; (20001434 <set_seed+0x1c>)
20001426:	1dba      	adds	r2, r7, #6
20001428:	8812      	ldrh	r2, [r2, #0]
2000142a:	801a      	strh	r2, [r3, #0]
}
2000142c:	46c0      	nop			; (mov r8, r8)
2000142e:	46bd      	mov	sp, r7
20001430:	b002      	add	sp, #8
20001432:	bd80      	pop	{r7, pc}
20001434:	20001b84 	andcs	r1, r0, r4, lsl #23

20001438 <ascii_init>:

#include "ascii.h"


void ascii_init(void){
20001438:	b580      	push	{r7, lr}
2000143a:	af00      	add	r7, sp, #0
	//initiera displayen:
		while((ascii_read_status() & 0x80) == 0x80){} 
2000143c:	46c0      	nop			; (mov r8, r8)
2000143e:	f000 f8c8 	bl	200015d2 <ascii_read_status>
20001442:	0003      	movs	r3, r0
20001444:	001a      	movs	r2, r3
20001446:	2380      	movs	r3, #128	; 0x80
20001448:	4013      	ands	r3, r2
2000144a:	2b80      	cmp	r3, #128	; 0x80
2000144c:	d0f7      	beq.n	2000143e <ascii_init+0x6>
		delay_micro(20); 
2000144e:	2014      	movs	r0, #20
20001450:	f7ff f886 	bl	20000560 <delay_micro>
		ascii_write_cmd(0b0000111000); 
20001454:	2038      	movs	r0, #56	; 0x38
20001456:	f000 f87b 	bl	20001550 <ascii_write_cmd>
		delay_micro(100);
2000145a:	2064      	movs	r0, #100	; 0x64
2000145c:	f7ff f880 	bl	20000560 <delay_micro>
		
	//display control:
		while((ascii_read_status() & 0x80) == 0x80){} 
20001460:	46c0      	nop			; (mov r8, r8)
20001462:	f000 f8b6 	bl	200015d2 <ascii_read_status>
20001466:	0003      	movs	r3, r0
20001468:	001a      	movs	r2, r3
2000146a:	2380      	movs	r3, #128	; 0x80
2000146c:	4013      	ands	r3, r2
2000146e:	2b80      	cmp	r3, #128	; 0x80
20001470:	d0f7      	beq.n	20001462 <ascii_init+0x2a>
		delay_micro(20); 
20001472:	2014      	movs	r0, #20
20001474:	f7ff f874 	bl	20000560 <delay_micro>
		ascii_write_cmd(0b000001110); 
20001478:	200e      	movs	r0, #14
2000147a:	f000 f869 	bl	20001550 <ascii_write_cmd>
		delay_micro(100); 
2000147e:	2064      	movs	r0, #100	; 0x64
20001480:	f7ff f86e 	bl	20000560 <delay_micro>
		
	// entry mode set
		while((ascii_read_status() & 0x80) == 0x80){} //Vänta tills displayed är redo
20001484:	46c0      	nop			; (mov r8, r8)
20001486:	f000 f8a4 	bl	200015d2 <ascii_read_status>
2000148a:	0003      	movs	r3, r0
2000148c:	001a      	movs	r2, r3
2000148e:	2380      	movs	r3, #128	; 0x80
20001490:	4013      	ands	r3, r2
20001492:	2b80      	cmp	r3, #128	; 0x80
20001494:	d0f7      	beq.n	20001486 <ascii_init+0x4e>
		delay_micro(20); 
20001496:	2014      	movs	r0, #20
20001498:	f7ff f862 	bl	20000560 <delay_micro>
		ascii_write_cmd(0b000001110); 
2000149c:	200e      	movs	r0, #14
2000149e:	f000 f857 	bl	20001550 <ascii_write_cmd>
		delay_micro(100); 
200014a2:	2064      	movs	r0, #100	; 0x64
200014a4:	f7ff f85c 	bl	20000560 <delay_micro>
		
		*portModer = 0x555555555;
200014a8:	4b02      	ldr	r3, [pc, #8]	; (200014b4 <ascii_init+0x7c>)
200014aa:	4a03      	ldr	r2, [pc, #12]	; (200014b8 <ascii_init+0x80>)
200014ac:	601a      	str	r2, [r3, #0]
	
}
200014ae:	46c0      	nop			; (mov r8, r8)
200014b0:	46bd      	mov	sp, r7
200014b2:	bd80      	pop	{r7, pc}
200014b4:	40021000 	andmi	r1, r2, r0
200014b8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200014bc <ascii_ctrl_bit_set>:

void ascii_ctrl_bit_set(unsigned char x){
200014bc:	b580      	push	{r7, lr}
200014be:	b084      	sub	sp, #16
200014c0:	af00      	add	r7, sp, #0
200014c2:	0002      	movs	r2, r0
200014c4:	1dfb      	adds	r3, r7, #7
200014c6:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och ettställ de bitar som är 1 i x
	unsigned char c;
	c = *portOdrLow;
200014c8:	4a0c      	ldr	r2, [pc, #48]	; (200014fc <ascii_ctrl_bit_set+0x40>)
200014ca:	230f      	movs	r3, #15
200014cc:	18fb      	adds	r3, r7, r3
200014ce:	7812      	ldrb	r2, [r2, #0]
200014d0:	701a      	strb	r2, [r3, #0]
	c |= (B_SELECT | x);
200014d2:	1dfa      	adds	r2, r7, #7
200014d4:	230f      	movs	r3, #15
200014d6:	18fb      	adds	r3, r7, r3
200014d8:	7812      	ldrb	r2, [r2, #0]
200014da:	781b      	ldrb	r3, [r3, #0]
200014dc:	4313      	orrs	r3, r2
200014de:	b2da      	uxtb	r2, r3
200014e0:	230f      	movs	r3, #15
200014e2:	18fb      	adds	r3, r7, r3
200014e4:	2104      	movs	r1, #4
200014e6:	430a      	orrs	r2, r1
200014e8:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
200014ea:	4a04      	ldr	r2, [pc, #16]	; (200014fc <ascii_ctrl_bit_set+0x40>)
200014ec:	230f      	movs	r3, #15
200014ee:	18fb      	adds	r3, r7, r3
200014f0:	781b      	ldrb	r3, [r3, #0]
200014f2:	7013      	strb	r3, [r2, #0]
}
200014f4:	46c0      	nop			; (mov r8, r8)
200014f6:	46bd      	mov	sp, r7
200014f8:	b004      	add	sp, #16
200014fa:	bd80      	pop	{r7, pc}
200014fc:	40021014 	andmi	r1, r2, r4, lsl r0

20001500 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
20001500:	b580      	push	{r7, lr}
20001502:	b084      	sub	sp, #16
20001504:	af00      	add	r7, sp, #0
20001506:	0002      	movs	r2, r0
20001508:	1dfb      	adds	r3, r7, #7
2000150a:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och nollställ de bitar som är 1 i x
	unsigned char c;
	c = *portOdrLow;
2000150c:	4a0f      	ldr	r2, [pc, #60]	; (2000154c <ascii_ctrl_bit_clear+0x4c>)
2000150e:	230f      	movs	r3, #15
20001510:	18fb      	adds	r3, r7, r3
20001512:	7812      	ldrb	r2, [r2, #0]
20001514:	701a      	strb	r2, [r3, #0]
	c = (B_SELECT | c & ~x);
20001516:	1dfb      	adds	r3, r7, #7
20001518:	781b      	ldrb	r3, [r3, #0]
2000151a:	b25b      	sxtb	r3, r3
2000151c:	43db      	mvns	r3, r3
2000151e:	b25b      	sxtb	r3, r3
20001520:	220f      	movs	r2, #15
20001522:	18ba      	adds	r2, r7, r2
20001524:	7812      	ldrb	r2, [r2, #0]
20001526:	b252      	sxtb	r2, r2
20001528:	4013      	ands	r3, r2
2000152a:	b25b      	sxtb	r3, r3
2000152c:	2204      	movs	r2, #4
2000152e:	4313      	orrs	r3, r2
20001530:	b25a      	sxtb	r2, r3
20001532:	230f      	movs	r3, #15
20001534:	18fb      	adds	r3, r7, r3
20001536:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20001538:	4a04      	ldr	r2, [pc, #16]	; (2000154c <ascii_ctrl_bit_clear+0x4c>)
2000153a:	230f      	movs	r3, #15
2000153c:	18fb      	adds	r3, r7, r3
2000153e:	781b      	ldrb	r3, [r3, #0]
20001540:	7013      	strb	r3, [r2, #0]
}
20001542:	46c0      	nop			; (mov r8, r8)
20001544:	46bd      	mov	sp, r7
20001546:	b004      	add	sp, #16
20001548:	bd80      	pop	{r7, pc}
2000154a:	46c0      	nop			; (mov r8, r8)
2000154c:	40021014 	andmi	r1, r2, r4, lsl r0

20001550 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20001550:	b580      	push	{r7, lr}
20001552:	b082      	sub	sp, #8
20001554:	af00      	add	r7, sp, #0
20001556:	0002      	movs	r2, r0
20001558:	1dfb      	adds	r3, r7, #7
2000155a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
2000155c:	2001      	movs	r0, #1
2000155e:	f7ff ffcf 	bl	20001500 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20001562:	2002      	movs	r0, #2
20001564:	f7ff ffcc 	bl	20001500 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20001568:	1dfb      	adds	r3, r7, #7
2000156a:	781b      	ldrb	r3, [r3, #0]
2000156c:	0018      	movs	r0, r3
2000156e:	f000 f885 	bl	2000167c <ascii_write_controller>
}
20001572:	46c0      	nop			; (mov r8, r8)
20001574:	46bd      	mov	sp, r7
20001576:	b002      	add	sp, #8
20001578:	bd80      	pop	{r7, pc}

2000157a <ascii_write_data>:

void ascii_write_data(unsigned char data){
2000157a:	b580      	push	{r7, lr}
2000157c:	b082      	sub	sp, #8
2000157e:	af00      	add	r7, sp, #0
20001580:	0002      	movs	r2, r0
20001582:	1dfb      	adds	r3, r7, #7
20001584:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20001586:	2001      	movs	r0, #1
20001588:	f7ff ff98 	bl	200014bc <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
2000158c:	2002      	movs	r0, #2
2000158e:	f7ff ffb7 	bl	20001500 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20001592:	1dfb      	adds	r3, r7, #7
20001594:	781b      	ldrb	r3, [r3, #0]
20001596:	0018      	movs	r0, r3
20001598:	f000 f870 	bl	2000167c <ascii_write_controller>
}
2000159c:	46c0      	nop			; (mov r8, r8)
2000159e:	46bd      	mov	sp, r7
200015a0:	b002      	add	sp, #8
200015a2:	bd80      	pop	{r7, pc}

200015a4 <clear_disp>:

void clear_disp()
{
200015a4:	b580      	push	{r7, lr}
200015a6:	af00      	add	r7, sp, #0
	while ((ascii_read_status() & 0x80)==0x80){}
200015a8:	46c0      	nop			; (mov r8, r8)
200015aa:	f000 f812 	bl	200015d2 <ascii_read_status>
200015ae:	0003      	movs	r3, r0
200015b0:	001a      	movs	r2, r3
200015b2:	2380      	movs	r3, #128	; 0x80
200015b4:	4013      	ands	r3, r2
200015b6:	2b80      	cmp	r3, #128	; 0x80
200015b8:	d0f7      	beq.n	200015aa <clear_disp+0x6>
	
	delay_micro(80);
200015ba:	2050      	movs	r0, #80	; 0x50
200015bc:	f7fe ffd0 	bl	20000560 <delay_micro>
	ascii_write_cmd(1);
200015c0:	2001      	movs	r0, #1
200015c2:	f7ff ffc5 	bl	20001550 <ascii_write_cmd>
	delay_milli(200);
200015c6:	20c8      	movs	r0, #200	; 0xc8
200015c8:	f7fe ffe0 	bl	2000058c <delay_milli>
}
200015cc:	46c0      	nop			; (mov r8, r8)
200015ce:	46bd      	mov	sp, r7
200015d0:	bd80      	pop	{r7, pc}

200015d2 <ascii_read_status>:

unsigned char ascii_read_status(void){
200015d2:	b590      	push	{r4, r7, lr}
200015d4:	b083      	sub	sp, #12
200015d6:	af00      	add	r7, sp, #0
	//sätt Port E bit15-8 som ingångar
	*portModer &= 0x0000FFFF;
200015d8:	4b11      	ldr	r3, [pc, #68]	; (20001620 <ascii_read_status+0x4e>)
200015da:	4a11      	ldr	r2, [pc, #68]	; (20001620 <ascii_read_status+0x4e>)
200015dc:	6812      	ldr	r2, [r2, #0]
200015de:	0412      	lsls	r2, r2, #16
200015e0:	0c12      	lsrs	r2, r2, #16
200015e2:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
200015e4:	2001      	movs	r0, #1
200015e6:	f7ff ff8b 	bl	20001500 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
200015ea:	2002      	movs	r0, #2
200015ec:	f7ff ff66 	bl	200014bc <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
200015f0:	1dfc      	adds	r4, r7, #7
200015f2:	f000 f85b 	bl	200016ac <ascii_read_controller>
200015f6:	0003      	movs	r3, r0
200015f8:	7023      	strb	r3, [r4, #0]
	//sätt Port E bit15-8 som utgångar
	*portModer &= 0x0000FFFF;
200015fa:	4b09      	ldr	r3, [pc, #36]	; (20001620 <ascii_read_status+0x4e>)
200015fc:	4a08      	ldr	r2, [pc, #32]	; (20001620 <ascii_read_status+0x4e>)
200015fe:	6812      	ldr	r2, [r2, #0]
20001600:	0412      	lsls	r2, r2, #16
20001602:	0c12      	lsrs	r2, r2, #16
20001604:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
20001606:	4b06      	ldr	r3, [pc, #24]	; (20001620 <ascii_read_status+0x4e>)
20001608:	4a05      	ldr	r2, [pc, #20]	; (20001620 <ascii_read_status+0x4e>)
2000160a:	6812      	ldr	r2, [r2, #0]
2000160c:	4905      	ldr	r1, [pc, #20]	; (20001624 <ascii_read_status+0x52>)
2000160e:	430a      	orrs	r2, r1
20001610:	601a      	str	r2, [r3, #0]
	return rv;
20001612:	1dfb      	adds	r3, r7, #7
20001614:	781b      	ldrb	r3, [r3, #0]
}
20001616:	0018      	movs	r0, r3
20001618:	46bd      	mov	sp, r7
2000161a:	b003      	add	sp, #12
2000161c:	bd90      	pop	{r4, r7, pc}
2000161e:	46c0      	nop			; (mov r8, r8)
20001620:	40021000 	andmi	r1, r2, r0
20001624:	55550000 	ldrbpl	r0, [r5, #-0]

20001628 <ascii_read_data>:

unsigned char ascii_read_data(void){
20001628:	b590      	push	{r4, r7, lr}
2000162a:	b083      	sub	sp, #12
2000162c:	af00      	add	r7, sp, #0
	//sätt Port E bit15-8 som ingångar
	*portModer &= 0x0000FFFF;
2000162e:	4b11      	ldr	r3, [pc, #68]	; (20001674 <ascii_read_data+0x4c>)
20001630:	4a10      	ldr	r2, [pc, #64]	; (20001674 <ascii_read_data+0x4c>)
20001632:	6812      	ldr	r2, [r2, #0]
20001634:	0412      	lsls	r2, r2, #16
20001636:	0c12      	lsrs	r2, r2, #16
20001638:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
2000163a:	2001      	movs	r0, #1
2000163c:	f7ff ff3e 	bl	200014bc <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20001640:	2002      	movs	r0, #2
20001642:	f7ff ff3b 	bl	200014bc <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20001646:	1dfc      	adds	r4, r7, #7
20001648:	f000 f830 	bl	200016ac <ascii_read_controller>
2000164c:	0003      	movs	r3, r0
2000164e:	7023      	strb	r3, [r4, #0]
	//sätt Port E bit15-8 som utgångar
	*portModer &= 0x0000FFFF;
20001650:	4b08      	ldr	r3, [pc, #32]	; (20001674 <ascii_read_data+0x4c>)
20001652:	4a08      	ldr	r2, [pc, #32]	; (20001674 <ascii_read_data+0x4c>)
20001654:	6812      	ldr	r2, [r2, #0]
20001656:	0412      	lsls	r2, r2, #16
20001658:	0c12      	lsrs	r2, r2, #16
2000165a:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
2000165c:	4b05      	ldr	r3, [pc, #20]	; (20001674 <ascii_read_data+0x4c>)
2000165e:	4a05      	ldr	r2, [pc, #20]	; (20001674 <ascii_read_data+0x4c>)
20001660:	6812      	ldr	r2, [r2, #0]
20001662:	4905      	ldr	r1, [pc, #20]	; (20001678 <ascii_read_data+0x50>)
20001664:	430a      	orrs	r2, r1
20001666:	601a      	str	r2, [r3, #0]
	return rv;
20001668:	1dfb      	adds	r3, r7, #7
2000166a:	781b      	ldrb	r3, [r3, #0]
}
2000166c:	0018      	movs	r0, r3
2000166e:	46bd      	mov	sp, r7
20001670:	b003      	add	sp, #12
20001672:	bd90      	pop	{r4, r7, pc}
20001674:	40021000 	andmi	r1, r2, r0
20001678:	55550000 	ldrbpl	r0, [r5, #-0]

2000167c <ascii_write_controller>:

void ascii_write_controller(unsigned char c){
2000167c:	b580      	push	{r7, lr}
2000167e:	b082      	sub	sp, #8
20001680:	af00      	add	r7, sp, #0
20001682:	0002      	movs	r2, r0
20001684:	1dfb      	adds	r3, r7, #7
20001686:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
20001688:	2040      	movs	r0, #64	; 0x40
2000168a:	f7ff ff17 	bl	200014bc <ascii_ctrl_bit_set>
	*portOdrHigh = c;
2000168e:	4a06      	ldr	r2, [pc, #24]	; (200016a8 <ascii_write_controller+0x2c>)
20001690:	1dfb      	adds	r3, r7, #7
20001692:	781b      	ldrb	r3, [r3, #0]
20001694:	7013      	strb	r3, [r2, #0]
	delay_250ns();
20001696:	f7fe ff39 	bl	2000050c <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
2000169a:	2040      	movs	r0, #64	; 0x40
2000169c:	f7ff ff30 	bl	20001500 <ascii_ctrl_bit_clear>
}
200016a0:	46c0      	nop			; (mov r8, r8)
200016a2:	46bd      	mov	sp, r7
200016a4:	b002      	add	sp, #8
200016a6:	bd80      	pop	{r7, pc}
200016a8:	40021015 	andmi	r1, r2, r5, lsl r0

200016ac <ascii_read_controller>:

unsigned char ascii_read_controller(void){
200016ac:	b580      	push	{r7, lr}
200016ae:	b082      	sub	sp, #8
200016b0:	af00      	add	r7, sp, #0
	unsigned char c;
	ascii_ctrl_bit_set(B_E);
200016b2:	2040      	movs	r0, #64	; 0x40
200016b4:	f7ff ff02 	bl	200014bc <ascii_ctrl_bit_set>
	delay_250ns();
200016b8:	f7fe ff28 	bl	2000050c <delay_250ns>
	delay_250ns();
200016bc:	f7fe ff26 	bl	2000050c <delay_250ns>
	c = *portIdrHigh;
200016c0:	4a06      	ldr	r2, [pc, #24]	; (200016dc <ascii_read_controller+0x30>)
200016c2:	1dfb      	adds	r3, r7, #7
200016c4:	7812      	ldrb	r2, [r2, #0]
200016c6:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
200016c8:	2040      	movs	r0, #64	; 0x40
200016ca:	f7ff ff19 	bl	20001500 <ascii_ctrl_bit_clear>
	return c;
200016ce:	1dfb      	adds	r3, r7, #7
200016d0:	781b      	ldrb	r3, [r3, #0]
}
200016d2:	0018      	movs	r0, r3
200016d4:	46bd      	mov	sp, r7
200016d6:	b002      	add	sp, #8
200016d8:	bd80      	pop	{r7, pc}
200016da:	46c0      	nop			; (mov r8, r8)
200016dc:	40021011 	andmi	r1, r2, r1, lsl r0

200016e0 <ascii_write_char>:

void ascii_write_char(unsigned char c){
200016e0:	b580      	push	{r7, lr}
200016e2:	b082      	sub	sp, #8
200016e4:	af00      	add	r7, sp, #0
200016e6:	0002      	movs	r2, r0
200016e8:	1dfb      	adds	r3, r7, #7
200016ea:	701a      	strb	r2, [r3, #0]
		while((ascii_read_status() & 0x80) == 0x80){} 
200016ec:	46c0      	nop			; (mov r8, r8)
200016ee:	f7ff ff70 	bl	200015d2 <ascii_read_status>
200016f2:	0003      	movs	r3, r0
200016f4:	001a      	movs	r2, r3
200016f6:	2380      	movs	r3, #128	; 0x80
200016f8:	4013      	ands	r3, r2
200016fa:	2b80      	cmp	r3, #128	; 0x80
200016fc:	d0f7      	beq.n	200016ee <ascii_write_char+0xe>
		delay_micro(8); 
200016fe:	2008      	movs	r0, #8
20001700:	f7fe ff2e 	bl	20000560 <delay_micro>
		ascii_write_data(c);
20001704:	1dfb      	adds	r3, r7, #7
20001706:	781b      	ldrb	r3, [r3, #0]
20001708:	0018      	movs	r0, r3
2000170a:	f7ff ff36 	bl	2000157a <ascii_write_data>
		delay_micro(50); 
2000170e:	2032      	movs	r0, #50	; 0x32
20001710:	f7fe ff26 	bl	20000560 <delay_micro>
}
20001714:	46c0      	nop			; (mov r8, r8)
20001716:	46bd      	mov	sp, r7
20001718:	b002      	add	sp, #8
2000171a:	bd80      	pop	{r7, pc}

2000171c <ascii_write_string>:


void ascii_write_string(char* s)
{
2000171c:	b580      	push	{r7, lr}
2000171e:	b082      	sub	sp, #8
20001720:	af00      	add	r7, sp, #0
20001722:	6078      	str	r0, [r7, #4]
	clear_disp();
20001724:	f7ff ff3e 	bl	200015a4 <clear_disp>
	ascii_goToXY(1,1);
20001728:	2101      	movs	r1, #1
2000172a:	2001      	movs	r0, #1
2000172c:	f000 f810 	bl	20001750 <ascii_goToXY>
	while(*s){
20001730:	e006      	b.n	20001740 <ascii_write_string+0x24>
				ascii_write_char(*s++);
20001732:	687b      	ldr	r3, [r7, #4]
20001734:	1c5a      	adds	r2, r3, #1
20001736:	607a      	str	r2, [r7, #4]
20001738:	781b      	ldrb	r3, [r3, #0]
2000173a:	0018      	movs	r0, r3
2000173c:	f7ff ffd0 	bl	200016e0 <ascii_write_char>
	while(*s){
20001740:	687b      	ldr	r3, [r7, #4]
20001742:	781b      	ldrb	r3, [r3, #0]
20001744:	2b00      	cmp	r3, #0
20001746:	d1f4      	bne.n	20001732 <ascii_write_string+0x16>
	}
}
20001748:	46c0      	nop			; (mov r8, r8)
2000174a:	46bd      	mov	sp, r7
2000174c:	b002      	add	sp, #8
2000174e:	bd80      	pop	{r7, pc}

20001750 <ascii_goToXY>:

void ascii_goToXY(unsigned char row, unsigned char column){
20001750:	b580      	push	{r7, lr}
20001752:	b084      	sub	sp, #16
20001754:	af00      	add	r7, sp, #0
20001756:	0002      	movs	r2, r0
20001758:	1dfb      	adds	r3, r7, #7
2000175a:	701a      	strb	r2, [r3, #0]
2000175c:	1dbb      	adds	r3, r7, #6
2000175e:	1c0a      	adds	r2, r1, #0
20001760:	701a      	strb	r2, [r3, #0]
	unsigned char address = row-1;
20001762:	230f      	movs	r3, #15
20001764:	18fb      	adds	r3, r7, r3
20001766:	1dfa      	adds	r2, r7, #7
20001768:	7812      	ldrb	r2, [r2, #0]
2000176a:	3a01      	subs	r2, #1
2000176c:	701a      	strb	r2, [r3, #0]
	if(column == 2){
2000176e:	1dbb      	adds	r3, r7, #6
20001770:	781b      	ldrb	r3, [r3, #0]
20001772:	2b02      	cmp	r3, #2
20001774:	d106      	bne.n	20001784 <ascii_goToXY+0x34>
		address += 0x40;
20001776:	230f      	movs	r3, #15
20001778:	18fb      	adds	r3, r7, r3
2000177a:	220f      	movs	r2, #15
2000177c:	18ba      	adds	r2, r7, r2
2000177e:	7812      	ldrb	r2, [r2, #0]
20001780:	3240      	adds	r2, #64	; 0x40
20001782:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | address);
20001784:	230f      	movs	r3, #15
20001786:	18fb      	adds	r3, r7, r3
20001788:	781b      	ldrb	r3, [r3, #0]
2000178a:	2280      	movs	r2, #128	; 0x80
2000178c:	4252      	negs	r2, r2
2000178e:	4313      	orrs	r3, r2
20001790:	b2db      	uxtb	r3, r3
20001792:	0018      	movs	r0, r3
20001794:	f7ff fedc 	bl	20001550 <ascii_write_cmd>
}
20001798:	46c0      	nop			; (mov r8, r8)
2000179a:	46bd      	mov	sp, r7
2000179c:	b004      	add	sp, #16
2000179e:	bd80      	pop	{r7, pc}

200017a0 <ascii_write_long>:


void ascii_write_long(long val)
{
200017a0:	b580      	push	{r7, lr}
200017a2:	b084      	sub	sp, #16
200017a4:	af00      	add	r7, sp, #0
200017a6:	6078      	str	r0, [r7, #4]
	ascii_goToXY(1,2);
200017a8:	2102      	movs	r1, #2
200017aa:	2001      	movs	r0, #1
200017ac:	f7ff ffd0 	bl	20001750 <ascii_goToXY>
	
	if (val==0)
200017b0:	687b      	ldr	r3, [r7, #4]
200017b2:	2b00      	cmp	r3, #0
200017b4:	d103      	bne.n	200017be <ascii_write_long+0x1e>
	{
		ascii_write_char('0');
200017b6:	2030      	movs	r0, #48	; 0x30
200017b8:	f7ff ff92 	bl	200016e0 <ascii_write_char>
		return;
200017bc:	e03a      	b.n	20001834 <ascii_write_long+0x94>
	}
	long power = 10000000;
200017be:	4b1f      	ldr	r3, [pc, #124]	; (2000183c <ascii_write_long+0x9c>)
200017c0:	60fb      	str	r3, [r7, #12]
	
	char res;
	while (!(res =val/power)){power/=10;}
200017c2:	e006      	b.n	200017d2 <ascii_write_long+0x32>
200017c4:	68fb      	ldr	r3, [r7, #12]
200017c6:	210a      	movs	r1, #10
200017c8:	0018      	movs	r0, r3
200017ca:	f000 f8c3 	bl	20001954 <__divsi3>
200017ce:	0003      	movs	r3, r0
200017d0:	60fb      	str	r3, [r7, #12]
200017d2:	68f9      	ldr	r1, [r7, #12]
200017d4:	6878      	ldr	r0, [r7, #4]
200017d6:	f000 f8bd 	bl	20001954 <__divsi3>
200017da:	0003      	movs	r3, r0
200017dc:	001a      	movs	r2, r3
200017de:	230b      	movs	r3, #11
200017e0:	18fb      	adds	r3, r7, r3
200017e2:	701a      	strb	r2, [r3, #0]
200017e4:	230b      	movs	r3, #11
200017e6:	18fb      	adds	r3, r7, r3
200017e8:	781b      	ldrb	r3, [r3, #0]
200017ea:	2b00      	cmp	r3, #0
200017ec:	d0ea      	beq.n	200017c4 <ascii_write_long+0x24>
		
	while(power)
200017ee:	e01e      	b.n	2000182e <ascii_write_long+0x8e>
	{
		res = val/power;
200017f0:	68f9      	ldr	r1, [r7, #12]
200017f2:	6878      	ldr	r0, [r7, #4]
200017f4:	f000 f8ae 	bl	20001954 <__divsi3>
200017f8:	0003      	movs	r3, r0
200017fa:	001a      	movs	r2, r3
200017fc:	230b      	movs	r3, #11
200017fe:	18fb      	adds	r3, r7, r3
20001800:	701a      	strb	r2, [r3, #0]
		ascii_write_char(res+'0');
20001802:	230b      	movs	r3, #11
20001804:	18fb      	adds	r3, r7, r3
20001806:	781b      	ldrb	r3, [r3, #0]
20001808:	3330      	adds	r3, #48	; 0x30
2000180a:	b2db      	uxtb	r3, r3
2000180c:	0018      	movs	r0, r3
2000180e:	f7ff ff67 	bl	200016e0 <ascii_write_char>
		val=val%power;
20001812:	687b      	ldr	r3, [r7, #4]
20001814:	68f9      	ldr	r1, [r7, #12]
20001816:	0018      	movs	r0, r3
20001818:	f000 f982 	bl	20001b20 <__aeabi_idivmod>
2000181c:	000b      	movs	r3, r1
2000181e:	607b      	str	r3, [r7, #4]
		power/=10;
20001820:	68fb      	ldr	r3, [r7, #12]
20001822:	210a      	movs	r1, #10
20001824:	0018      	movs	r0, r3
20001826:	f000 f895 	bl	20001954 <__divsi3>
2000182a:	0003      	movs	r3, r0
2000182c:	60fb      	str	r3, [r7, #12]
	while(power)
2000182e:	68fb      	ldr	r3, [r7, #12]
20001830:	2b00      	cmp	r3, #0
20001832:	d1dd      	bne.n	200017f0 <ascii_write_long+0x50>
	}
	
	
	
20001834:	46bd      	mov	sp, r7
20001836:	b004      	add	sp, #16
20001838:	bd80      	pop	{r7, pc}
2000183a:	46c0      	nop			; (mov r8, r8)
2000183c:	00989680 	addseq	r9, r8, r0, lsl #13

20001840 <__udivsi3>:
20001840:	2200      	movs	r2, #0
20001842:	0843      	lsrs	r3, r0, #1
20001844:	428b      	cmp	r3, r1
20001846:	d374      	bcc.n	20001932 <__udivsi3+0xf2>
20001848:	0903      	lsrs	r3, r0, #4
2000184a:	428b      	cmp	r3, r1
2000184c:	d35f      	bcc.n	2000190e <__udivsi3+0xce>
2000184e:	0a03      	lsrs	r3, r0, #8
20001850:	428b      	cmp	r3, r1
20001852:	d344      	bcc.n	200018de <__udivsi3+0x9e>
20001854:	0b03      	lsrs	r3, r0, #12
20001856:	428b      	cmp	r3, r1
20001858:	d328      	bcc.n	200018ac <__udivsi3+0x6c>
2000185a:	0c03      	lsrs	r3, r0, #16
2000185c:	428b      	cmp	r3, r1
2000185e:	d30d      	bcc.n	2000187c <__udivsi3+0x3c>
20001860:	22ff      	movs	r2, #255	; 0xff
20001862:	0209      	lsls	r1, r1, #8
20001864:	ba12      	rev	r2, r2
20001866:	0c03      	lsrs	r3, r0, #16
20001868:	428b      	cmp	r3, r1
2000186a:	d302      	bcc.n	20001872 <__udivsi3+0x32>
2000186c:	1212      	asrs	r2, r2, #8
2000186e:	0209      	lsls	r1, r1, #8
20001870:	d065      	beq.n	2000193e <__udivsi3+0xfe>
20001872:	0b03      	lsrs	r3, r0, #12
20001874:	428b      	cmp	r3, r1
20001876:	d319      	bcc.n	200018ac <__udivsi3+0x6c>
20001878:	e000      	b.n	2000187c <__udivsi3+0x3c>
2000187a:	0a09      	lsrs	r1, r1, #8
2000187c:	0bc3      	lsrs	r3, r0, #15
2000187e:	428b      	cmp	r3, r1
20001880:	d301      	bcc.n	20001886 <__udivsi3+0x46>
20001882:	03cb      	lsls	r3, r1, #15
20001884:	1ac0      	subs	r0, r0, r3
20001886:	4152      	adcs	r2, r2
20001888:	0b83      	lsrs	r3, r0, #14
2000188a:	428b      	cmp	r3, r1
2000188c:	d301      	bcc.n	20001892 <__udivsi3+0x52>
2000188e:	038b      	lsls	r3, r1, #14
20001890:	1ac0      	subs	r0, r0, r3
20001892:	4152      	adcs	r2, r2
20001894:	0b43      	lsrs	r3, r0, #13
20001896:	428b      	cmp	r3, r1
20001898:	d301      	bcc.n	2000189e <__udivsi3+0x5e>
2000189a:	034b      	lsls	r3, r1, #13
2000189c:	1ac0      	subs	r0, r0, r3
2000189e:	4152      	adcs	r2, r2
200018a0:	0b03      	lsrs	r3, r0, #12
200018a2:	428b      	cmp	r3, r1
200018a4:	d301      	bcc.n	200018aa <__udivsi3+0x6a>
200018a6:	030b      	lsls	r3, r1, #12
200018a8:	1ac0      	subs	r0, r0, r3
200018aa:	4152      	adcs	r2, r2
200018ac:	0ac3      	lsrs	r3, r0, #11
200018ae:	428b      	cmp	r3, r1
200018b0:	d301      	bcc.n	200018b6 <__udivsi3+0x76>
200018b2:	02cb      	lsls	r3, r1, #11
200018b4:	1ac0      	subs	r0, r0, r3
200018b6:	4152      	adcs	r2, r2
200018b8:	0a83      	lsrs	r3, r0, #10
200018ba:	428b      	cmp	r3, r1
200018bc:	d301      	bcc.n	200018c2 <__udivsi3+0x82>
200018be:	028b      	lsls	r3, r1, #10
200018c0:	1ac0      	subs	r0, r0, r3
200018c2:	4152      	adcs	r2, r2
200018c4:	0a43      	lsrs	r3, r0, #9
200018c6:	428b      	cmp	r3, r1
200018c8:	d301      	bcc.n	200018ce <__udivsi3+0x8e>
200018ca:	024b      	lsls	r3, r1, #9
200018cc:	1ac0      	subs	r0, r0, r3
200018ce:	4152      	adcs	r2, r2
200018d0:	0a03      	lsrs	r3, r0, #8
200018d2:	428b      	cmp	r3, r1
200018d4:	d301      	bcc.n	200018da <__udivsi3+0x9a>
200018d6:	020b      	lsls	r3, r1, #8
200018d8:	1ac0      	subs	r0, r0, r3
200018da:	4152      	adcs	r2, r2
200018dc:	d2cd      	bcs.n	2000187a <__udivsi3+0x3a>
200018de:	09c3      	lsrs	r3, r0, #7
200018e0:	428b      	cmp	r3, r1
200018e2:	d301      	bcc.n	200018e8 <__udivsi3+0xa8>
200018e4:	01cb      	lsls	r3, r1, #7
200018e6:	1ac0      	subs	r0, r0, r3
200018e8:	4152      	adcs	r2, r2
200018ea:	0983      	lsrs	r3, r0, #6
200018ec:	428b      	cmp	r3, r1
200018ee:	d301      	bcc.n	200018f4 <__udivsi3+0xb4>
200018f0:	018b      	lsls	r3, r1, #6
200018f2:	1ac0      	subs	r0, r0, r3
200018f4:	4152      	adcs	r2, r2
200018f6:	0943      	lsrs	r3, r0, #5
200018f8:	428b      	cmp	r3, r1
200018fa:	d301      	bcc.n	20001900 <__udivsi3+0xc0>
200018fc:	014b      	lsls	r3, r1, #5
200018fe:	1ac0      	subs	r0, r0, r3
20001900:	4152      	adcs	r2, r2
20001902:	0903      	lsrs	r3, r0, #4
20001904:	428b      	cmp	r3, r1
20001906:	d301      	bcc.n	2000190c <__udivsi3+0xcc>
20001908:	010b      	lsls	r3, r1, #4
2000190a:	1ac0      	subs	r0, r0, r3
2000190c:	4152      	adcs	r2, r2
2000190e:	08c3      	lsrs	r3, r0, #3
20001910:	428b      	cmp	r3, r1
20001912:	d301      	bcc.n	20001918 <__udivsi3+0xd8>
20001914:	00cb      	lsls	r3, r1, #3
20001916:	1ac0      	subs	r0, r0, r3
20001918:	4152      	adcs	r2, r2
2000191a:	0883      	lsrs	r3, r0, #2
2000191c:	428b      	cmp	r3, r1
2000191e:	d301      	bcc.n	20001924 <__udivsi3+0xe4>
20001920:	008b      	lsls	r3, r1, #2
20001922:	1ac0      	subs	r0, r0, r3
20001924:	4152      	adcs	r2, r2
20001926:	0843      	lsrs	r3, r0, #1
20001928:	428b      	cmp	r3, r1
2000192a:	d301      	bcc.n	20001930 <__udivsi3+0xf0>
2000192c:	004b      	lsls	r3, r1, #1
2000192e:	1ac0      	subs	r0, r0, r3
20001930:	4152      	adcs	r2, r2
20001932:	1a41      	subs	r1, r0, r1
20001934:	d200      	bcs.n	20001938 <__udivsi3+0xf8>
20001936:	4601      	mov	r1, r0
20001938:	4152      	adcs	r2, r2
2000193a:	4610      	mov	r0, r2
2000193c:	4770      	bx	lr
2000193e:	e7ff      	b.n	20001940 <__udivsi3+0x100>
20001940:	b501      	push	{r0, lr}
20001942:	2000      	movs	r0, #0
20001944:	f000 f8f0 	bl	20001b28 <__aeabi_idiv0>
20001948:	bd02      	pop	{r1, pc}
2000194a:	46c0      	nop			; (mov r8, r8)

2000194c <__aeabi_uidivmod>:
2000194c:	2900      	cmp	r1, #0
2000194e:	d0f7      	beq.n	20001940 <__udivsi3+0x100>
20001950:	e776      	b.n	20001840 <__udivsi3>
20001952:	4770      	bx	lr

20001954 <__divsi3>:
20001954:	4603      	mov	r3, r0
20001956:	430b      	orrs	r3, r1
20001958:	d47f      	bmi.n	20001a5a <__divsi3+0x106>
2000195a:	2200      	movs	r2, #0
2000195c:	0843      	lsrs	r3, r0, #1
2000195e:	428b      	cmp	r3, r1
20001960:	d374      	bcc.n	20001a4c <__divsi3+0xf8>
20001962:	0903      	lsrs	r3, r0, #4
20001964:	428b      	cmp	r3, r1
20001966:	d35f      	bcc.n	20001a28 <__divsi3+0xd4>
20001968:	0a03      	lsrs	r3, r0, #8
2000196a:	428b      	cmp	r3, r1
2000196c:	d344      	bcc.n	200019f8 <__divsi3+0xa4>
2000196e:	0b03      	lsrs	r3, r0, #12
20001970:	428b      	cmp	r3, r1
20001972:	d328      	bcc.n	200019c6 <__divsi3+0x72>
20001974:	0c03      	lsrs	r3, r0, #16
20001976:	428b      	cmp	r3, r1
20001978:	d30d      	bcc.n	20001996 <__divsi3+0x42>
2000197a:	22ff      	movs	r2, #255	; 0xff
2000197c:	0209      	lsls	r1, r1, #8
2000197e:	ba12      	rev	r2, r2
20001980:	0c03      	lsrs	r3, r0, #16
20001982:	428b      	cmp	r3, r1
20001984:	d302      	bcc.n	2000198c <__divsi3+0x38>
20001986:	1212      	asrs	r2, r2, #8
20001988:	0209      	lsls	r1, r1, #8
2000198a:	d065      	beq.n	20001a58 <__divsi3+0x104>
2000198c:	0b03      	lsrs	r3, r0, #12
2000198e:	428b      	cmp	r3, r1
20001990:	d319      	bcc.n	200019c6 <__divsi3+0x72>
20001992:	e000      	b.n	20001996 <__divsi3+0x42>
20001994:	0a09      	lsrs	r1, r1, #8
20001996:	0bc3      	lsrs	r3, r0, #15
20001998:	428b      	cmp	r3, r1
2000199a:	d301      	bcc.n	200019a0 <__divsi3+0x4c>
2000199c:	03cb      	lsls	r3, r1, #15
2000199e:	1ac0      	subs	r0, r0, r3
200019a0:	4152      	adcs	r2, r2
200019a2:	0b83      	lsrs	r3, r0, #14
200019a4:	428b      	cmp	r3, r1
200019a6:	d301      	bcc.n	200019ac <__divsi3+0x58>
200019a8:	038b      	lsls	r3, r1, #14
200019aa:	1ac0      	subs	r0, r0, r3
200019ac:	4152      	adcs	r2, r2
200019ae:	0b43      	lsrs	r3, r0, #13
200019b0:	428b      	cmp	r3, r1
200019b2:	d301      	bcc.n	200019b8 <__divsi3+0x64>
200019b4:	034b      	lsls	r3, r1, #13
200019b6:	1ac0      	subs	r0, r0, r3
200019b8:	4152      	adcs	r2, r2
200019ba:	0b03      	lsrs	r3, r0, #12
200019bc:	428b      	cmp	r3, r1
200019be:	d301      	bcc.n	200019c4 <__divsi3+0x70>
200019c0:	030b      	lsls	r3, r1, #12
200019c2:	1ac0      	subs	r0, r0, r3
200019c4:	4152      	adcs	r2, r2
200019c6:	0ac3      	lsrs	r3, r0, #11
200019c8:	428b      	cmp	r3, r1
200019ca:	d301      	bcc.n	200019d0 <__divsi3+0x7c>
200019cc:	02cb      	lsls	r3, r1, #11
200019ce:	1ac0      	subs	r0, r0, r3
200019d0:	4152      	adcs	r2, r2
200019d2:	0a83      	lsrs	r3, r0, #10
200019d4:	428b      	cmp	r3, r1
200019d6:	d301      	bcc.n	200019dc <__divsi3+0x88>
200019d8:	028b      	lsls	r3, r1, #10
200019da:	1ac0      	subs	r0, r0, r3
200019dc:	4152      	adcs	r2, r2
200019de:	0a43      	lsrs	r3, r0, #9
200019e0:	428b      	cmp	r3, r1
200019e2:	d301      	bcc.n	200019e8 <__divsi3+0x94>
200019e4:	024b      	lsls	r3, r1, #9
200019e6:	1ac0      	subs	r0, r0, r3
200019e8:	4152      	adcs	r2, r2
200019ea:	0a03      	lsrs	r3, r0, #8
200019ec:	428b      	cmp	r3, r1
200019ee:	d301      	bcc.n	200019f4 <__divsi3+0xa0>
200019f0:	020b      	lsls	r3, r1, #8
200019f2:	1ac0      	subs	r0, r0, r3
200019f4:	4152      	adcs	r2, r2
200019f6:	d2cd      	bcs.n	20001994 <__divsi3+0x40>
200019f8:	09c3      	lsrs	r3, r0, #7
200019fa:	428b      	cmp	r3, r1
200019fc:	d301      	bcc.n	20001a02 <__divsi3+0xae>
200019fe:	01cb      	lsls	r3, r1, #7
20001a00:	1ac0      	subs	r0, r0, r3
20001a02:	4152      	adcs	r2, r2
20001a04:	0983      	lsrs	r3, r0, #6
20001a06:	428b      	cmp	r3, r1
20001a08:	d301      	bcc.n	20001a0e <__divsi3+0xba>
20001a0a:	018b      	lsls	r3, r1, #6
20001a0c:	1ac0      	subs	r0, r0, r3
20001a0e:	4152      	adcs	r2, r2
20001a10:	0943      	lsrs	r3, r0, #5
20001a12:	428b      	cmp	r3, r1
20001a14:	d301      	bcc.n	20001a1a <__divsi3+0xc6>
20001a16:	014b      	lsls	r3, r1, #5
20001a18:	1ac0      	subs	r0, r0, r3
20001a1a:	4152      	adcs	r2, r2
20001a1c:	0903      	lsrs	r3, r0, #4
20001a1e:	428b      	cmp	r3, r1
20001a20:	d301      	bcc.n	20001a26 <__divsi3+0xd2>
20001a22:	010b      	lsls	r3, r1, #4
20001a24:	1ac0      	subs	r0, r0, r3
20001a26:	4152      	adcs	r2, r2
20001a28:	08c3      	lsrs	r3, r0, #3
20001a2a:	428b      	cmp	r3, r1
20001a2c:	d301      	bcc.n	20001a32 <__divsi3+0xde>
20001a2e:	00cb      	lsls	r3, r1, #3
20001a30:	1ac0      	subs	r0, r0, r3
20001a32:	4152      	adcs	r2, r2
20001a34:	0883      	lsrs	r3, r0, #2
20001a36:	428b      	cmp	r3, r1
20001a38:	d301      	bcc.n	20001a3e <__divsi3+0xea>
20001a3a:	008b      	lsls	r3, r1, #2
20001a3c:	1ac0      	subs	r0, r0, r3
20001a3e:	4152      	adcs	r2, r2
20001a40:	0843      	lsrs	r3, r0, #1
20001a42:	428b      	cmp	r3, r1
20001a44:	d301      	bcc.n	20001a4a <__divsi3+0xf6>
20001a46:	004b      	lsls	r3, r1, #1
20001a48:	1ac0      	subs	r0, r0, r3
20001a4a:	4152      	adcs	r2, r2
20001a4c:	1a41      	subs	r1, r0, r1
20001a4e:	d200      	bcs.n	20001a52 <__divsi3+0xfe>
20001a50:	4601      	mov	r1, r0
20001a52:	4152      	adcs	r2, r2
20001a54:	4610      	mov	r0, r2
20001a56:	4770      	bx	lr
20001a58:	e05d      	b.n	20001b16 <__divsi3+0x1c2>
20001a5a:	0fca      	lsrs	r2, r1, #31
20001a5c:	d000      	beq.n	20001a60 <__divsi3+0x10c>
20001a5e:	4249      	negs	r1, r1
20001a60:	1003      	asrs	r3, r0, #32
20001a62:	d300      	bcc.n	20001a66 <__divsi3+0x112>
20001a64:	4240      	negs	r0, r0
20001a66:	4053      	eors	r3, r2
20001a68:	2200      	movs	r2, #0
20001a6a:	469c      	mov	ip, r3
20001a6c:	0903      	lsrs	r3, r0, #4
20001a6e:	428b      	cmp	r3, r1
20001a70:	d32d      	bcc.n	20001ace <__divsi3+0x17a>
20001a72:	0a03      	lsrs	r3, r0, #8
20001a74:	428b      	cmp	r3, r1
20001a76:	d312      	bcc.n	20001a9e <__divsi3+0x14a>
20001a78:	22fc      	movs	r2, #252	; 0xfc
20001a7a:	0189      	lsls	r1, r1, #6
20001a7c:	ba12      	rev	r2, r2
20001a7e:	0a03      	lsrs	r3, r0, #8
20001a80:	428b      	cmp	r3, r1
20001a82:	d30c      	bcc.n	20001a9e <__divsi3+0x14a>
20001a84:	0189      	lsls	r1, r1, #6
20001a86:	1192      	asrs	r2, r2, #6
20001a88:	428b      	cmp	r3, r1
20001a8a:	d308      	bcc.n	20001a9e <__divsi3+0x14a>
20001a8c:	0189      	lsls	r1, r1, #6
20001a8e:	1192      	asrs	r2, r2, #6
20001a90:	428b      	cmp	r3, r1
20001a92:	d304      	bcc.n	20001a9e <__divsi3+0x14a>
20001a94:	0189      	lsls	r1, r1, #6
20001a96:	d03a      	beq.n	20001b0e <__divsi3+0x1ba>
20001a98:	1192      	asrs	r2, r2, #6
20001a9a:	e000      	b.n	20001a9e <__divsi3+0x14a>
20001a9c:	0989      	lsrs	r1, r1, #6
20001a9e:	09c3      	lsrs	r3, r0, #7
20001aa0:	428b      	cmp	r3, r1
20001aa2:	d301      	bcc.n	20001aa8 <__divsi3+0x154>
20001aa4:	01cb      	lsls	r3, r1, #7
20001aa6:	1ac0      	subs	r0, r0, r3
20001aa8:	4152      	adcs	r2, r2
20001aaa:	0983      	lsrs	r3, r0, #6
20001aac:	428b      	cmp	r3, r1
20001aae:	d301      	bcc.n	20001ab4 <__divsi3+0x160>
20001ab0:	018b      	lsls	r3, r1, #6
20001ab2:	1ac0      	subs	r0, r0, r3
20001ab4:	4152      	adcs	r2, r2
20001ab6:	0943      	lsrs	r3, r0, #5
20001ab8:	428b      	cmp	r3, r1
20001aba:	d301      	bcc.n	20001ac0 <__divsi3+0x16c>
20001abc:	014b      	lsls	r3, r1, #5
20001abe:	1ac0      	subs	r0, r0, r3
20001ac0:	4152      	adcs	r2, r2
20001ac2:	0903      	lsrs	r3, r0, #4
20001ac4:	428b      	cmp	r3, r1
20001ac6:	d301      	bcc.n	20001acc <__divsi3+0x178>
20001ac8:	010b      	lsls	r3, r1, #4
20001aca:	1ac0      	subs	r0, r0, r3
20001acc:	4152      	adcs	r2, r2
20001ace:	08c3      	lsrs	r3, r0, #3
20001ad0:	428b      	cmp	r3, r1
20001ad2:	d301      	bcc.n	20001ad8 <__divsi3+0x184>
20001ad4:	00cb      	lsls	r3, r1, #3
20001ad6:	1ac0      	subs	r0, r0, r3
20001ad8:	4152      	adcs	r2, r2
20001ada:	0883      	lsrs	r3, r0, #2
20001adc:	428b      	cmp	r3, r1
20001ade:	d301      	bcc.n	20001ae4 <__divsi3+0x190>
20001ae0:	008b      	lsls	r3, r1, #2
20001ae2:	1ac0      	subs	r0, r0, r3
20001ae4:	4152      	adcs	r2, r2
20001ae6:	d2d9      	bcs.n	20001a9c <__divsi3+0x148>
20001ae8:	0843      	lsrs	r3, r0, #1
20001aea:	428b      	cmp	r3, r1
20001aec:	d301      	bcc.n	20001af2 <__divsi3+0x19e>
20001aee:	004b      	lsls	r3, r1, #1
20001af0:	1ac0      	subs	r0, r0, r3
20001af2:	4152      	adcs	r2, r2
20001af4:	1a41      	subs	r1, r0, r1
20001af6:	d200      	bcs.n	20001afa <__divsi3+0x1a6>
20001af8:	4601      	mov	r1, r0
20001afa:	4663      	mov	r3, ip
20001afc:	4152      	adcs	r2, r2
20001afe:	105b      	asrs	r3, r3, #1
20001b00:	4610      	mov	r0, r2
20001b02:	d301      	bcc.n	20001b08 <__divsi3+0x1b4>
20001b04:	4240      	negs	r0, r0
20001b06:	2b00      	cmp	r3, #0
20001b08:	d500      	bpl.n	20001b0c <__divsi3+0x1b8>
20001b0a:	4249      	negs	r1, r1
20001b0c:	4770      	bx	lr
20001b0e:	4663      	mov	r3, ip
20001b10:	105b      	asrs	r3, r3, #1
20001b12:	d300      	bcc.n	20001b16 <__divsi3+0x1c2>
20001b14:	4240      	negs	r0, r0
20001b16:	b501      	push	{r0, lr}
20001b18:	2000      	movs	r0, #0
20001b1a:	f000 f805 	bl	20001b28 <__aeabi_idiv0>
20001b1e:	bd02      	pop	{r1, pc}

20001b20 <__aeabi_idivmod>:
20001b20:	2900      	cmp	r1, #0
20001b22:	d0f8      	beq.n	20001b16 <__divsi3+0x1c2>
20001b24:	e716      	b.n	20001954 <__divsi3>
20001b26:	4770      	bx	lr

20001b28 <__aeabi_idiv0>:
20001b28:	4770      	bx	lr
20001b2a:	46c0      	nop			; (mov r8, r8)

20001b2c <TICKS__>:
20001b2c:	00000000 	andeq	r0, r0, r0

20001b30 <game>:
	...

20001b80 <bit>:
20001b80:	00000000 	andeq	r0, r0, r0

20001b84 <lfsr>:
20001b84:	00000000 	andeq	r0, r0, r0

20001b88 <backBuffer>:
	...

20001f88 <tile_0_bits.4215>:
20001f88:	8001ffff 	strdhi	pc, [r1], -pc	; <UNPREDICTABLE>
20001f8c:	80018001 	andhi	r8, r1, r1
20001f90:	80018001 	andhi	r8, r1, r1
20001f94:	80018001 	andhi	r8, r1, r1
20001f98:	80018001 	andhi	r8, r1, r1
20001f9c:	80018001 	andhi	r8, r1, r1
20001fa0:	80018001 	andhi	r8, r1, r1
20001fa4:	ffff8001 			; <UNDEFINED> instruction: 0xffff8001

20001fa8 <tile_2_bits.4216>:
20001fa8:	8001ffff 	strdhi	pc, [r1], -pc	; <UNPREDICTABLE>
20001fac:	80018001 	andhi	r8, r1, r1
20001fb0:	80018001 	andhi	r8, r1, r1
20001fb4:	80018001 	andhi	r8, r1, r1
20001fb8:	9e018001 	cdpls	0, 0, cr8, cr1, cr1, {0}
20001fbc:	9e019001 	cdpls	0, 0, cr9, cr1, cr1, {0}
20001fc0:	9e018201 	cdpls	2, 0, cr8, cr1, cr1, {0}
20001fc4:	ffff8001 			; <UNDEFINED> instruction: 0xffff8001

20001fc8 <tile_4_bits.4217>:
20001fc8:	8001ffff 	strdhi	pc, [r1], -pc	; <UNPREDICTABLE>
20001fcc:	80018001 	andhi	r8, r1, r1
20001fd0:	80018001 	andhi	r8, r1, r1
20001fd4:	80018001 	andhi	r8, r1, r1
20001fd8:	92018001 	andls	r8, r1, #1
20001fdc:	9e019201 	cdpls	2, 0, cr9, cr1, cr1, {0}
20001fe0:	90019001 	andls	r9, r1, r1
20001fe4:	ffff8001 			; <UNDEFINED> instruction: 0xffff8001

20001fe8 <tile_8_bits.4218>:
20001fe8:	8001ffff 	strdhi	pc, [r1], -pc	; <UNPREDICTABLE>
20001fec:	80018001 	andhi	r8, r1, r1
20001ff0:	bc9d8001 	ldclt	0, cr8, [sp], {1}
20001ff4:	9809a551 	stmdals	r9, {r0, r4, r6, r8, sl, sp, pc}
20001ff8:	bc1da405 	cfldrslt	mvf10, [sp], {5}
20001ffc:	80018001 	andhi	r8, r1, r1
20002000:	80018001 	andhi	r8, r1, r1
20002004:	ffff8001 			; <UNDEFINED> instruction: 0xffff8001

20002008 <tile_16_bits.4219>:
20002008:	8001ffff 	strdhi	pc, [r1], -pc	; <UNPREDICTABLE>
2000200c:	80018001 	andhi	r8, r1, r1
20002010:	80018001 	andhi	r8, r1, r1
20002014:	80018001 	andhi	r8, r1, r1
20002018:	9e418001 	cdpls	0, 4, cr8, cr1, cr1, {0}
2000201c:	9e418241 	cdpls	2, 4, cr8, cr1, cr1, {2}
20002020:	9e419241 	cdpls	2, 4, cr9, cr1, cr1, {2}
20002024:	ffff8001 			; <UNDEFINED> instruction: 0xffff8001

20002028 <tile_32_bits.4220>:
20002028:	8001ffff 	strdhi	pc, [r1], -pc	; <UNPREDICTABLE>
2000202c:	80018001 	andhi	r8, r1, r1
20002030:	80018001 	andhi	r8, r1, r1
20002034:	80018001 	andhi	r8, r1, r1
20002038:	9e798001 	cdpls	0, 7, cr8, cr9, cr1, {0}
2000203c:	9e719041 	cdpls	0, 7, cr9, cr1, cr1, {2}
20002040:	9e798241 	cdpls	2, 7, cr8, cr9, cr1, {2}
20002044:	ffff8001 			; <UNDEFINED> instruction: 0xffff8001

20002048 <tile_64_bits.4221>:
20002048:	8001ffff 	strdhi	pc, [r1], -pc	; <UNPREDICTABLE>
2000204c:	80018001 	andhi	r8, r1, r1
20002050:	80018001 	andhi	r8, r1, r1
20002054:	80018001 	andhi	r8, r1, r1
20002058:	92798001 	rsbsls	r8, r9, #1
2000205c:	9e799209 	cdpls	2, 7, cr9, cr9, cr9, {0}
20002060:	90799049 	rsbsls	r9, r9, r9, asr #32
20002064:	ffff8001 			; <UNDEFINED> instruction: 0xffff8001

20002068 <tile_128_bits.4222>:
20002068:	8001ffff 	strdhi	pc, [r1], -pc	; <UNPREDICTABLE>
2000206c:	90019001 	andls	r9, r1, r1
20002070:	90019001 	andls	r9, r1, r1
20002074:	80019001 	andhi	r9, r1, r1
20002078:	9e798001 	cdpls	0, 7, cr8, cr9, cr1, {0}
2000207c:	9e799241 	cdpls	2, 7, cr9, cr9, cr1, {2}
20002080:	9e799209 	cdpls	2, 7, cr9, cr9, cr9, {0}
20002084:	ffff8001 			; <UNDEFINED> instruction: 0xffff8001

20002088 <tile_256_bits.4223>:
20002088:	8001ffff 	strdhi	pc, [r1], -pc	; <UNPREDICTABLE>
2000208c:	90019e01 	andls	r9, r1, r1, lsl #28
20002090:	82019e01 	andhi	r9, r1, #1, 28
20002094:	80019e01 	andhi	r9, r1, r1, lsl #28
20002098:	9e798001 	cdpls	0, 7, cr8, cr9, cr1, {0}
2000209c:	9e798209 	cdpls	2, 7, cr8, cr9, cr9, {0}
200020a0:	9e799241 	cdpls	2, 7, cr9, cr9, cr1, {2}
200020a4:	ffff8001 			; <UNDEFINED> instruction: 0xffff8001

200020a8 <tile_512_bits.4224>:
200020a8:	8001ffff 	strdhi	pc, [r1], -pc	; <UNPREDICTABLE>
200020ac:	82019e01 	andhi	r9, r1, #1, 28
200020b0:	90019e01 	andls	r9, r1, r1, lsl #28
200020b4:	80019e01 	andhi	r9, r1, r1, lsl #28
200020b8:	9e418001 	cdpls	0, 4, cr8, cr1, cr1, {0}
200020bc:	9e419041 	cdpls	0, 4, cr9, cr1, cr1, {2}
200020c0:	9e418241 	cdpls	2, 4, cr8, cr1, cr1, {2}
200020c4:	ffff8001 			; <UNDEFINED> instruction: 0xffff8001

200020c8 <tile_1024_bits.4225>:
200020c8:	8001ffff 	strdhi	pc, [r1], -pc	; <UNPREDICTABLE>
200020cc:	92419e41 	subls	r9, r1, #1040	; 0x410
200020d0:	92419241 	subls	r9, r1, #268435460	; 0x10000004
200020d4:	80019e41 	andhi	r9, r1, r1, asr #28
200020d8:	92798001 	rsbsls	r8, r9, #1
200020dc:	9e799241 	cdpls	2, 7, cr9, cr9, cr1, {2}
200020e0:	90799009 	rsbsls	r9, r9, r9
200020e4:	ffff8001 			; <UNDEFINED> instruction: 0xffff8001

200020e8 <tile_2048_bits.4226>:
200020e8:	8001ffff 	strdhi	pc, [r1], -pc	; <UNPREDICTABLE>
200020ec:	92419e79 	subls	r9, r1, #1936	; 0x790
200020f0:	92099279 	andls	r9, r9, #-1879048185	; 0x90000007
200020f4:	80019e79 	andhi	r9, r1, r9, ror lr
200020f8:	9e498001 	cdpls	0, 4, cr8, cr9, cr1, {0}
200020fc:	9e799249 	cdpls	2, 7, cr9, cr9, cr9, {2}
20002100:	9e419241 	cdpls	2, 4, cr9, cr1, cr1, {2}
20002104:	ffff8001 			; <UNDEFINED> instruction: 0xffff8001

20002108 <game_over_bits.4255>:
	...
20002180:	03c03f80 	biceq	r3, r0, #128, 30	; 0x200
20002184:	0ff8f01e 	svceq	0x00f8f01e
20002188:	03c07fe0 	biceq	r7, r0, #224, 30	; 0x380
2000218c:	0ff8f01e 	svceq	0x00f8f01e
20002190:	07e040f0 			; <UNDEFINED> instruction: 0x07e040f0
20002194:	0038f83e 	eorseq	pc, r8, lr, lsr r8	; <UNPREDICTABLE>
20002198:	06600070 			; <UNDEFINED> instruction: 0x06600070
2000219c:	0038f83e 	eorseq	pc, r8, lr, lsr r8	; <UNPREDICTABLE>
200021a0:	0e700038 	mrceq	0, 3, r0, cr0, cr8, {1}
200021a4:	0038ec6e 	eorseq	lr, r8, lr, ror #24
200021a8:	0e700038 	mrceq	0, 3, r0, cr0, cr8, {1}
200021ac:	07f8ec6e 	ldrbeq	lr, [r8, lr, ror #24]!
200021b0:	0c30f838 	ldceq	8, cr15, [r0], #-224	; 0xffffff20
200021b4:	07f8eeee 	ldrbeq	lr, [r8, lr, ror #29]!
200021b8:	1c38f838 	ldcne	8, cr15, [r8], #-224	; 0xffffff20
200021bc:	0038e6ce 	eorseq	lr, r8, lr, asr #13
200021c0:	1ff8e038 	svcne	0x00f8e038
200021c4:	0038e7ce 	eorseq	lr, r8, lr, asr #15
200021c8:	3ffce070 	svccc	0x00fce070
200021cc:	0038e38e 	eorseq	lr, r8, lr, lsl #7
200021d0:	381ce0f0 	ldmdacc	ip, {r4, r5, r6, r7, sp, lr, pc}
200021d4:	0038e38e 	eorseq	lr, r8, lr, lsl #7
200021d8:	381cffe0 	ldmdacc	ip, {r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
200021dc:	0ff8e00e 	svceq	0x00f8e00e
200021e0:	700e3f80 	andvc	r3, lr, r0, lsl #31
200021e4:	0ff8e00e 	svceq	0x00f8e00e
	...
20002228:	c0383e00 	eorsgt	r3, r8, r0, lsl #28
2000222c:	007f8ff9 	ldrshteq	r8, [pc], #-249
20002230:	e070ff80 	rsbs	pc, r0, r0, lsl #31
20002234:	00ff8ff8 	ldrshteq	r8, [pc], #248
20002238:	e071e3c0 	rsbs	lr, r1, r0, asr #7
2000223c:	01c38038 	biceq	r8, r3, r8, lsr r0
20002240:	f0f1c1c0 			; <UNDEFINED> instruction: 0xf0f1c1c0
20002244:	01c38038 	biceq	r8, r3, r8, lsr r0
20002248:	70e380e0 	rscvc	r8, r3, r0, ror #1
2000224c:	01c38038 	biceq	r8, r3, r8, lsr r0
20002250:	70e380e0 	rscvc	r8, r3, r0, ror #1
20002254:	01e387f8 	strdeq	r8, [r3, #120]!	; 0x78
20002258:	79e380e0 	stmibvc	r3!, {r5, r6, r7, pc}^
2000225c:	00ff87f8 	ldrshteq	r8, [pc], #120
20002260:	39c380e0 	stmibcc	r3, {r5, r6, r7, pc}^
20002264:	00ff8038 	rscseq	r8, pc, r8, lsr r0	; <UNPREDICTABLE>
20002268:	39c380e0 	stmibcc	r3, {r5, r6, r7, pc}^
2000226c:	00e38038 	rsceq	r8, r3, r8, lsr r0
20002270:	1f81c1c0 	svcne	0x0081c1c0
20002274:	01c38038 	biceq	r8, r3, r8, lsr r0
20002278:	1f81e3c0 	svcne	0x0081e3c0
2000227c:	03c38038 	biceq	r8, r3, #56	; 0x38
20002280:	1f80ff80 	svcne	0x0080ff80
20002284:	03838ff8 	orreq	r8, r3, #248, 30	; 0x3e0
20002288:	0f003e00 	svceq	0x00003e00
2000228c:	07838ff8 			; <UNDEFINED> instruction: 0x07838ff8
	...
20002308:	77617244 	strbvc	r7, [r1, -r4, asr #4]!
2000230c:	00676e69 	rsbeq	r6, r7, r9, ror #28
20002310:	656e6f44 	strbvs	r6, [lr, #-3908]!	; 0xfffff0bc
20002314:	00000000 	andeq	r0, r0, r0
20002318:	20756f59 	rsbscs	r6, r5, r9, asr pc
2000231c:	216e6f77 	smccs	59127	; 0xe6f7
20002320:	00000000 	andeq	r0, r0, r0
20002324:	20756f59 	rsbscs	r6, r5, r9, asr pc
20002328:	74736f6c 	ldrbtvc	r6, [r3], #-3948	; 0xfffff094
2000232c:	00000021 	andeq	r0, r0, r1, lsr #32
20002330:	200007ce 	andcs	r0, r0, lr, asr #15
20002334:	200007ae 	andcs	r0, r0, lr, lsr #15
20002338:	200007b6 			; <UNDEFINED> instruction: 0x200007b6
2000233c:	200007be 			; <UNDEFINED> instruction: 0x200007be
20002340:	200007c6 	andcs	r0, r0, r6, asr #15
20002344:	0a030201 	beq	200c2b50 <values+0xc07fc>
20002348:	0b060504 	bleq	20183760 <values+0x18140c>
2000234c:	0c090807 	stceq	8, cr0, [r9], {7}
20002350:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20002320 <game_over_bits.4255+0x218>

20002354 <values>:
20002354:	00000000 	andeq	r0, r0, r0
20002358:	00000002 	andeq	r0, r0, r2
2000235c:	00000004 	andeq	r0, r0, r4
20002360:	00000008 	andeq	r0, r0, r8
20002364:	00000010 	andeq	r0, r0, r0, lsl r0
20002368:	00000020 	andeq	r0, r0, r0, lsr #32
2000236c:	00000040 	andeq	r0, r0, r0, asr #32
20002370:	00000080 	andeq	r0, r0, r0, lsl #1
20002374:	00000100 	andeq	r0, r0, r0, lsl #2
20002378:	00000200 	andeq	r0, r0, r0, lsl #4
2000237c:	00000400 	andeq	r0, r0, r0, lsl #8
20002380:	00000800 	andeq	r0, r0, r0, lsl #16
20002384:	2000116c 	andcs	r1, r0, ip, ror #2
20002388:	20001170 	andcs	r1, r0, r0, ror r1
2000238c:	20001174 	andcs	r1, r0, r4, ror r1
20002390:	20001178 	andcs	r1, r0, r8, ror r1
20002394:	2000117c 	andcs	r1, r0, ip, ror r1
20002398:	20001180 	andcs	r1, r0, r0, lsl #3
2000239c:	20001184 	andcs	r1, r0, r4, lsl #3
200023a0:	20001188 	andcs	r1, r0, r8, lsl #3
200023a4:	2000118c 	andcs	r1, r0, ip, lsl #3
200023a8:	20001190 	mulcs	r0, r0, r1
200023ac:	20001194 	mulcs	r0, r4, r1
200023b0:	20001198 	mulcs	r0, r8, r1

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000154 	andeq	r0, r0, r4, asr r1
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000005f 	andeq	r0, r0, pc, asr r0
      10:	00000a0c 	andeq	r0, r0, ip, lsl #20
	...
      20:	00fc0200 	rscseq	r0, ip, r0, lsl #4
      24:	02500000 	subseq	r0, r0, #0
      28:	00006a0d 	andeq	r6, r0, sp, lsl #20
      2c:	003d0300 	eorseq	r0, sp, r0, lsl #6
      30:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
      34:	0000006a 	andeq	r0, r0, sl, rrx
      38:	01410300 	mrseq	r0, (UNDEF: 113)
      3c:	0f020000 	svceq	0x00020000
      40:	00000087 	andeq	r0, r0, r7, lsl #1
      44:	014c0340 	cmpeq	ip, r0, asr #6
      48:	10020000 	andne	r0, r2, r0
      4c:	0000008e 	andeq	r0, r0, lr, lsl #1
      50:	01610344 	cmneq	r1, r4, asr #6
      54:	11020000 	mrsne	r0, (UNDEF: 2)
      58:	0000008e 	andeq	r0, r0, lr, lsl #1
      5c:	00500348 	subseq	r0, r0, r8, asr #6
      60:	12020000 	andne	r0, r2, #0
      64:	00000087 	andeq	r0, r0, r7, lsl #1
      68:	8704004c 	strhi	r0, [r4, -ip, asr #32]
      6c:	80000000 	andhi	r0, r0, r0
      70:	05000000 	streq	r0, [r0, #-0]
      74:	00000080 	andeq	r0, r0, r0, lsl #1
      78:	00800503 	addeq	r0, r0, r3, lsl #10
      7c:	00030000 	andeq	r0, r3, r0
      80:	58070406 	stmdapl	r7, {r1, r2, sl}
      84:	07000001 	streq	r0, [r0, -r1]
      88:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
      8c:	04060074 	streq	r0, [r6], #-116	; 0xffffff8c
      90:	00010f05 	andeq	r0, r1, r5, lsl #30
      94:	00f70800 	rscseq	r0, r7, r0, lsl #16
      98:	13020000 	movwne	r0, #8192	; 0x2000
      9c:	00000021 	andeq	r0, r0, r1, lsr #32
      a0:	1b300305 	blne	c00cbc <startup-0x1f3ff344>
      a4:	21082000 	mrscs	r2, (UNDEF: 8)
      a8:	03000001 	movweq	r0, #1
      ac:	0000b709 	andeq	fp, r0, r9, lsl #14
      b0:	84030500 	strhi	r0, [r3], #-1280	; 0xfffffb00
      b4:	0620001b 			; <UNDEFINED> instruction: 0x0620001b
      b8:	012e0702 			; <UNDEFINED> instruction: 0x012e0702
      bc:	62090000 	andvs	r0, r9, #0
      c0:	03007469 	movweq	r7, #1129	; 0x469
      c4:	0000cf0a 	andeq	ip, r0, sl, lsl #30
      c8:	80030500 	andhi	r0, r3, r0, lsl #10
      cc:	0620001b 			; <UNDEFINED> instruction: 0x0620001b
      d0:	01340704 	teqeq	r4, r4, lsl #14
      d4:	180a0000 	stmdane	sl, {}	; <UNPREDICTABLE>
      d8:	01000001 	tsteq	r0, r1
      dc:	00011881 	andeq	r1, r1, r1, lsl #17
      e0:	00002e20 	andeq	r2, r0, r0, lsr #28
      e4:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
      e8:	0b000000 	bleq	f0 <startup-0x1fffff10>
      ec:	00000171 	andeq	r0, r0, r1, ror r1
      f0:	00878901 	addeq	r8, r7, r1, lsl #18
      f4:	000c0000 	andeq	r0, ip, r0
      f8:	00000d00 	andeq	r0, r0, r0, lsl #26
      fc:	72010000 	andvc	r0, r1, #0
     100:	200000f4 	strdcs	r0, [r0], -r4
     104:	00000024 	andeq	r0, r0, r4, lsr #32
     108:	470d9c01 	strmi	r9, [sp, -r1, lsl #24]
     10c:	01000000 	mrseq	r0, (UNDEF: 0)
     110:	0000d06b 	andeq	sp, r0, fp, rrx
     114:	00002420 	andeq	r2, r0, r0, lsr #8
     118:	0e9c0100 	fmleqe	f0, f4, f0
     11c:	00000042 	andeq	r0, r0, r2, asr #32
     120:	00102201 	andseq	r2, r0, r1, lsl #4
     124:	00c02000 	sbceq	r2, r0, r0
     128:	9c010000 	stcls	0, cr0, [r1], {-0}
     12c:	0000013f 	andeq	r0, r0, pc, lsr r1
     130:	6c61760f 	stclvs	6, cr7, [r1], #-60	; 0xffffffc4
     134:	3f2c0100 	svccc	0x002c0100
     138:	02000001 	andeq	r0, r0, #1
     13c:	06006f91 			; <UNDEFINED> instruction: 0x06006f91
     140:	027e0801 	rsbseq	r0, lr, #65536	; 0x10000
     144:	26100000 	ldrcs	r0, [r0], -r0
     148:	01000001 	tsteq	r0, r1
     14c:	00000013 	andeq	r0, r0, r3, lsl r0
     150:	00000c20 	andeq	r0, r0, r0, lsr #24
     154:	009c0100 	addseq	r0, ip, r0, lsl #2
     158:	00000373 	andeq	r0, r0, r3, ror r3
     15c:	00ff0004 	rscseq	r0, pc, r4
     160:	01040000 	mrseq	r0, (UNDEF: 4)
     164:	0000005f 	andeq	r0, r0, pc, asr r0
     168:	0001e40c 	andeq	lr, r1, ip, lsl #8
     16c:	00014800 	andeq	r4, r1, r0, lsl #16
     170:	00060c20 	andeq	r0, r6, r0, lsr #24
     174:	0000cd00 	andeq	ip, r0, r0, lsl #26
     178:	00390200 	eorseq	r0, r9, r0, lsl #4
     17c:	00320000 	eorseq	r0, r2, r0
     180:	32030000 	andcc	r0, r3, #0
     184:	ff000000 			; <UNDEFINED> instruction: 0xff000000
     188:	04040003 	streq	r0, [r4], #-3
     18c:	00015807 	andeq	r5, r1, r7, lsl #16
     190:	08010400 	stmdaeq	r1, {sl}
     194:	00000275 	andeq	r0, r0, r5, ror r2
     198:	00025a05 	andeq	r5, r2, r5, lsl #20
     19c:	21050100 	mrscs	r0, (UNDEF: 21)
     1a0:	05000000 	streq	r0, [r0, #-0]
     1a4:	001b8803 	andseq	r8, fp, r3, lsl #16
     1a8:	02cb0520 	sbceq	r0, fp, #32, 10	; 0x8000000
     1ac:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
     1b0:	00000062 	andeq	r0, r0, r2, rrx
     1b4:	1b2c0305 	blne	b00dd0 <startup-0x1f4ff230>
     1b8:	02042000 	andeq	r2, r4, #0
     1bc:	00012e07 	andeq	r2, r1, r7, lsl #28
     1c0:	019e0600 	orrseq	r0, lr, r0, lsl #12
     1c4:	06010000 	streq	r0, [r1], -r0
     1c8:	00068401 	andeq	r8, r6, r1, lsl #8
     1cc:	0000d020 	andeq	sp, r0, r0, lsr #32
     1d0:	c39c0100 	orrsgt	r0, ip, #0, 2
     1d4:	07000000 	streq	r0, [r0, -r0]
     1d8:	08010069 	stmdaeq	r1, {r0, r3, r5, r6}
     1dc:	00003901 	andeq	r3, r0, r1, lsl #18
     1e0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     1e4:	01006a07 	tsteq	r0, r7, lsl #20
     1e8:	00390108 	eorseq	r0, r9, r8, lsl #2
     1ec:	91020000 	mrsls	r0, (UNDEF: 2)
     1f0:	05980876 	ldreq	r0, [r8, #2166]	; 0x876
     1f4:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
     1f8:	00003901 	andeq	r3, r0, r1, lsl #18
     1fc:	6f910200 	svcvs	0x00910200
     200:	01006307 	tsteq	r0, r7, lsl #6
     204:	00390108 	eorseq	r0, r9, r8, lsl #2
     208:	91020000 	mrsls	r0, (UNDEF: 2)
     20c:	006b0775 	rsbeq	r0, fp, r5, ror r7
     210:	c3010901 	movwgt	r0, #6401	; 0x1901
     214:	02000000 	andeq	r0, r0, #0
     218:	04007091 	streq	r7, [r0], #-145	; 0xffffff6f
     21c:	01340704 	teqeq	r4, r4, lsl #14
     220:	de090000 	cdple	0, 0, cr0, cr9, cr0, {0}
     224:	01000001 	tsteq	r0, r1
     228:	0005e4f7 	strdeq	lr, [r5], -r7
     22c:	0000a020 	andeq	sl, r0, r0, lsr #32
     230:	149c0100 	ldrne	r0, [ip], #256	; 0x100
     234:	0a000001 	beq	240 <startup-0x1ffffdc0>
     238:	f7010078 			; <UNDEFINED> instruction: 0xf7010078
     23c:	00000114 	andeq	r0, r0, r4, lsl r1
     240:	0a6c9102 	beq	1b24650 <startup-0x1e4db9b0>
     244:	f7010079 			; <UNDEFINED> instruction: 0xf7010079
     248:	00000114 	andeq	r0, r0, r4, lsl r1
     24c:	0b689102 	bleq	1a2465c <startup-0x1e5db9a4>
     250:	00000248 	andeq	r0, r0, r8, asr #4
     254:	0039f901 	eorseq	pc, r9, r1, lsl #18
     258:	91020000 	mrsls	r0, (UNDEF: 2)
     25c:	029d0b73 	addseq	r0, sp, #117760	; 0x1cc00
     260:	fa010000 	blx	40268 <startup-0x1ffbfd98>
     264:	00000114 	andeq	r0, r0, r4, lsl r1
     268:	00749102 	rsbseq	r9, r4, r2, lsl #2
     26c:	6905040c 	stmdbvs	r5, {r2, r3, sl}
     270:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     274:	00000265 	andeq	r0, r0, r5, ror #4
     278:	05aef001 	streq	pc, [lr, #1]!
     27c:	00362000 	eorseq	r2, r6, r0
     280:	9c010000 	stcls	0, cr0, [r1], {-0}
     284:	0000013d 	andeq	r0, r0, sp, lsr r1
     288:	0100690d 	tsteq	r0, sp, lsl #18
     28c:	000114f2 	strdeq	r1, [r1], -r2
     290:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     294:	017c0e00 	cmneq	ip, r0, lsl #28
     298:	e4010000 	str	r0, [r1], #-0
     29c:	2000058c 	andcs	r0, r0, ip, lsl #11
     2a0:	00000022 	andeq	r0, r0, r2, lsr #32
     2a4:	01609c01 	cmneq	r0, r1, lsl #24
     2a8:	6d0a0000 	stcvs	0, cr0, [sl, #-0]
     2ac:	e4010073 	str	r0, [r1], #-115	; 0xffffff8d
     2b0:	000000c3 	andeq	r0, r0, r3, asr #1
     2b4:	00749102 	rsbseq	r9, r4, r2, lsl #2
     2b8:	0002830e 	andeq	r8, r2, lr, lsl #6
     2bc:	60db0100 	sbcsvs	r0, fp, r0, lsl #2
     2c0:	2c200005 	stccs	0, cr0, [r0], #-20	; 0xffffffec
     2c4:	01000000 	mrseq	r0, (UNDEF: 0)
     2c8:	0001839c 	muleq	r1, ip, r3
     2cc:	73750a00 	cmnvc	r5, #0, 20
     2d0:	c3db0100 	bicsgt	r0, fp, #0, 2
     2d4:	02000000 	andeq	r0, r0, #0
     2d8:	0f007491 	svceq	0x00007491
     2dc:	00000229 	andeq	r0, r0, r9, lsr #4
     2e0:	050cd101 	streq	sp, [ip, #-257]	; 0xfffffeff
     2e4:	00542000 	subseq	r2, r4, r0
     2e8:	9c010000 	stcls	0, cr0, [r1], {-0}
     2ec:	0002a309 	andeq	sl, r2, r9, lsl #6
     2f0:	02be0100 	adcseq	r0, lr, #0, 2
     2f4:	0a200005 	beq	800310 <startup-0x1f7ffcf0>
     2f8:	01000000 	mrseq	r0, (UNDEF: 0)
     2fc:	0001bc9c 	muleq	r1, ip, ip
     300:	00691000 	rsbeq	r1, r9, r0
     304:	0039c301 	eorseq	ip, r9, r1, lsl #6
     308:	6a100000 	bvs	400310 <startup-0x1fbffcf0>
     30c:	39c30100 	stmibcc	r3, {r8}^
     310:	00000000 	andeq	r0, r0, r0
     314:	0002b811 	andeq	fp, r2, r1, lsl r8
     318:	bcb40100 	ldflts	f0, [r4]
     31c:	46200004 	strtmi	r0, [r0], -r4
     320:	01000000 	mrseq	r0, (UNDEF: 0)
     324:	0001ee9c 	muleq	r1, ip, lr
     328:	01d31200 	bicseq	r1, r3, r0, lsl #4
     32c:	b4010000 	strlt	r0, [r1], #-0
     330:	00000039 	andeq	r0, r0, r9, lsr r0
     334:	12779102 	rsbsne	r9, r7, #-2147483648	; 0x80000000
     338:	00000598 	muleq	r0, r8, r5
     33c:	0039b401 	eorseq	fp, r9, r1, lsl #8
     340:	91020000 	mrsls	r0, (UNDEF: 2)
     344:	88110076 	ldmdahi	r1, {r1, r2, r4, r5, r6}
     348:	01000001 	tsteq	r0, r1
     34c:	00047cad 	andeq	r7, r4, sp, lsr #25
     350:	00004020 	andeq	r4, r0, r0, lsr #32
     354:	209c0100 	addscs	r0, ip, r0, lsl #2
     358:	12000002 	andne	r0, r0, #2
     35c:	00000196 	muleq	r0, r6, r1
     360:	0039ad01 	eorseq	sl, r9, r1, lsl #26
     364:	91020000 	mrsls	r0, (UNDEF: 2)
     368:	05981277 	ldreq	r1, [r8, #631]	; 0x277
     36c:	ad010000 	stcge	0, cr0, [r1, #-0]
     370:	00000039 	andeq	r0, r0, r9, lsr r0
     374:	00769102 	rsbseq	r9, r6, r2, lsl #2
     378:	00028f11 	andeq	r8, r2, r1, lsl pc
     37c:	06920100 	ldreq	r0, [r2], r0, lsl #2
     380:	76200004 	strtvc	r0, [r0], -r4
     384:	01000000 	mrseq	r0, (UNDEF: 0)
     388:	0002529c 	muleq	r2, ip, r2
     38c:	01d81200 	bicseq	r1, r8, r0, lsl #4
     390:	92010000 	andls	r0, r1, #0
     394:	00000039 	andeq	r0, r0, r9, lsr r0
     398:	12779102 	rsbsne	r9, r7, #-2147483648	; 0x80000000
     39c:	00000598 	muleq	r0, r8, r5
     3a0:	00399201 	eorseq	r9, r9, r1, lsl #4
     3a4:	91020000 	mrsls	r0, (UNDEF: 2)
     3a8:	c6130076 			; <UNDEFINED> instruction: 0xc6130076
     3ac:	01000001 	tsteq	r0, r1
     3b0:	0000398b 	andeq	r3, r0, fp, lsl #19
     3b4:	0003dc00 	andeq	sp, r3, r0, lsl #24
     3b8:	00002a20 	andeq	r2, r0, r0, lsr #20
     3bc:	7a9c0100 	bvc	fe7007c4 <values+0xde6fe470>
     3c0:	12000002 	andne	r0, r0, #2
     3c4:	00000598 	muleq	r0, r8, r5
     3c8:	00398b01 	eorseq	r8, r9, r1, lsl #22
     3cc:	91020000 	mrsls	r0, (UNDEF: 2)
     3d0:	4d130077 	ldcmi	0, cr0, [r3, #-476]	; 0xfffffe24
     3d4:	01000002 	tsteq	r0, r2
     3d8:	00003967 	andeq	r3, r0, r7, ror #18
     3dc:	00034000 	andeq	r4, r3, r0
     3e0:	00009c20 	andeq	r9, r0, r0, lsr #24
     3e4:	ae9c0100 	fmlgee	f0, f4, f0
     3e8:	12000002 	andne	r0, r0, #2
     3ec:	00000598 	muleq	r0, r8, r5
     3f0:	00396701 	eorseq	r6, r9, r1, lsl #14
     3f4:	91020000 	mrsls	r0, (UNDEF: 2)
     3f8:	00630d6f 	rsbeq	r0, r3, pc, ror #26
     3fc:	00396901 	eorseq	r6, r9, r1, lsl #18
     400:	91020000 	mrsls	r0, (UNDEF: 2)
     404:	35110077 	ldrcc	r0, [r1, #-119]	; 0xffffff89
     408:	01000002 	tsteq	r0, r2
     40c:	0002c64a 	andeq	ip, r2, sl, asr #12
     410:	00007a20 	andeq	r7, r0, r0, lsr #20
     414:	d09c0100 	addsle	r0, ip, r0, lsl #2
     418:	0d000002 	stceq	0, cr0, [r0, #-8]
     41c:	4c010063 	stcmi	0, cr0, [r1], {99}	; 0x63
     420:	00000039 	andeq	r0, r0, r9, lsr r0
     424:	00779102 	rsbseq	r9, r7, r2, lsl #2
     428:	0002f214 	andeq	pc, r2, r4, lsl r2	; <UNPREDICTABLE>
     42c:	6a380100 	bvs	e00834 <startup-0x1f1ff7cc>
     430:	5c200002 	stcpl	0, cr0, [r0], #-8
     434:	01000000 	mrseq	r0, (UNDEF: 0)
     438:	0217119c 	andseq	r1, r7, #156, 2	; 0x27
     43c:	23010000 	movwcs	r0, #4096	; 0x1000
     440:	20000210 	andcs	r0, r0, r0, lsl r2
     444:	0000005a 	andeq	r0, r0, sl, asr r0
     448:	03059c01 	movweq	r9, #23553	; 0x5c01
     44c:	98120000 	ldmdals	r2, {}	; <UNPREDICTABLE>
     450:	01000005 	tsteq	r0, r5
     454:	00003923 	andeq	r3, r0, r3, lsr #18
     458:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     45c:	02d31500 	sbcseq	r1, r3, #0, 10
     460:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
     464:	200001b8 			; <UNDEFINED> instruction: 0x200001b8
     468:	00000058 	andeq	r0, r0, r8, asr r0
     46c:	03339c01 	teqeq	r3, #256	; 0x100
     470:	780a0000 	stmdavc	sl, {}	; <UNPREDICTABLE>
     474:	39190100 	ldmdbcc	r9, {r8}
     478:	02000000 	andeq	r0, r0, #0
     47c:	630d6f91 	movwvs	r6, #57233	; 0xdf91
     480:	391b0100 	ldmdbcc	fp, {r8}
     484:	02000000 	andeq	r0, r0, #0
     488:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
     48c:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
     490:	015c1001 	cmpeq	ip, r1
     494:	005c2000 	subseq	r2, ip, r0
     498:	9c010000 	stcls	0, cr0, [r1], {-0}
     49c:	00000361 	andeq	r0, r0, r1, ror #6
     4a0:	0100780a 	tsteq	r0, sl, lsl #16
     4a4:	00003910 	andeq	r3, r0, r0, lsl r9
     4a8:	6f910200 	svcvs	0x00910200
     4ac:	0100630d 	tsteq	r0, sp, lsl #6
     4b0:	00003912 	andeq	r3, r0, r2, lsl r9
     4b4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     4b8:	02e91600 	rsceq	r1, r9, #0, 12
     4bc:	0b010000 	bleq	404c4 <startup-0x1ffbfb3c>
     4c0:	00000062 	andeq	r0, r0, r2, rrx
     4c4:	20000148 	andcs	r0, r0, r8, asr #2
     4c8:	00000014 	andeq	r0, r0, r4, lsl r0
     4cc:	e9009c01 	stmdb	r0, {r0, sl, fp, ip, pc}
     4d0:	04000000 	streq	r0, [r0], #-0
     4d4:	00029100 	andeq	r9, r2, r0, lsl #2
     4d8:	5f010400 	svcpl	0x00010400
     4dc:	0c000000 	stceq	0, cr0, [r0], {-0}
     4e0:	00000320 	andeq	r0, r0, r0, lsr #6
     4e4:	20000754 	andcs	r0, r0, r4, asr r7
     4e8:	00000150 	andeq	r0, r0, r0, asr r1
     4ec:	00000252 	andeq	r0, r0, r2, asr r2
     4f0:	00030502 	andeq	r0, r3, r2, lsl #10
     4f4:	65280100 	strvs	r0, [r8, #-256]!	; 0xffffff00
     4f8:	3c000000 	stccc	0, cr0, [r0], {-0}
     4fc:	68200008 	stmdavs	r0!, {r3}
     500:	01000000 	mrseq	r0, (UNDEF: 0)
     504:	0000659c 	muleq	r0, ip, r5
     508:	656b0300 	strbvs	r0, [fp, #-768]!	; 0xfffffd00
     50c:	2a010079 	bcs	406f8 <startup-0x1ffbf908>
     510:	0000006c 	andeq	r0, r0, ip, rrx
     514:	03589102 	cmpeq	r8, #-2147483648	; 0x80000000
     518:	00776f72 	rsbseq	r6, r7, r2, ror pc
     51c:	00832c01 	addeq	r2, r3, r1, lsl #24
     520:	91020000 	mrsls	r0, (UNDEF: 2)
     524:	6f63036c 	svcvs	0x0063036c
     528:	2c01006c 	stccs	0, cr0, [r1], {108}	; 0x6c
     52c:	00000083 	andeq	r0, r0, r3, lsl #1
     530:	00689102 	rsbeq	r9, r8, r2, lsl #2
     534:	75080104 	strvc	r0, [r8, #-260]	; 0xfffffefc
     538:	05000002 	streq	r0, [r0, #-2]
     53c:	00000065 	andeq	r0, r0, r5, rrx
     540:	0000007c 	andeq	r0, r0, ip, ror r0
     544:	00007c06 	andeq	r7, r0, r6, lsl #24
     548:	04000f00 	streq	r0, [r0], #-3840	; 0xfffff100
     54c:	01580704 	cmpeq	r8, r4, lsl #14
     550:	04070000 	streq	r0, [r7], #-0
     554:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     558:	03160800 	tsteq	r6, #0, 16
     55c:	1a010000 	bne	40564 <startup-0x1ffbfa9c>
     560:	00000083 	andeq	r0, r0, r3, lsl #1
     564:	200007e8 	andcs	r0, r0, r8, ror #15
     568:	00000054 	andeq	r0, r0, r4, asr r0
     56c:	00b09c01 	adcseq	r9, r0, r1, lsl #24
     570:	63030000 	movwvs	r0, #12288	; 0x3000
     574:	651c0100 	ldrvs	r0, [ip, #-256]	; 0xffffff00
     578:	02000000 	andeq	r0, r0, #0
     57c:	09007791 	stmdbeq	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
     580:	0000030a 	andeq	r0, r0, sl, lsl #6
     584:	07940e01 	ldreq	r0, [r4, r1, lsl #28]
     588:	00542000 	subseq	r2, r4, r0
     58c:	9c010000 	stcls	0, cr0, [r1], {-0}
     590:	000000d4 	ldrdeq	r0, [r0], -r4
     594:	776f720a 	strbvc	r7, [pc, -sl, lsl #4]!
     598:	d40e0100 	strle	r0, [lr], #-256	; 0xffffff00
     59c:	02000000 	andeq	r0, r0, #0
     5a0:	04007491 	streq	r7, [r0], #-1169	; 0xfffffb6f
     5a4:	01340704 	teqeq	r4, r4, lsl #14
     5a8:	510b0000 	mrspl	r0, (UNDEF: 11)
     5ac:	01000003 	tsteq	r0, r3
     5b0:	00075403 	andeq	r5, r7, r3, lsl #8
     5b4:	00004020 	andeq	r4, r0, r0, lsr #32
     5b8:	009c0100 	addseq	r0, ip, r0, lsl #2
     5bc:	0000075b 	andeq	r0, r0, fp, asr r7
     5c0:	03530004 	cmpeq	r3, #4
     5c4:	01040000 	mrseq	r0, (UNDEF: 4)
     5c8:	0000005f 	andeq	r0, r0, pc, asr r0
     5cc:	00040d0c 	andeq	r0, r4, ip, lsl #26
     5d0:	0008a400 	andeq	sl, r8, r0, lsl #8
     5d4:	000adc20 	andeq	sp, sl, r0, lsr #24
     5d8:	0002ff00 	andeq	pc, r2, r0, lsl #30
     5dc:	00fc0200 	rscseq	r0, ip, r0, lsl #4
     5e0:	02500000 	subseq	r0, r0, #0
     5e4:	00006a0d 	andeq	r6, r0, sp, lsl #20
     5e8:	003d0300 	eorseq	r0, sp, r0, lsl #6
     5ec:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     5f0:	0000006a 	andeq	r0, r0, sl, rrx
     5f4:	01410300 	mrseq	r0, (UNDEF: 113)
     5f8:	0f020000 	svceq	0x00020000
     5fc:	00000087 	andeq	r0, r0, r7, lsl #1
     600:	014c0340 	cmpeq	ip, r0, asr #6
     604:	10020000 	andne	r0, r2, r0
     608:	0000008e 	andeq	r0, r0, lr, lsl #1
     60c:	01610344 	cmneq	r1, r4, asr #6
     610:	11020000 	mrsne	r0, (UNDEF: 2)
     614:	0000008e 	andeq	r0, r0, lr, lsl #1
     618:	00500348 	subseq	r0, r0, r8, asr #6
     61c:	12020000 	andne	r0, r2, #0
     620:	00000087 	andeq	r0, r0, r7, lsl #1
     624:	8704004c 	strhi	r0, [r4, -ip, asr #32]
     628:	80000000 	andhi	r0, r0, r0
     62c:	05000000 	streq	r0, [r0, #-0]
     630:	00000080 	andeq	r0, r0, r0, lsl #1
     634:	00800503 	addeq	r0, r0, r3, lsl #10
     638:	00030000 	andeq	r0, r3, r0
     63c:	58070406 	stmdapl	r7, {r1, r2, sl}
     640:	07000001 	streq	r0, [r0, -r1]
     644:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     648:	04060074 	streq	r0, [r6], #-116	; 0xffffff8c
     64c:	00010f05 	andeq	r0, r1, r5, lsl #30
     650:	008e0800 	addeq	r0, lr, r0, lsl #16
     654:	f7090000 			; <UNDEFINED> instruction: 0xf7090000
     658:	02000000 	andeq	r0, r0, #0
     65c:	00002113 	andeq	r2, r0, r3, lsl r1
     660:	30030500 	andcc	r0, r3, r0, lsl #10
     664:	0920001b 	stmdbeq	r0!, {r0, r1, r3, r4}
     668:	00000121 	andeq	r0, r0, r1, lsr #2
     66c:	00bc0903 	adcseq	r0, ip, r3, lsl #18
     670:	03050000 	movweq	r0, #20480	; 0x5000
     674:	20001b84 	andcs	r1, r0, r4, lsl #23
     678:	2e070206 	cdpcs	2, 0, cr0, cr7, cr6, {0}
     67c:	0a000001 	beq	688 <startup-0x1ffff978>
     680:	00746962 	rsbseq	r6, r4, r2, ror #18
     684:	00d40a03 	sbcseq	r0, r4, r3, lsl #20
     688:	03050000 	movweq	r0, #20480	; 0x5000
     68c:	20001b80 	andcs	r1, r0, r0, lsl #23
     690:	34070406 	strcc	r0, [r7], #-1030	; 0xfffffbfa
     694:	04000001 	streq	r0, [r0], #-1
     698:	00000095 	muleq	r0, r5, r0
     69c:	000000eb 	andeq	r0, r0, fp, ror #1
     6a0:	00008005 	andeq	r8, r0, r5
     6a4:	08000b00 	stmdaeq	r0, {r8, r9, fp}
     6a8:	000000db 	ldrdeq	r0, [r0], -fp
     6ac:	0004ba09 	andeq	fp, r4, r9, lsl #20
     6b0:	eb0a0100 	bl	280ab8 <startup-0x1fd7f548>
     6b4:	05000000 	streq	r0, [r0, #-0]
     6b8:	00235403 	eoreq	r5, r3, r3, lsl #8
     6bc:	03eb0b20 	mvneq	r0, #32, 22	; 0x8000
     6c0:	2b010000 	blcs	406c8 <startup-0x1ffbf938>
     6c4:	00008e01 	andeq	r8, r0, r1, lsl #28
     6c8:	00136c00 	andseq	r6, r3, r0, lsl #24
     6cc:	00001420 	andeq	r1, r0, r0, lsr #8
     6d0:	0c9c0100 	ldfeqs	f0, [ip], {0}
     6d4:	00000401 	andeq	r0, r0, r1, lsl #8
     6d8:	87012101 	strhi	r2, [r1, -r1, lsl #2]
     6dc:	4c000000 	stcmi	0, cr0, [r0], {-0}
     6e0:	20200013 	eorcs	r0, r0, r3, lsl r0
     6e4:	01000000 	mrseq	r0, (UNDEF: 0)
     6e8:	0001419c 	muleq	r1, ip, r1
     6ec:	65720d00 	ldrbvs	r0, [r2, #-3328]!	; 0xfffff300
     6f0:	23010073 	movwcs	r0, #4211	; 0x1073
     6f4:	00008701 	andeq	r8, r0, r1, lsl #14
     6f8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     6fc:	036e0e00 	cmneq	lr, #0, 28
     700:	fd010000 	stc2	0, cr0, [r1, #-0]
     704:	20001288 	andcs	r1, r0, r8, lsl #5
     708:	000000c4 	andeq	r0, r0, r4, asr #1
     70c:	01fe9c01 	mvnseq	r9, r1, lsl #24
     710:	140f0000 	strne	r0, [pc], #-0	; 718 <startup-0x1ffff8e8>
     714:	04000005 	streq	r0, [r0], #-5
     718:	0001fe03 	andeq	pc, r1, r3, lsl #28
     71c:	08030500 	stmdaeq	r3, {r8, sl}
     720:	0d200021 	stceq	0, cr0, [r0, #-132]!	; 0xffffff7c
     724:	01010078 	tsteq	r1, r8, ror r0
     728:	00008701 	andeq	r8, r0, r1, lsl #14
     72c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     730:	0100790d 	tsteq	r0, sp, lsl #18
     734:	00870102 	addeq	r0, r7, r2, lsl #2
     738:	91020000 	mrsls	r0, (UNDEF: 2)
     73c:	04c11060 	strbeq	r1, [r1], #96	; 0x60
     740:	05010000 	streq	r0, [r1, #-0]
     744:	00008701 	andeq	r8, r0, r1, lsl #14
     748:	5c910200 	lfmpl	f0, 4, [r1], {0}
     74c:	00045e10 	andeq	r5, r4, r0, lsl lr
     750:	01060100 	mrseq	r0, (UNDEF: 22)
     754:	00000087 	andeq	r0, r0, r7, lsl #1
     758:	10589102 	subsne	r9, r8, r2, lsl #2
     75c:	000001d3 	ldrdeq	r0, [r0], -r3
     760:	16010801 	strne	r0, [r1], -r1, lsl #16
     764:	02000002 	andeq	r0, r0, #2
     768:	690d5491 	stmdbvs	sp, {r0, r4, r7, sl, ip, lr}
     76c:	010b0100 	mrseq	r0, (UNDEF: 27)
     770:	00000087 	andeq	r0, r0, r7, lsl #1
     774:	0d749102 	ldfeqp	f1, [r4, #-8]!
     778:	0b01006a 	bleq	40928 <startup-0x1ffbf6d8>
     77c:	00008701 	andeq	r8, r0, r1, lsl #14
     780:	70910200 	addsvc	r0, r1, r0, lsl #4
     784:	01006b0d 	tsteq	r0, sp, lsl #22
     788:	0087010b 	addeq	r0, r7, fp, lsl #2
     78c:	91020000 	mrsls	r0, (UNDEF: 2)
     790:	04c7106c 	strbeq	r1, [r7], #108	; 0x6c
     794:	0b010000 	bleq	4079c <startup-0x1ffbf864>
     798:	00008701 	andeq	r8, r0, r1, lsl #14
     79c:	68910200 	ldmvs	r1, {r9}
     7a0:	0012d011 	andseq	sp, r2, r1, lsl r0
     7a4:	00005420 	andeq	r5, r0, r0, lsr #8
     7a8:	03ca1000 	biceq	r1, sl, #0
     7ac:	17010000 	strne	r0, [r1, -r0]
     7b0:	00020f01 	andeq	r0, r2, r1, lsl #30
     7b4:	53910200 	orrspl	r0, r1, #0, 4
     7b8:	0f040000 	svceq	0x00040000
     7bc:	0f000002 	svceq	0x00000002
     7c0:	12000002 	andne	r0, r0, #2
     7c4:	00000080 	andeq	r0, r0, r0, lsl #1
     7c8:	060001ff 			; <UNDEFINED> instruction: 0x060001ff
     7cc:	02750801 	rsbseq	r0, r5, #65536	; 0x10000
     7d0:	04130000 	ldreq	r0, [r3], #-0
     7d4:	0000020f 	andeq	r0, r0, pc, lsl #4
     7d8:	00036214 	andeq	r6, r3, r4, lsl r2
     7dc:	d8e50100 	stmiale	r5!, {r8}^
     7e0:	b0200011 	eorlt	r0, r0, r1, lsl r0
     7e4:	01000000 	mrseq	r0, (UNDEF: 0)
     7e8:	0002789c 	muleq	r2, ip, r8
     7ec:	6e621500 	cdpvs	5, 6, cr1, cr2, cr0, {0}
     7f0:	87e80100 	strbhi	r0, [r8, r0, lsl #2]!
     7f4:	02000000 	andeq	r0, r0, #0
     7f8:	70156891 	mulsvc	r5, r1, r8
     7fc:	e901006e 	stmdb	r1, {r1, r2, r3, r5, r6}
     800:	00000087 	andeq	r0, r0, r7, lsl #1
     804:	11749102 	cmnne	r4, r2, lsl #2
     808:	20001200 	andcs	r1, r0, r0, lsl #4
     80c:	0000007c 	andeq	r0, r0, ip, ror r0
     810:	01007815 	tsteq	r0, r5, lsl r8
     814:	000087eb 	andeq	r8, r0, fp, ror #15
     818:	70910200 	addsvc	r0, r1, r0, lsl #4
     81c:	00120611 	andseq	r0, r2, r1, lsl r6
     820:	00006820 	andeq	r6, r0, r0, lsr #16
     824:	00791500 	rsbseq	r1, r9, r0, lsl #10
     828:	0087ec01 	addeq	lr, r7, r1, lsl #24
     82c:	91020000 	mrsls	r0, (UNDEF: 2)
     830:	0000006c 	andeq	r0, r0, ip, rrx
     834:	00047016 	andeq	r7, r4, r6, lsl r0
     838:	16ad0100 	strtne	r0, [sp], r0, lsl #2
     83c:	52000002 	andpl	r0, r0, #2
     840:	86200011 			; <UNDEFINED> instruction: 0x86200011
     844:	01000000 	mrseq	r0, (UNDEF: 0)
     848:	00036c9c 	muleq	r3, ip, ip
     84c:	01d81700 	bicseq	r1, r8, r0, lsl #14
     850:	ad010000 	stcge	0, cr0, [r1, #-0]
     854:	00000087 	andeq	r0, r0, r7, lsl #1
     858:	0f749102 	svceq	0x00749102
     85c:	000004d6 	ldrdeq	r0, [r0], -r6
     860:	036c0305 	cmneq	ip, #335544320	; 0x14000000
     864:	03050000 	movweq	r0, #20480	; 0x5000
     868:	20001f88 	andcs	r1, r0, r8, lsl #31
     86c:	0004f00f 	andeq	pc, r4, pc
     870:	6c030600 	stcvs	6, cr0, [r3], {-0}
     874:	05000003 	streq	r0, [r0, #-3]
     878:	001fa803 	andseq	sl, pc, r3, lsl #16
     87c:	03820f20 	orreq	r0, r2, #32, 30	; 0x80
     880:	03070000 	movweq	r0, #28672	; 0x7000
     884:	0000036c 	andeq	r0, r0, ip, ror #6
     888:	1fc80305 	svcne	0x00c80305
     88c:	a50f2000 	strge	r2, [pc, #-0]	; 894 <startup-0x1ffff76c>
     890:	08000003 	stmdaeq	r0, {r0, r1}
     894:	00036c03 	andeq	r6, r3, r3, lsl #24
     898:	e8030500 	stmda	r3, {r8, sl}
     89c:	0f20001f 	svceq	0x0020001f
     8a0:	000004a2 	andeq	r0, r0, r2, lsr #9
     8a4:	036c0309 	cmneq	ip, #603979776	; 0x24000000
     8a8:	03050000 	movweq	r0, #20480	; 0x5000
     8ac:	20002008 	andcs	r2, r0, r8
     8b0:	0004510f 	andeq	r5, r4, pc, lsl #2
     8b4:	6c030a00 			; <UNDEFINED> instruction: 0x6c030a00
     8b8:	05000003 	streq	r0, [r0, #-3]
     8bc:	00202803 	eoreq	r2, r0, r3, lsl #16
     8c0:	03de0f20 	bicseq	r0, lr, #32, 30	; 0x80
     8c4:	030b0000 	movweq	r0, #45056	; 0xb000
     8c8:	0000036c 	andeq	r0, r0, ip, ror #6
     8cc:	20480305 	subcs	r0, r8, r5, lsl #6
     8d0:	e20f2000 	and	r2, pc, #0
     8d4:	0c000004 	stceq	0, cr0, [r0], {4}
     8d8:	00036c03 	andeq	r6, r3, r3, lsl #24
     8dc:	68030500 	stmdavs	r3, {r8, sl}
     8e0:	0f200020 	svceq	0x00200020
     8e4:	0000038e 	andeq	r0, r0, lr, lsl #7
     8e8:	036c030d 	cmneq	ip, #872415232	; 0x34000000
     8ec:	03050000 	movweq	r0, #20480	; 0x5000
     8f0:	20002088 	andcs	r2, r0, r8, lsl #1
     8f4:	0005060f 	andeq	r0, r5, pc, lsl #12
     8f8:	6c030e00 	stcvs	14, cr0, [r3], {-0}
     8fc:	05000003 	streq	r0, [r0, #-3]
     900:	0020a803 	eoreq	sl, r0, r3, lsl #16
     904:	04420f20 	strbeq	r0, [r2], #-3872	; 0xfffff0e0
     908:	030f0000 	movweq	r0, #61440	; 0xf000
     90c:	0000036c 	andeq	r0, r0, ip, ror #6
     910:	20c80305 	sbccs	r0, r8, r5, lsl #6
     914:	cf0f2000 	svcgt	0x000f2000
     918:	10000003 	andne	r0, r0, r3
     91c:	00036c03 	andeq	r6, r3, r3, lsl #24
     920:	e8030500 	stmda	r3, {r8, sl}
     924:	00200020 	eoreq	r0, r0, r0, lsr #32
     928:	00020f04 	andeq	r0, r2, r4, lsl #30
     92c:	00037c00 	andeq	r7, r3, r0, lsl #24
     930:	00800500 	addeq	r0, r0, r0, lsl #10
     934:	001f0000 	andseq	r0, pc, r0
     938:	0003b114 	andeq	fp, r3, r4, lsl r1
     93c:	7c8a0100 	stfvcs	f0, [sl], {0}
     940:	d6200010 			; <UNDEFINED> instruction: 0xd6200010
     944:	01000000 	mrseq	r0, (UNDEF: 0)
     948:	0004489c 	muleq	r4, ip, r8
     94c:	04fc1700 	ldrbteq	r1, [ip], #1792	; 0x700
     950:	8a010000 	bhi	40958 <startup-0x1ffbf6a8>
     954:	00000087 	andeq	r0, r0, r7, lsl #1
     958:	174c9102 	strbne	r9, [ip, -r2, lsl #2]
     95c:	00000501 	andeq	r0, r0, r1, lsl #10
     960:	00878a01 	addeq	r8, r7, r1, lsl #20
     964:	91020000 	mrsls	r0, (UNDEF: 2)
     968:	61761848 	cmnvs	r6, r8, asr #16
     96c:	8a01006c 	bhi	40b24 <startup-0x1ffbf4dc>
     970:	00000087 	andeq	r0, r0, r7, lsl #1
     974:	15449102 	strbne	r9, [r4, #-258]	; 0xfffffefe
     978:	8c010078 	stchi	0, cr0, [r1], {120}	; 0x78
     97c:	00000087 	andeq	r0, r0, r7, lsl #1
     980:	15649102 	strbne	r9, [r4, #-258]!	; 0xfffffefe
     984:	8d010079 	stchi	0, cr0, [r1, #-484]	; 0xfffffe1c
     988:	00000087 	andeq	r0, r0, r7, lsl #1
     98c:	0f609102 	svceq	0x00609102
     990:	000004c1 	andeq	r0, r0, r1, asr #9
     994:	00878f01 	addeq	r8, r7, r1, lsl #30
     998:	91020000 	mrsls	r0, (UNDEF: 2)
     99c:	045e0f5c 	ldrbeq	r0, [lr], #-3932	; 0xfffff0a4
     9a0:	90010000 	andls	r0, r1, r0
     9a4:	00000087 	andeq	r0, r0, r7, lsl #1
     9a8:	0f589102 	svceq	0x00589102
     9ac:	000001d3 	ldrdeq	r0, [r0], -r3
     9b0:	02169201 	andseq	r9, r6, #268435456	; 0x10000000
     9b4:	91020000 	mrsls	r0, (UNDEF: 2)
     9b8:	00691554 	rsbeq	r1, r9, r4, asr r5
     9bc:	00879501 	addeq	r9, r7, r1, lsl #10
     9c0:	91020000 	mrsls	r0, (UNDEF: 2)
     9c4:	006a1574 	rsbeq	r1, sl, r4, ror r5
     9c8:	00879501 	addeq	r9, r7, r1, lsl #10
     9cc:	91020000 	mrsls	r0, (UNDEF: 2)
     9d0:	006b1570 	rsbeq	r1, fp, r0, ror r5
     9d4:	00879501 	addeq	r9, r7, r1, lsl #10
     9d8:	91020000 	mrsls	r0, (UNDEF: 2)
     9dc:	04c70f6c 	strbeq	r0, [r7], #3948	; 0xf6c
     9e0:	95010000 	strls	r0, [r1, #-0]
     9e4:	00000087 	andeq	r0, r0, r7, lsl #1
     9e8:	11689102 	cmnne	r8, r2, lsl #2
     9ec:	200010d6 	ldrdcs	r1, [r0], -r6
     9f0:	00000058 	andeq	r0, r0, r8, asr r0
     9f4:	0003ca0f 	andeq	ip, r3, pc, lsl #20
     9f8:	0fa10100 	svceq	0x00a10100
     9fc:	02000002 	andeq	r0, r0, #2
     a00:	00005391 	muleq	r0, r1, r3
     a04:	0003bb0e 	andeq	fp, r3, lr, lsl #22
     a08:	2c800100 	stfcss	f0, [r0], {0}
     a0c:	50200010 	eorpl	r0, r0, r0, lsl r0
     a10:	01000000 	mrseq	r0, (UNDEF: 0)
     a14:	00048a9c 	muleq	r4, ip, sl
     a18:	10321100 	eorsne	r1, r2, r0, lsl #2
     a1c:	003c2000 	eorseq	r2, ip, r0
     a20:	69150000 	ldmdbvs	r5, {}	; <UNPREDICTABLE>
     a24:	87820100 	strhi	r0, [r2, r0, lsl #2]
     a28:	02000000 	andeq	r0, r0, #0
     a2c:	38117491 	ldmdacc	r1, {r0, r4, r7, sl, ip, sp, lr}
     a30:	2a200010 	bcs	800a78 <startup-0x1f7ff588>
     a34:	15000000 	strne	r0, [r0, #-0]
     a38:	8301006a 	movwhi	r0, #4202	; 0x106a
     a3c:	00000087 	andeq	r0, r0, r7, lsl #1
     a40:	00709102 	rsbseq	r9, r0, r2, lsl #2
     a44:	93140000 	tstls	r4, #0
     a48:	01000004 	tsteq	r0, r4
     a4c:	000fe076 	andeq	lr, pc, r6, ror r0	; <UNPREDICTABLE>
     a50:	00004c20 	andeq	r4, r0, r0, lsr #24
     a54:	cc9c0100 	ldfgts	f0, [ip], {0}
     a58:	11000004 	tstne	r0, r4
     a5c:	20000fe6 	andcs	r0, r0, r6, ror #31
     a60:	00000034 	andeq	r0, r0, r4, lsr r0
     a64:	01006915 	tsteq	r0, r5, lsl r9
     a68:	00008778 	andeq	r8, r0, r8, ror r7
     a6c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     a70:	000fec11 	andeq	lr, pc, r1, lsl ip	; <UNPREDICTABLE>
     a74:	00002220 	andeq	r2, r0, r0, lsr #4
     a78:	006a1500 	rsbeq	r1, sl, r0, lsl #10
     a7c:	00877901 	addeq	r7, r7, r1, lsl #18
     a80:	91020000 	mrsls	r0, (UNDEF: 2)
     a84:	00000070 	andeq	r0, r0, r0, ror r0
     a88:	0003f919 	andeq	pc, r3, r9, lsl r9	; <UNPREDICTABLE>
     a8c:	876c0100 	strbhi	r0, [ip, -r0, lsl #2]!
     a90:	a4000000 	strge	r0, [r0], #-0
     a94:	3c20000f 	stccc	0, cr0, [r0], #-60	; 0xffffffc4
     a98:	01000000 	mrseq	r0, (UNDEF: 0)
     a9c:	0004f29c 	muleq	r4, ip, r2
     aa0:	00641800 	rsbeq	r1, r4, r0, lsl #16
     aa4:	00876c01 	addeq	r6, r7, r1, lsl #24
     aa8:	91020000 	mrsls	r0, (UNDEF: 2)
     aac:	7c160074 	ldcvc	0, cr0, [r6], {116}	; 0x74
     ab0:	01000004 	tsteq	r0, r4
     ab4:	0000875b 	andeq	r8, r0, fp, asr r7
     ab8:	000ed800 	andeq	sp, lr, r0, lsl #16
     abc:	0000cc20 	andeq	ip, r0, r0, lsr #24
     ac0:	469c0100 	ldrmi	r0, [ip], r0, lsl #2
     ac4:	15000005 	strne	r0, [r0, #-5]
     ac8:	00746572 	rsbseq	r6, r4, r2, ror r5
     acc:	00875d01 	addeq	r5, r7, r1, lsl #26
     ad0:	91020000 	mrsls	r0, (UNDEF: 2)
     ad4:	0ee41174 	mcreq	1, 7, r1, cr4, cr4, {3}
     ad8:	00ae2000 	adceq	r2, lr, r0
     adc:	78150000 	ldmdavc	r5, {}	; <UNPREDICTABLE>
     ae0:	875e0100 	ldrbhi	r0, [lr, -r0, lsl #2]
     ae4:	02000000 	andeq	r0, r0, #0
     ae8:	ea117091 	b	45cd34 <startup-0x1fba32cc>
     aec:	9c20000e 	stcls	0, cr0, [r0], #-56	; 0xffffffc8
     af0:	15000000 	strne	r0, [r0, #-0]
     af4:	5f010079 	svcpl	0x00010079
     af8:	00000087 	andeq	r0, r0, r7, lsl #1
     afc:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     b00:	9c1a0000 	ldcls	0, cr0, [sl], {-0}
     b04:	01000003 	tsteq	r0, r3
     b08:	000b2c34 	andeq	r2, fp, r4, lsr ip
     b0c:	0003ac20 	andeq	sl, r3, r0, lsr #24
     b10:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
     b14:	18000006 	stmdane	r0, {r1, r2}
     b18:	34010064 	strcc	r0, [r1], #-100	; 0xffffff9c
     b1c:	00000087 	andeq	r0, r0, r7, lsl #1
     b20:	1b549102 	blne	1524f30 <startup-0x1eadb0d0>
     b24:	20000b56 	andcs	r0, r0, r6, asr fp
     b28:	000000d8 	ldrdeq	r0, [r0], -r8
     b2c:	00000597 	muleq	r0, r7, r5
     b30:	01007815 	tsteq	r0, r5, lsl r8
     b34:	0000874a 	andeq	r8, r0, sl, asr #14
     b38:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     b3c:	000b5c11 	andeq	r5, fp, r1, lsl ip
     b40:	0000c620 	andeq	ip, r0, r0, lsr #12
     b44:	00791500 	rsbseq	r1, r9, r0, lsl #10
     b48:	00874a01 	addeq	r4, r7, r1, lsl #20
     b4c:	91020000 	mrsls	r0, (UNDEF: 2)
     b50:	1b000070 	blne	d18 <startup-0x1ffff2e8>
     b54:	20000c30 	andcs	r0, r0, r0, lsr ip
     b58:	000000d8 	ldrdeq	r0, [r0], -r8
     b5c:	000005c7 	andeq	r0, r0, r7, asr #11
     b60:	01007815 	tsteq	r0, r5, lsl r8
     b64:	0000874d 	andeq	r8, r0, sp, asr #14
     b68:	6c910200 	lfmvs	f0, 4, [r1], {0}
     b6c:	000c3611 	andeq	r3, ip, r1, lsl r6
     b70:	0000c620 	andeq	ip, r0, r0, lsr #12
     b74:	00791500 	rsbseq	r1, r9, r0, lsl #10
     b78:	00874d01 	addeq	r4, r7, r1, lsl #26
     b7c:	91020000 	mrsls	r0, (UNDEF: 2)
     b80:	1b000068 	blne	d28 <startup-0x1ffff2d8>
     b84:	20000d0a 	andcs	r0, r0, sl, lsl #26
     b88:	000000d8 	ldrdeq	r0, [r0], -r8
     b8c:	000005f7 	strdeq	r0, [r0], -r7
     b90:	01007915 	tsteq	r0, r5, lsl r9
     b94:	00008750 	andeq	r8, r0, r0, asr r7
     b98:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     b9c:	000d1011 	andeq	r1, sp, r1, lsl r0
     ba0:	0000c620 	andeq	ip, r0, r0, lsr #12
     ba4:	00781500 	rsbseq	r1, r8, r0, lsl #10
     ba8:	00875001 	addeq	r5, r7, r1
     bac:	91020000 	mrsls	r0, (UNDEF: 2)
     bb0:	11000060 	tstne	r0, r0, rrx
     bb4:	20000de4 	andcs	r0, r0, r4, ror #27
     bb8:	000000e0 	andeq	r0, r0, r0, ror #1
     bbc:	01007915 	tsteq	r0, r5, lsl r9
     bc0:	00008753 	andeq	r8, r0, r3, asr r7
     bc4:	5c910200 	lfmpl	f0, 4, [r1], {0}
     bc8:	000dea11 	andeq	lr, sp, r1, lsl sl
     bcc:	0000ce20 	andeq	ip, r0, r0, lsr #28
     bd0:	00781500 	rsbseq	r1, r8, r0, lsl #10
     bd4:	00875301 	addeq	r5, r7, r1, lsl #6
     bd8:	91020000 	mrsls	r0, (UNDEF: 2)
     bdc:	00000058 	andeq	r0, r0, r8, asr r0
     be0:	0004af1c 	andeq	sl, r4, ip, lsl pc
     be4:	a40f0100 	strge	r0, [pc], #-256	; bec <startup-0x1ffff414>
     be8:	88200008 	stmdahi	r0!, {r3}
     bec:	01000002 	tsteq	r0, r2
     bf0:	0064189c 	mlseq	r4, ip, r8, r1
     bf4:	00870f01 	addeq	r0, r7, r1, lsl #30
     bf8:	91020000 	mrsls	r0, (UNDEF: 2)
     bfc:	08c81b44 	stmiaeq	r8, {r2, r6, r8, r9, fp, ip}^
     c00:	00942000 	addseq	r2, r4, r0
     c04:	06890000 	streq	r0, [r9], r0
     c08:	650f0000 	strvs	r0, [pc, #-0]	; c10 <startup-0x1ffff3f0>
     c0c:	01000004 	tsteq	r0, r4
     c10:	00008724 	andeq	r8, r0, r4, lsr #14
     c14:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     c18:	0008d211 	andeq	sp, r8, r1, lsl r2
     c1c:	00008420 	andeq	r8, r0, r0, lsr #8
     c20:	00781500 	rsbseq	r1, r8, r0, lsl #10
     c24:	00872401 	addeq	r2, r7, r1, lsl #8
     c28:	91020000 	mrsls	r0, (UNDEF: 2)
     c2c:	08d81170 	ldmeq	r8, {r4, r5, r6, r8, ip}^
     c30:	00722000 	rsbseq	r2, r2, r0
     c34:	79150000 	ldmdbvc	r5, {}	; <UNPREDICTABLE>
     c38:	87240100 	strhi	r0, [r4, -r0, lsl #2]!
     c3c:	02000000 	andeq	r0, r0, #0
     c40:	00006c91 	muleq	r0, r1, ip
     c44:	095e1b00 	ldmdbeq	lr, {r8, r9, fp, ip}^
     c48:	00942000 	addseq	r2, r4, r0
     c4c:	06d10000 	ldrbeq	r0, [r1], r0
     c50:	650f0000 	strvs	r0, [pc, #-0]	; c58 <startup-0x1ffff3a8>
     c54:	01000004 	tsteq	r0, r4
     c58:	00008727 	andeq	r8, r0, r7, lsr #14
     c5c:	68910200 	ldmvs	r1, {r9}
     c60:	00096811 	andeq	r6, r9, r1, lsl r8
     c64:	00008420 	andeq	r8, r0, r0, lsr #8
     c68:	00781500 	rsbseq	r1, r8, r0, lsl #10
     c6c:	00872701 	addeq	r2, r7, r1, lsl #14
     c70:	91020000 	mrsls	r0, (UNDEF: 2)
     c74:	096e1164 	stmdbeq	lr!, {r2, r5, r6, r8, ip}^
     c78:	00722000 	rsbseq	r2, r2, r0
     c7c:	79150000 	ldmdbvc	r5, {}	; <UNPREDICTABLE>
     c80:	87270100 	strhi	r0, [r7, -r0, lsl #2]!
     c84:	02000000 	andeq	r0, r0, #0
     c88:	00006091 	muleq	r0, r1, r0
     c8c:	09f41b00 	ldmibeq	r4!, {r8, r9, fp, ip}^
     c90:	00942000 	addseq	r2, r4, r0
     c94:	07190000 	ldreq	r0, [r9, -r0]
     c98:	650f0000 	strvs	r0, [pc, #-0]	; ca0 <startup-0x1ffff360>
     c9c:	01000004 	tsteq	r0, r4
     ca0:	0000872a 	andeq	r8, r0, sl, lsr #14
     ca4:	5c910200 	lfmpl	f0, 4, [r1], {0}
     ca8:	0009fe11 	andeq	pc, r9, r1, lsl lr	; <UNPREDICTABLE>
     cac:	00008420 	andeq	r8, r0, r0, lsr #8
     cb0:	00791500 	rsbseq	r1, r9, r0, lsl #10
     cb4:	00872a01 	addeq	r2, r7, r1, lsl #20
     cb8:	91020000 	mrsls	r0, (UNDEF: 2)
     cbc:	0a041158 	beq	105224 <startup-0x1fefaddc>
     cc0:	00722000 	rsbseq	r2, r2, r0
     cc4:	78150000 	ldmdavc	r5, {}	; <UNPREDICTABLE>
     cc8:	872a0100 	strhi	r0, [sl, -r0, lsl #2]!
     ccc:	02000000 	andeq	r0, r0, #0
     cd0:	00005491 	muleq	r0, r1, r4
     cd4:	0a8a1100 	beq	fe2850dc <values+0xde282d88>
     cd8:	00942000 	addseq	r2, r4, r0
     cdc:	650f0000 	strvs	r0, [pc, #-0]	; ce4 <startup-0x1ffff31c>
     ce0:	01000004 	tsteq	r0, r4
     ce4:	0000872d 	andeq	r8, r0, sp, lsr #14
     ce8:	50910200 	addspl	r0, r1, r0, lsl #4
     cec:	000a9411 	andeq	r9, sl, r1, lsl r4
     cf0:	00008420 	andeq	r8, r0, r0, lsr #8
     cf4:	00791500 	rsbseq	r1, r9, r0, lsl #10
     cf8:	00872d01 	addeq	r2, r7, r1, lsl #26
     cfc:	91020000 	mrsls	r0, (UNDEF: 2)
     d00:	0a9a114c 	beq	fe685238 <values+0xde682ee4>
     d04:	00722000 	rsbseq	r2, r2, r0
     d08:	78150000 	ldmdavc	r5, {}	; <UNPREDICTABLE>
     d0c:	872d0100 	strhi	r0, [sp, -r0, lsl #2]!
     d10:	02000000 	andeq	r0, r0, #0
     d14:	00004891 	muleq	r0, r1, r8
     d18:	d1000000 	mrsle	r0, (UNDEF: 0)
     d1c:	04000000 	streq	r0, [r0], #-0
     d20:	00052200 	andeq	r2, r5, r0, lsl #4
     d24:	5f010400 	svcpl	0x00010400
     d28:	0c000000 	stceq	0, cr0, [r0], {-0}
     d2c:	0000053b 	andeq	r0, r0, fp, lsr r5
     d30:	20001380 	andcs	r1, r0, r0, lsl #7
     d34:	000000b8 	strheq	r0, [r0], -r8
     d38:	0000075d 	andeq	r0, r0, sp, asr r7
     d3c:	00012102 	andeq	r2, r1, r2, lsl #2
     d40:	32090200 	andcc	r0, r9, #0, 4
     d44:	05000000 	streq	r0, [r0, #-0]
     d48:	001b8403 	andseq	r8, fp, r3, lsl #8
     d4c:	07020320 	streq	r0, [r2, -r0, lsr #6]
     d50:	0000012e 	andeq	r0, r0, lr, lsr #2
     d54:	74696204 	strbtvc	r6, [r9], #-516	; 0xfffffdfc
     d58:	4a0a0200 	bmi	281560 <startup-0x1fd7eaa0>
     d5c:	05000000 	streq	r0, [r0, #-0]
     d60:	001b8003 	andseq	r8, fp, r3
     d64:	07040320 	streq	r0, [r4, -r0, lsr #6]
     d68:	00000134 	andeq	r0, r0, r4, lsr r1
     d6c:	00057705 	andeq	r7, r5, r5, lsl #14
     d70:	18170100 	ldmdane	r7, {r8}
     d74:	20200014 	eorcs	r0, r0, r4, lsl r0
     d78:	01000000 	mrseq	r0, (UNDEF: 0)
     d7c:	0000759c 	muleq	r0, ip, r5
     d80:	057b0600 	ldrbeq	r0, [fp, #-1536]!	; 0xfffffa00
     d84:	17010000 	strne	r0, [r1, -r0]
     d88:	00000032 	andeq	r0, r0, r2, lsr r0
     d8c:	00769102 	rsbseq	r9, r6, r2, lsl #2
     d90:	00052307 	andeq	r2, r5, r7, lsl #6
     d94:	4a0f0100 	bmi	3c119c <startup-0x1fc3ee64>
     d98:	e4000000 	str	r0, [r0], #-0
     d9c:	34200013 	strtcc	r0, [r0], #-19	; 0xffffffed
     da0:	01000000 	mrseq	r0, (UNDEF: 0)
     da4:	0000b89c 	muleq	r0, ip, r8
     da8:	05310600 	ldreq	r0, [r1, #-1536]!	; 0xfffffa00
     dac:	0f010000 	svceq	0x00010000
     db0:	000000b8 	strheq	r0, [r0], -r8
     db4:	086c9102 	stmdaeq	ip!, {r1, r8, ip, pc}^
     db8:	01006f74 	tsteq	r0, r4, ror pc
     dbc:	0000b80f 	andeq	fp, r0, pc, lsl #16
     dc0:	68910200 	ldmvs	r1, {r9}
     dc4:	73657209 	cmnvc	r5, #-1879048192	; 0x90000000
     dc8:	4a100100 	bmi	4011d0 <startup-0x1fbfee30>
     dcc:	02000000 	andeq	r0, r0, #0
     dd0:	0a007491 	beq	1e01c <startup-0x1ffe1fe4>
     dd4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     dd8:	360b0074 			; <UNDEFINED> instruction: 0x360b0074
     ddc:	01000005 	tsteq	r0, r5
     de0:	00004a08 	andeq	r4, r0, r8, lsl #20
     de4:	00138000 	andseq	r8, r3, r0
     de8:	00006420 	andeq	r6, r0, r0, lsr #8
     dec:	009c0100 	addseq	r0, ip, r0, lsl #2
     df0:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     df4:	05e70004 	strbeq	r0, [r7, #4]!
     df8:	01040000 	mrseq	r0, (UNDEF: 4)
     dfc:	0000005f 	andeq	r0, r0, pc, asr r0
     e00:	0006050c 	andeq	r0, r6, ip, lsl #10
     e04:	00143800 	andseq	r3, r4, r0, lsl #16
     e08:	00040820 	andeq	r0, r4, r0, lsr #16
     e0c:	0007e900 	andeq	lr, r7, r0, lsl #18
     e10:	05e40200 	strbeq	r0, [r4, #512]!	; 0x200
     e14:	84010000 	strhi	r0, [r1], #-0
     e18:	200017a0 	andcs	r1, r0, r0, lsr #15
     e1c:	000000a0 	andeq	r0, r0, r0, lsr #1
     e20:	00619c01 	rsbeq	r9, r1, r1, lsl #24
     e24:	76030000 	strvc	r0, [r3], -r0
     e28:	01006c61 	tsteq	r0, r1, ror #24
     e2c:	00006184 	andeq	r6, r0, r4, lsl #3
     e30:	6c910200 	lfmvs	f0, 4, [r1], {0}
     e34:	0006a504 	andeq	sl, r6, r4, lsl #10
     e38:	618d0100 	orrvs	r0, sp, r0, lsl #2
     e3c:	02000000 	andeq	r0, r0, #0
     e40:	72057491 	andvc	r7, r5, #-1862270976	; 0x91000000
     e44:	01007365 	tsteq	r0, r5, ror #6
     e48:	0000688f 	andeq	r6, r0, pc, lsl #17
     e4c:	73910200 	orrsvc	r0, r1, #0, 4
     e50:	05040600 	streq	r0, [r4, #-1536]	; 0xfffffa00
     e54:	0000010f 	andeq	r0, r0, pc, lsl #2
     e58:	7e080106 	adfvce	f0, f0, f6
     e5c:	02000002 	andeq	r0, r0, #2
     e60:	00000580 	andeq	r0, r0, r0, lsl #11
     e64:	17507b01 	ldrbne	r7, [r0, -r1, lsl #22]
     e68:	00502000 	subseq	r2, r0, r0
     e6c:	9c010000 	stcls	0, cr0, [r1], {-0}
     e70:	000000af 	andeq	r0, r0, pc, lsr #1
     e74:	776f7203 	strbvc	r7, [pc, -r3, lsl #4]!
     e78:	af7b0100 	svcge	0x007b0100
     e7c:	02000000 	andeq	r0, r0, #0
     e80:	5c076f91 	stcpl	15, cr6, [r7], {145}	; 0x91
     e84:	01000006 	tsteq	r0, r6
     e88:	0000af7b 	andeq	sl, r0, fp, ror pc
     e8c:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
     e90:	0005ba04 	andeq	fp, r5, r4, lsl #20
     e94:	af7c0100 	svcge	0x007c0100
     e98:	02000000 	andeq	r0, r0, #0
     e9c:	06007791 			; <UNDEFINED> instruction: 0x06007791
     ea0:	02750801 	rsbseq	r0, r5, #65536	; 0x10000
     ea4:	63020000 	movwvs	r0, #8192	; 0x2000
     ea8:	01000006 	tsteq	r0, r6
     eac:	00171c72 	andseq	r1, r7, r2, ror ip
     eb0:	00003420 	andeq	r3, r0, r0, lsr #8
     eb4:	d89c0100 	ldmle	ip, {r8}
     eb8:	03000000 	movweq	r0, #0
     ebc:	72010073 	andvc	r0, r1, #115	; 0x73
     ec0:	000000d8 	ldrdeq	r0, [r0], -r8
     ec4:	00749102 	rsbseq	r9, r4, r2, lsl #2
     ec8:	00680408 	rsbeq	r0, r8, r8, lsl #8
     ecc:	81020000 	mrshi	r0, (UNDEF: 2)
     ed0:	01000006 	tsteq	r0, r6
     ed4:	0016e06a 	andseq	lr, r6, sl, rrx
     ed8:	00003c20 	andeq	r3, r0, r0, lsr #24
     edc:	0d9c0100 	ldfeqs	f0, [ip]
     ee0:	03000001 	movweq	r0, #1
     ee4:	6a010063 	bvs	41078 <startup-0x1ffbef88>
     ee8:	000000af 	andeq	r0, r0, pc, lsr #1
     eec:	09779102 	ldmdbeq	r7!, {r1, r8, ip, pc}^
     ef0:	00000283 	andeq	r0, r0, r3, lsl #5
     ef4:	010d0801 	tsteq	sp, r1, lsl #16
     ef8:	000a0000 	andeq	r0, sl, r0
     efc:	05040b00 	streq	r0, [r4, #-2816]	; 0xfffff500
     f00:	00746e69 	rsbseq	r6, r4, r9, ror #28
     f04:	00058d0c 	andeq	r8, r5, ip, lsl #26
     f08:	af600100 	svcge	0x00600100
     f0c:	ac000000 	stcge	0, cr0, [r0], {-0}
     f10:	34200016 	strtcc	r0, [r0], #-22	; 0xffffffea
     f14:	01000000 	mrseq	r0, (UNDEF: 0)
     f18:	0001479c 	muleq	r1, ip, r7
     f1c:	00630500 	rsbeq	r0, r3, r0, lsl #10
     f20:	00af6101 	adceq	r6, pc, r1, lsl #2
     f24:	91020000 	mrsls	r0, (UNDEF: 2)
     f28:	02290977 	eoreq	r0, r9, #1949696	; 0x1dc000
     f2c:	5c010000 	stcpl	0, cr0, [r1], {-0}
     f30:	0000010d 	andeq	r0, r0, sp, lsl #2
     f34:	0200000a 	andeq	r0, r0, #10
     f38:	000005a3 	andeq	r0, r0, r3, lsr #11
     f3c:	167c5901 	ldrbtne	r5, [ip], -r1, lsl #18
     f40:	00302000 	eorseq	r2, r0, r0
     f44:	9c010000 	stcls	0, cr0, [r1], {-0}
     f48:	00000176 	andeq	r0, r0, r6, ror r1
     f4c:	01006303 	tsteq	r0, r3, lsl #6
     f50:	0000af59 	andeq	sl, r0, r9, asr pc
     f54:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     f58:	00022909 	andeq	r2, r2, r9, lsl #18
     f5c:	0d5c0100 	ldfeqe	f0, [ip, #-0]
     f60:	0a000001 	beq	f6c <startup-0x1ffff094>
     f64:	f50c0000 			; <UNDEFINED> instruction: 0xf50c0000
     f68:	01000005 	tsteq	r0, r5
     f6c:	0000af4d 	andeq	sl, r0, sp, asr #30
     f70:	00162800 	andseq	r2, r6, r0, lsl #16
     f74:	00005420 	andeq	r5, r0, r0, lsr #8
     f78:	9d9c0100 	ldflss	f0, [ip]
     f7c:	05000001 	streq	r0, [r0, #-1]
     f80:	01007672 	tsteq	r0, r2, ror r6
     f84:	0000af52 	andeq	sl, r0, r2, asr pc
     f88:	6f910200 	svcvs	0x00910200
     f8c:	05c20c00 	strbeq	r0, [r2, #3072]	; 0xc00
     f90:	41010000 	mrsmi	r0, (UNDEF: 1)
     f94:	000000af 	andeq	r0, r0, pc, lsr #1
     f98:	200015d2 	ldrdcs	r1, [r0], -r2
     f9c:	00000056 	andeq	r0, r0, r6, asr r0
     fa0:	01c49c01 	biceq	r9, r4, r1, lsl #24
     fa4:	72050000 	andvc	r0, r5, #0
     fa8:	46010076 			; <UNDEFINED> instruction: 0x46010076
     fac:	000000af 	andeq	r0, r0, pc, lsr #1
     fb0:	006f9102 	rsbeq	r9, pc, r2, lsl #2
     fb4:	0006760d 	andeq	r7, r6, sp, lsl #12
     fb8:	a4380100 	ldrtge	r0, [r8], #-256	; 0xffffff00
     fbc:	2e200015 	miacs	acc0, r5, r0
     fc0:	01000000 	mrseq	r0, (UNDEF: 0)
     fc4:	0001f89c 	muleq	r1, ip, r8
     fc8:	02830e00 	addeq	r0, r3, #0, 28
     fcc:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
     fd0:	0000010d 	andeq	r0, r0, sp, lsl #2
     fd4:	000001ea 	andeq	r0, r0, sl, ror #3
     fd8:	7c09000a 	stcvc	0, cr0, [r9], {10}
     fdc:	01000001 	tsteq	r0, r1
     fe0:	00010d3e 	andeq	r0, r1, lr, lsr sp
     fe4:	00000a00 	andeq	r0, r0, r0, lsl #20
     fe8:	00063602 	andeq	r3, r6, r2, lsl #12
     fec:	7a320100 	bvc	c813f4 <startup-0x1f37ec0c>
     ff0:	2a200015 	bcs	80104c <startup-0x1f7fefb4>
     ff4:	01000000 	mrseq	r0, (UNDEF: 0)
     ff8:	00021c9c 	muleq	r2, ip, ip
     ffc:	01d30700 	bicseq	r0, r3, r0, lsl #14
    1000:	32010000 	andcc	r0, r1, #0
    1004:	000000af 	andeq	r0, r0, pc, lsr #1
    1008:	00779102 	rsbseq	r9, r7, r2, lsl #2
    100c:	0005d402 	andeq	sp, r5, r2, lsl #8
    1010:	502c0100 	eorpl	r0, ip, r0, lsl #2
    1014:	2a200015 	bcs	801070 <startup-0x1f7fef90>
    1018:	01000000 	mrseq	r0, (UNDEF: 0)
    101c:	0002409c 	muleq	r2, ip, r0
    1020:	01960700 	orrseq	r0, r6, r0, lsl #14
    1024:	2c010000 	stccs	0, cr0, [r1], {-0}
    1028:	000000af 	andeq	r0, r0, pc, lsr #1
    102c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1030:	0006470f 	andeq	r4, r6, pc, lsl #14
    1034:	00240100 	eoreq	r0, r4, r0, lsl #2
    1038:	50200015 	eorpl	r0, r0, r5, lsl r0
    103c:	01000000 	mrseq	r0, (UNDEF: 0)
    1040:	00026e9c 	muleq	r2, ip, lr
    1044:	00780300 	rsbseq	r0, r8, r0, lsl #6
    1048:	00af2401 	adceq	r2, pc, r1, lsl #8
    104c:	91020000 	mrsls	r0, (UNDEF: 2)
    1050:	0063056f 	rsbeq	r0, r3, pc, ror #10
    1054:	00af2601 	adceq	r2, pc, r1, lsl #12
    1058:	91020000 	mrsls	r0, (UNDEF: 2)
    105c:	920f0077 	andls	r0, pc, #119	; 0x77
    1060:	01000006 	tsteq	r0, r6
    1064:	0014bc1c 	andseq	fp, r4, ip, lsl ip
    1068:	00004420 	andeq	r4, r0, r0, lsr #8
    106c:	9c9c0100 	ldflss	f0, [ip], {0}
    1070:	03000002 	movweq	r0, #2
    1074:	1c010078 	stcne	0, cr0, [r1], {120}	; 0x78
    1078:	000000af 	andeq	r0, r0, pc, lsr #1
    107c:	056f9102 	strbeq	r9, [pc, #-258]!	; f82 <startup-0x1ffff07e>
    1080:	1e010063 	cdpne	0, 0, cr0, cr1, cr3, {3}
    1084:	000000af 	andeq	r0, r0, pc, lsr #1
    1088:	00779102 	rsbseq	r9, r7, r2, lsl #2
    108c:	00017110 	andeq	r7, r1, r0, lsl r1
    1090:	38050100 	stmdacc	r5, {r8}
    1094:	84200014 	strthi	r0, [r0], #-20	; 0xffffffec
    1098:	01000000 	mrseq	r0, (UNDEF: 0)
    109c:	0283099c 	addeq	r0, r3, #156, 18	; 0x270000
    10a0:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    10a4:	0000010d 	andeq	r0, r0, sp, lsl #2
    10a8:	0000000a 	andeq	r0, r0, sl

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	01130200 	tsteq	r3, r0, lsl #4
  14:	0b0b0e03 	bleq	2c3828 <startup-0x1fd3c7d8>
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	00001301 	andeq	r1, r0, r1, lsl #6
  20:	03000d03 	movweq	r0, #3331	; 0xd03
  24:	3b0b3a0e 	blcc	2ce864 <startup-0x1fd3179c>
  28:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  2c:	0400000b 	streq	r0, [r0], #-11
  30:	13490101 	movtne	r0, #37121	; 0x9101
  34:	00001301 	andeq	r1, r0, r1, lsl #6
  38:	49002105 	stmdbmi	r0, {r0, r2, r8, sp}
  3c:	000b2f13 	andeq	r2, fp, r3, lsl pc
  40:	00240600 	eoreq	r0, r4, r0, lsl #12
  44:	0b3e0b0b 	bleq	f82c78 <startup-0x1f07d388>
  48:	00000e03 	andeq	r0, r0, r3, lsl #28
  4c:	0b002407 	bleq	9070 <startup-0x1fff6f90>
  50:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  54:	08000008 	stmdaeq	r0, {r3}
  58:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  5c:	0b3b0b3a 	bleq	ec2d4c <startup-0x1f13d2b4>
  60:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  64:	00001802 	andeq	r1, r0, r2, lsl #16
  68:	03003409 	movweq	r3, #1033	; 0x409
  6c:	3b0b3a08 	blcc	2ce894 <startup-0x1fd3176c>
  70:	3f13490b 	svccc	0x0013490b
  74:	00180219 	andseq	r0, r8, r9, lsl r2
  78:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
  7c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  80:	0b3b0b3a 	bleq	ec2d70 <startup-0x1f13d290>
  84:	06120111 			; <UNDEFINED> instruction: 0x06120111
  88:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  8c:	00130119 	andseq	r0, r3, r9, lsl r1
  90:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
  94:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  98:	0b3b0b3a 	bleq	ec2d88 <startup-0x1f13d278>
  9c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
  a0:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
  a4:	0d000000 	stceq	0, cr0, [r0, #-0]
  a8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
  b0:	01110b3b 	tsteq	r1, fp, lsr fp
  b4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  b8:	00194296 	mulseq	r9, r6, r2
  bc:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
  c0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  c4:	0b3b0b3a 	bleq	ec2db4 <startup-0x1f13d24c>
  c8:	01111927 	tsteq	r1, r7, lsr #18
  cc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  d0:	01194296 			; <UNDEFINED> instruction: 0x01194296
  d4:	0f000013 	svceq	0x00000013
  d8:	08030034 	stmdaeq	r3, {r2, r4, r5}
  dc:	0b3b0b3a 	bleq	ec2dcc <startup-0x1f13d234>
  e0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  e4:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
  e8:	03193f00 	tsteq	r9, #0, 30
  ec:	3b0b3a0e 	blcc	2ce92c <startup-0x1fd316d4>
  f0:	1119270b 	tstne	r9, fp, lsl #14
  f4:	40061201 	andmi	r1, r6, r1, lsl #4
  f8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  fc:	01000000 	mrseq	r0, (UNDEF: 0)
 100:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 104:	0e030b13 	vmoveq.32	d3[0], r0
 108:	06120111 			; <UNDEFINED> instruction: 0x06120111
 10c:	00001710 	andeq	r1, r0, r0, lsl r7
 110:	49010102 	stmdbmi	r1, {r1, r8}
 114:	00130113 	andseq	r0, r3, r3, lsl r1
 118:	00210300 	eoreq	r0, r1, r0, lsl #6
 11c:	052f1349 	streq	r1, [pc, #-841]!	; fffffddb <values+0xdfffda87>
 120:	24040000 	strcs	r0, [r4], #-0
 124:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 128:	000e030b 	andeq	r0, lr, fp, lsl #6
 12c:	00340500 	eorseq	r0, r4, r0, lsl #10
 130:	0b3a0e03 	bleq	e83944 <startup-0x1f17c6bc>
 134:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 138:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 13c:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
 140:	03193f01 	tsteq	r9, #1, 30
 144:	3b0b3a0e 	blcc	2ce984 <startup-0x1fd3167c>
 148:	11192705 	tstne	r9, r5, lsl #14
 14c:	40061201 	andmi	r1, r6, r1, lsl #4
 150:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 154:	00001301 	andeq	r1, r0, r1, lsl #6
 158:	03003407 	movweq	r3, #1031	; 0x407
 15c:	3b0b3a08 	blcc	2ce984 <startup-0x1fd3167c>
 160:	02134905 	andseq	r4, r3, #81920	; 0x14000
 164:	08000018 	stmdaeq	r0, {r3, r4}
 168:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 16c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 170:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 174:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
 178:	03193f01 	tsteq	r9, #1, 30
 17c:	3b0b3a0e 	blcc	2ce9bc <startup-0x1fd31644>
 180:	1119270b 	tstne	r9, fp, lsl #14
 184:	40061201 	andmi	r1, r6, r1, lsl #4
 188:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 18c:	00001301 	andeq	r1, r0, r1, lsl #6
 190:	0300050a 	movweq	r0, #1290	; 0x50a
 194:	3b0b3a08 	blcc	2ce9bc <startup-0x1fd31644>
 198:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 19c:	0b000018 	bleq	204 <startup-0x1ffffdfc>
 1a0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 1a4:	0b3b0b3a 	bleq	ec2e94 <startup-0x1f13d16c>
 1a8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1ac:	240c0000 	strcs	r0, [ip], #-0
 1b0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 1b4:	0008030b 	andeq	r0, r8, fp, lsl #6
 1b8:	00340d00 	eorseq	r0, r4, r0, lsl #26
 1bc:	0b3a0803 	bleq	e821d0 <startup-0x1f17de30>
 1c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1c4:	00001802 	andeq	r1, r0, r2, lsl #16
 1c8:	3f012e0e 	svccc	0x00012e0e
 1cc:	3a0e0319 	bcc	380e38 <startup-0x1fc7f1c8>
 1d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1d4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1d8:	96184006 	ldrls	r4, [r8], -r6
 1dc:	13011942 	movwne	r1, #6466	; 0x1942
 1e0:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 1e4:	03193f00 	tsteq	r9, #0, 30
 1e8:	3b0b3a0e 	blcc	2cea28 <startup-0x1fd315d8>
 1ec:	1119270b 	tstne	r9, fp, lsl #14
 1f0:	40061201 	andmi	r1, r6, r1, lsl #4
 1f4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1f8:	34100000 	ldrcc	r0, [r0], #-0
 1fc:	3a080300 	bcc	200e04 <startup-0x1fdff1fc>
 200:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 204:	11000013 	tstne	r0, r3, lsl r0
 208:	0e03012e 	adfeqsp	f0, f3, #0.5
 20c:	0b3b0b3a 	bleq	ec2efc <startup-0x1f13d104>
 210:	01111927 	tsteq	r1, r7, lsr #18
 214:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 218:	01194296 			; <UNDEFINED> instruction: 0x01194296
 21c:	12000013 	andne	r0, r0, #19
 220:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 224:	0b3b0b3a 	bleq	ec2f14 <startup-0x1f13d0ec>
 228:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 22c:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 230:	3a0e0301 	bcc	380e3c <startup-0x1fc7f1c4>
 234:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 238:	11134919 	tstne	r3, r9, lsl r9
 23c:	40061201 	andmi	r1, r6, r1, lsl #4
 240:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 244:	00001301 	andeq	r1, r0, r1, lsl #6
 248:	3f002e14 	svccc	0x00002e14
 24c:	3a0e0319 	bcc	380eb8 <startup-0x1fc7f148>
 250:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 254:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 258:	96184006 	ldrls	r4, [r8], -r6
 25c:	00001942 	andeq	r1, r0, r2, asr #18
 260:	03012e15 	movweq	r2, #7701	; 0x1e15
 264:	3b0b3a0e 	blcc	2ceaa4 <startup-0x1fd3155c>
 268:	1119270b 	tstne	r9, fp, lsl #14
 26c:	40061201 	andmi	r1, r6, r1, lsl #4
 270:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 274:	00001301 	andeq	r1, r0, r1, lsl #6
 278:	3f002e16 	svccc	0x00002e16
 27c:	3a0e0319 	bcc	380ee8 <startup-0x1fc7f118>
 280:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 284:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 288:	97184006 	ldrls	r4, [r8, -r6]
 28c:	00001942 	andeq	r1, r0, r2, asr #18
 290:	01110100 	tsteq	r1, r0, lsl #2
 294:	0b130e25 	bleq	4c3b30 <startup-0x1fb3c4d0>
 298:	01110e03 	tsteq	r1, r3, lsl #28
 29c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 2a0:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
 2a4:	03193f01 	tsteq	r9, #1, 30
 2a8:	3b0b3a0e 	blcc	2ceae8 <startup-0x1fd31518>
 2ac:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 2b0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 2b4:	96184006 	ldrls	r4, [r8], -r6
 2b8:	13011942 	movwne	r1, #6466	; 0x1942
 2bc:	34030000 	strcc	r0, [r3], #-0
 2c0:	3a080300 	bcc	200ec8 <startup-0x1fdff138>
 2c4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2c8:	00180213 	andseq	r0, r8, r3, lsl r2
 2cc:	00240400 	eoreq	r0, r4, r0, lsl #8
 2d0:	0b3e0b0b 	bleq	f82f04 <startup-0x1f07d0fc>
 2d4:	00000e03 	andeq	r0, r0, r3, lsl #28
 2d8:	49010105 	stmdbmi	r1, {r0, r2, r8}
 2dc:	00130113 	andseq	r0, r3, r3, lsl r1
 2e0:	00210600 	eoreq	r0, r1, r0, lsl #12
 2e4:	0b2f1349 	bleq	bc5010 <startup-0x1f43aff0>
 2e8:	24070000 	strcs	r0, [r7], #-0
 2ec:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 2f0:	0008030b 	andeq	r0, r8, fp, lsl #6
 2f4:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
 2f8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2fc:	0b3b0b3a 	bleq	ec2fec <startup-0x1f13d014>
 300:	13491927 	movtne	r1, #39207	; 0x9927
 304:	06120111 			; <UNDEFINED> instruction: 0x06120111
 308:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 30c:	00130119 	andseq	r0, r3, r9, lsl r1
 310:	012e0900 			; <UNDEFINED> instruction: 0x012e0900
 314:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 318:	0b3b0b3a 	bleq	ec3008 <startup-0x1f13cff8>
 31c:	01111927 	tsteq	r1, r7, lsr #18
 320:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 324:	01194297 			; <UNDEFINED> instruction: 0x01194297
 328:	0a000013 	beq	37c <startup-0x1ffffc84>
 32c:	08030005 	stmdaeq	r3, {r0, r2}
 330:	0b3b0b3a 	bleq	ec3020 <startup-0x1f13cfe0>
 334:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 338:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
 33c:	03193f00 	tsteq	r9, #0, 30
 340:	3b0b3a0e 	blcc	2ceb80 <startup-0x1fd31480>
 344:	1119270b 	tstne	r9, fp, lsl #14
 348:	40061201 	andmi	r1, r6, r1, lsl #4
 34c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 350:	01000000 	mrseq	r0, (UNDEF: 0)
 354:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 358:	0e030b13 	vmoveq.32	d3[0], r0
 35c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 360:	00001710 	andeq	r1, r0, r0, lsl r7
 364:	03011302 	movweq	r1, #4866	; 0x1302
 368:	3a0b0b0e 	bcc	2c2fa8 <startup-0x1fd3d058>
 36c:	010b3b0b 	tsteq	fp, fp, lsl #22
 370:	03000013 	movweq	r0, #19
 374:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 378:	0b3b0b3a 	bleq	ec3068 <startup-0x1f13cf98>
 37c:	0b381349 	bleq	e050a8 <startup-0x1f1faf58>
 380:	01040000 	mrseq	r0, (UNDEF: 4)
 384:	01134901 	tsteq	r3, r1, lsl #18
 388:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
 38c:	13490021 	movtne	r0, #36897	; 0x9021
 390:	00000b2f 	andeq	r0, r0, pc, lsr #22
 394:	0b002406 	bleq	93b4 <startup-0x1fff6c4c>
 398:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 39c:	0700000e 	streq	r0, [r0, -lr]
 3a0:	0b0b0024 	bleq	2c0438 <startup-0x1fd3fbc8>
 3a4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 3a8:	26080000 	strcs	r0, [r8], -r0
 3ac:	00134900 	andseq	r4, r3, r0, lsl #18
 3b0:	00340900 	eorseq	r0, r4, r0, lsl #18
 3b4:	0b3a0e03 	bleq	e83bc8 <startup-0x1f17c438>
 3b8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3bc:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 3c0:	340a0000 	strcc	r0, [sl], #-0
 3c4:	3a080300 	bcc	200fcc <startup-0x1fdff034>
 3c8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3cc:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 3d0:	0b000018 	bleq	438 <startup-0x1ffffbc8>
 3d4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 3d8:	0b3a0e03 	bleq	e83bec <startup-0x1f17c414>
 3dc:	1349053b 	movtne	r0, #38203	; 0x953b
 3e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3e4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 3e8:	0c000019 	stceq	0, cr0, [r0], {25}
 3ec:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3f0:	0b3a0e03 	bleq	e83c04 <startup-0x1f17c3fc>
 3f4:	1349053b 	movtne	r0, #38203	; 0x953b
 3f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3fc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 400:	00130119 	andseq	r0, r3, r9, lsl r1
 404:	00340d00 	eorseq	r0, r4, r0, lsl #26
 408:	0b3a0803 	bleq	e8241c <startup-0x1f17dbe4>
 40c:	1349053b 	movtne	r0, #38203	; 0x953b
 410:	00001802 	andeq	r1, r0, r2, lsl #16
 414:	3f012e0e 	svccc	0x00012e0e
 418:	3a0e0319 	bcc	381084 <startup-0x1fc7ef7c>
 41c:	110b3b0b 	tstne	fp, fp, lsl #22
 420:	40061201 	andmi	r1, r6, r1, lsl #4
 424:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 428:	00001301 	andeq	r1, r0, r1, lsl #6
 42c:	0300340f 	movweq	r3, #1039	; 0x40f
 430:	3b0b3a0e 	blcc	2cec70 <startup-0x1fd31390>
 434:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 438:	10000018 	andne	r0, r0, r8, lsl r0
 43c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 440:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 444:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 448:	0b110000 	bleq	440450 <startup-0x1fbbfbb0>
 44c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 450:	12000006 	andne	r0, r0, #6
 454:	13490021 	movtne	r0, #36897	; 0x9021
 458:	0000052f 	andeq	r0, r0, pc, lsr #10
 45c:	0b000f13 	bleq	40b0 <startup-0x1fffbf50>
 460:	0013490b 	andseq	r4, r3, fp, lsl #18
 464:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
 468:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 46c:	0b3b0b3a 	bleq	ec315c <startup-0x1f13cea4>
 470:	01111927 	tsteq	r1, r7, lsr #18
 474:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 478:	01194296 			; <UNDEFINED> instruction: 0x01194296
 47c:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 480:	08030034 	stmdaeq	r3, {r2, r4, r5}
 484:	0b3b0b3a 	bleq	ec3174 <startup-0x1f13ce8c>
 488:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 48c:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 490:	03193f01 	tsteq	r9, #1, 30
 494:	3b0b3a0e 	blcc	2cecd4 <startup-0x1fd3132c>
 498:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 49c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 4a0:	97184006 	ldrls	r4, [r8, -r6]
 4a4:	13011942 	movwne	r1, #6466	; 0x1942
 4a8:	05170000 	ldreq	r0, [r7, #-0]
 4ac:	3a0e0300 	bcc	3810b4 <startup-0x1fc7ef4c>
 4b0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4b4:	00180213 	andseq	r0, r8, r3, lsl r2
 4b8:	00051800 	andeq	r1, r5, r0, lsl #16
 4bc:	0b3a0803 	bleq	e824d0 <startup-0x1f17db30>
 4c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4c4:	00001802 	andeq	r1, r0, r2, lsl #16
 4c8:	3f012e19 	svccc	0x00012e19
 4cc:	3a0e0319 	bcc	381138 <startup-0x1fc7eec8>
 4d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 4d4:	11134919 	tstne	r3, r9, lsl r9
 4d8:	40061201 	andmi	r1, r6, r1, lsl #4
 4dc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 4e0:	00001301 	andeq	r1, r0, r1, lsl #6
 4e4:	3f012e1a 	svccc	0x00012e1a
 4e8:	3a0e0319 	bcc	381154 <startup-0x1fc7eeac>
 4ec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 4f0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 4f4:	97184006 	ldrls	r4, [r8, -r6]
 4f8:	13011942 	movwne	r1, #6466	; 0x1942
 4fc:	0b1b0000 	bleq	6c0504 <startup-0x1f93fafc>
 500:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 504:	00130106 	andseq	r0, r3, r6, lsl #2
 508:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
 50c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 510:	0b3b0b3a 	bleq	ec3200 <startup-0x1f13ce00>
 514:	01111927 	tsteq	r1, r7, lsr #18
 518:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 51c:	00194297 	mulseq	r9, r7, r2
 520:	11010000 	mrsne	r0, (UNDEF: 1)
 524:	130e2501 	movwne	r2, #58625	; 0xe501
 528:	110e030b 	tstne	lr, fp, lsl #6
 52c:	10061201 	andne	r1, r6, r1, lsl #4
 530:	02000017 	andeq	r0, r0, #23
 534:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 538:	0b3b0b3a 	bleq	ec3228 <startup-0x1f13cdd8>
 53c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 540:	00001802 	andeq	r1, r0, r2, lsl #16
 544:	0b002403 	bleq	9558 <startup-0x1fff6aa8>
 548:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 54c:	0400000e 	streq	r0, [r0], #-14
 550:	08030034 	stmdaeq	r3, {r2, r4, r5}
 554:	0b3b0b3a 	bleq	ec3244 <startup-0x1f13cdbc>
 558:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 55c:	00001802 	andeq	r1, r0, r2, lsl #16
 560:	3f012e05 	svccc	0x00012e05
 564:	3a0e0319 	bcc	3811d0 <startup-0x1fc7ee30>
 568:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 56c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 570:	97184006 	ldrls	r4, [r8, -r6]
 574:	13011942 	movwne	r1, #6466	; 0x1942
 578:	05060000 	streq	r0, [r6, #-0]
 57c:	3a0e0300 	bcc	381184 <startup-0x1fc7ee7c>
 580:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 584:	00180213 	andseq	r0, r8, r3, lsl r2
 588:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
 58c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 590:	0b3b0b3a 	bleq	ec3280 <startup-0x1f13cd80>
 594:	13491927 	movtne	r1, #39207	; 0x9927
 598:	06120111 			; <UNDEFINED> instruction: 0x06120111
 59c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 5a0:	00130119 	andseq	r0, r3, r9, lsl r1
 5a4:	00050800 	andeq	r0, r5, r0, lsl #16
 5a8:	0b3a0803 	bleq	e825bc <startup-0x1f17da44>
 5ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 5b0:	00001802 	andeq	r1, r0, r2, lsl #16
 5b4:	03003409 	movweq	r3, #1033	; 0x409
 5b8:	3b0b3a08 	blcc	2cede0 <startup-0x1fd31220>
 5bc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 5c0:	0a000018 	beq	628 <startup-0x1ffff9d8>
 5c4:	0b0b0024 	bleq	2c065c <startup-0x1fd3f9a4>
 5c8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 5cc:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
 5d0:	03193f00 	tsteq	r9, #0, 30
 5d4:	3b0b3a0e 	blcc	2cee14 <startup-0x1fd311ec>
 5d8:	1113490b 	tstne	r3, fp, lsl #18
 5dc:	40061201 	andmi	r1, r6, r1, lsl #4
 5e0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 5e4:	01000000 	mrseq	r0, (UNDEF: 0)
 5e8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 5ec:	0e030b13 	vmoveq.32	d3[0], r0
 5f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5f4:	00001710 	andeq	r1, r0, r0, lsl r7
 5f8:	3f012e02 	svccc	0x00012e02
 5fc:	3a0e0319 	bcc	381268 <startup-0x1fc7ed98>
 600:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 604:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 608:	96184006 	ldrls	r4, [r8], -r6
 60c:	13011942 	movwne	r1, #6466	; 0x1942
 610:	05030000 	streq	r0, [r3, #-0]
 614:	3a080300 	bcc	20121c <startup-0x1fdfede4>
 618:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 61c:	00180213 	andseq	r0, r8, r3, lsl r2
 620:	00340400 	eorseq	r0, r4, r0, lsl #8
 624:	0b3a0e03 	bleq	e83e38 <startup-0x1f17c1c8>
 628:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 62c:	00001802 	andeq	r1, r0, r2, lsl #16
 630:	03003405 	movweq	r3, #1029	; 0x405
 634:	3b0b3a08 	blcc	2cee5c <startup-0x1fd311a4>
 638:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 63c:	06000018 			; <UNDEFINED> instruction: 0x06000018
 640:	0b0b0024 	bleq	2c06d8 <startup-0x1fd3f928>
 644:	0e030b3e 	vmoveq.16	d3[0], r0
 648:	05070000 	streq	r0, [r7, #-0]
 64c:	3a0e0300 	bcc	381254 <startup-0x1fc7edac>
 650:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 654:	00180213 	andseq	r0, r8, r3, lsl r2
 658:	000f0800 	andeq	r0, pc, r0, lsl #16
 65c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 660:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
 664:	03193f01 	tsteq	r9, #1, 30
 668:	3b0b3a0e 	blcc	2ceea8 <startup-0x1fd31158>
 66c:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 670:	0a000019 	beq	6dc <startup-0x1ffff924>
 674:	00000018 	andeq	r0, r0, r8, lsl r0
 678:	0b00240b 	bleq	96ac <startup-0x1fff6954>
 67c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 680:	0c000008 	stceq	0, cr0, [r0], {8}
 684:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 688:	0b3a0e03 	bleq	e83e9c <startup-0x1f17c164>
 68c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 690:	01111349 	tsteq	r1, r9, asr #6
 694:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 698:	01194296 			; <UNDEFINED> instruction: 0x01194296
 69c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 6a0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 6a4:	0b3a0e03 	bleq	e83eb8 <startup-0x1f17c148>
 6a8:	01110b3b 	tsteq	r1, fp, lsr fp
 6ac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 6b0:	01194296 			; <UNDEFINED> instruction: 0x01194296
 6b4:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 6b8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 6bc:	0b3a0e03 	bleq	e83ed0 <startup-0x1f17c130>
 6c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 6c4:	1301193c 	movwne	r1, #6460	; 0x193c
 6c8:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 6cc:	03193f01 	tsteq	r9, #1, 30
 6d0:	3b0b3a0e 	blcc	2cef10 <startup-0x1fd310f0>
 6d4:	1119270b 	tstne	r9, fp, lsl #14
 6d8:	40061201 	andmi	r1, r6, r1, lsl #4
 6dc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 6e0:	00001301 	andeq	r1, r0, r1, lsl #6
 6e4:	3f012e10 	svccc	0x00012e10
 6e8:	3a0e0319 	bcc	381354 <startup-0x1fc7ecac>
 6ec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 6f0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 6f4:	96184006 	ldrls	r4, [r8], -r6
 6f8:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000136 	andeq	r0, r0, r6, lsr r1
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	01580002 	cmpeq	r8, r2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000148 	andcs	r0, r0, r8, asr #2
  3c:	0000060c 	andeq	r0, r0, ip, lsl #12
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	04cf0002 	strbeq	r0, [pc], #2	; 54 <startup-0x1fffffac>
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000754 	andcs	r0, r0, r4, asr r7
  5c:	00000150 	andeq	r0, r0, r0, asr r1
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	05bc0002 	ldreq	r0, [ip, #2]!
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200008a4 	andcs	r0, r0, r4, lsr #17
  7c:	00000adc 	ldrdeq	r0, [r0], -ip
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	0d1b0002 	ldceq	0, cr0, [fp, #-8]
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20001380 	andcs	r1, r0, r0, lsl #7
  9c:	000000b8 	strheq	r0, [r0], -r8
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	0df00002 	ldcleq	0, cr0, [r0, #8]!
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20001438 	andcs	r1, r0, r8, lsr r4
  bc:	00000408 	andeq	r0, r0, r8, lsl #8
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000146 	andcs	r0, r0, r6, asr #2
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000c9 	andeq	r0, r0, r9, asr #1
   4:	006e0002 	rsbeq	r0, lr, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
  28:	442f6669 	strtmi	r6, [pc], #-1641	; 30 <startup-0x1fffffd0>
  2c:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
  30:	73746e65 	cmnvc	r4, #1616	; 0x650
  34:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
  38:	472f3562 	strmi	r3, [pc, -r2, ror #10]!
  3c:	32656d61 	rsbcc	r6, r5, #6208	; 0x1840
  40:	00383430 	eorseq	r3, r8, r0, lsr r4
  44:	61747300 	cmnvs	r4, r0, lsl #6
  48:	70757472 	rsbsvc	r7, r5, r2, ror r4
  4c:	0100632e 	tsteq	r0, lr, lsr #6
  50:	61470000 	mrsvs	r0, (UNDEF: 71)
  54:	6f62656d 	svcvs	0x0062656d
  58:	2e647261 	cdpcs	2, 6, cr7, cr4, cr1, {3}
  5c:	00010068 	andeq	r0, r1, r8, rrx
  60:	6e617200 	cdpvs	2, 6, cr7, cr1, cr0, {0}
  64:	5f6d6f64 	svcpl	0x006d6f64
  68:	656e6567 	strbvs	r6, [lr, #-1383]!	; 0xfffffa99
  6c:	6f746172 	svcvs	0x00746172
  70:	00682e72 	rsbeq	r2, r8, r2, ror lr
  74:	00000001 	andeq	r0, r0, r1
  78:	00020500 	andeq	r0, r2, r0, lsl #10
  7c:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  80:	5e130113 	mrcpl	1, 0, r0, cr3, cr3, {0}
  84:	01000302 	tsteq	r0, r2, lsl #6
  88:	02050001 	andeq	r0, r5, #1
  8c:	20000010 	andcs	r0, r0, r0, lsl r0
  90:	3d012203 	sfmcc	f2, 4, [r1, #-12]
  94:	352f3f2f 	strcc	r3, [pc, #-3887]!	; fffff16d <values+0xdfffce19>
  98:	cb3e5931 	blgt	f96564 <startup-0x1f069a9c>
  9c:	233d233d 	teqcs	sp, #-201326592	; 0xf4000000
  a0:	253d233d 	ldrcs	r2, [sp, #-829]!	; 0xfffffcc3
  a4:	2f222f84 	svccs	0x00222f84
  a8:	4c672422 	cfstrdmi	mvd2, [r7], #-136	; 0xffffff78
  ac:	0330304b 	teqeq	r0, #75	; 0x4b
  b0:	35034a51 	strcc	r4, [r3, #-2641]	; 0xfffff5af
  b4:	4b2f7b20 	blmi	bded3c <startup-0x1f4212c4>
  b8:	4e316a67 	vsubmi.f32	s12, s2, s15
  bc:	69312f2f 	ldmdbvs	r1!, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
  c0:	2f2f2f30 	svccs	0x002f2f30
  c4:	682f2f2f 	stmdavs	pc!, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}	; <UNPREDICTABLE>
  c8:	01000302 	tsteq	r0, r2, lsl #6
  cc:	00018101 	andeq	r8, r1, r1, lsl #2
  d0:	49000200 	stmdbmi	r0, {r9}
  d4:	02000000 	andeq	r0, r0, #0
  d8:	0d0efb01 	vstreq	d15, [lr, #-4]
  dc:	01010100 	mrseq	r0, (UNDEF: 17)
  e0:	00000001 	andeq	r0, r0, r1
  e4:	01000001 	tsteq	r0, r1
  e8:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff6ad <values+0xdfffd359>
  ec:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
  f0:	74616c2f 	strbtvc	r6, [r1], #-3119	; 0xfffff3d1
  f4:	2f666969 	svccs	0x00666969
  f8:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
  fc:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 100:	614c2f73 	hvcvs	49907	; 0xc2f3
 104:	2f356262 	svccs	0x00356262
 108:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
 10c:	38343032 	ldmdacc	r4!, {r1, r4, r5, ip, sp}
 110:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 114:	616c7073 	smcvs	50947	; 0xc703
 118:	00632e79 	rsbeq	r2, r3, r9, ror lr
 11c:	00000001 	andeq	r0, r0, r1
 120:	48020500 	stmdami	r2, {r8, sl}
 124:	03200001 			; <UNDEFINED> instruction: 0x03200001
 128:	2f2f010b 	svccs	0x002f010b
 12c:	83596869 	cmphi	r9, #6881280	; 0x690000
 130:	687759e5 	ldmdavs	r7!, {r0, r2, r5, r6, r7, r8, fp, ip, lr}^
 134:	59d78359 	ldmibpl	r7, {r0, r3, r4, r6, r8, r9, pc}^
 138:	1103676a 	tstne	r3, sl, ror #14
 13c:	206f0374 	rsbcs	r0, pc, r4, ror r3	; <UNPREDICTABLE>
 140:	034a1103 	movteq	r1, #41219	; 0xa103
 144:	223d2072 	eorscs	r2, sp, #114	; 0x72
 148:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 14c:	223d223d 	eorscs	r2, sp, #-805306365	; 0xd0000003
 150:	3e3d2f4d 	cdpcc	15, 3, cr2, cr13, cr13, {2}
 154:	3e3d3d3d 	mrccc	13, 1, r3, cr13, cr13, {1}
 158:	4b4b4b4b 	blmi	12d2e8c <startup-0x1ed2d174>
 15c:	3e3f3d4b 	cdpcc	13, 3, cr3, cr15, cr11, {2}
 160:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 164:	2f3d322f 	svccs	0x003d322f
 168:	2f3d752f 	svccs	0x003d752f
 16c:	4a79032f 	bmi	1e40e30 <startup-0x1e1bf1d0>
 170:	24200903 	strtcs	r0, [r0], #-2307	; 0xfffff6fd
 174:	3d68be3d 	stclcc	14, cr11, [r8, #-244]!	; 0xffffff0c
 178:	2f5a3d3d 	svccs	0x005a3d3d
 17c:	302f3e30 	eorcc	r3, pc, r0, lsr lr	; <UNPREDICTABLE>
 180:	5a3f3e59 	bpl	fcfaec <startup-0x1f030514>
 184:	3d5a313d 	ldfcce	f3, [sl, #-244]	; 0xffffff0c
 188:	67ca3d31 			; <UNDEFINED> instruction: 0x67ca3d31
 18c:	914e6759 	cmpls	lr, r9, asr r7
 190:	3d4c5a4b 	vstrcc	s11, [ip, #-300]	; 0xfffffed4
 194:	3d5a3e4c 	ldclcc	14, cr3, [sl, #-304]	; 0xfffffed0
 198:	313d5a31 	teqcc	sp, r1, lsr sl
 19c:	593d9178 	ldmdbpl	sp!, {r3, r4, r5, r6, r8, ip, pc}
 1a0:	914c833d 	cmpls	ip, sp, lsr r3
 1a4:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
 1a8:	03304d84 	teqeq	r0, #132, 26	; 0x2100
 1ac:	3031200d 	eorscc	r2, r1, sp
 1b0:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 1b4:	02040200 	andeq	r0, r4, #0, 4
 1b8:	02002006 	andeq	r2, r0, #6
 1bc:	06660104 	strbteq	r0, [r6], -r4, lsl #2
 1c0:	4bbc3d67 	blmi	fef0f764 <values+0xdef0d410>
 1c4:	2f2f2f21 	svccs	0x002f2f21
 1c8:	4c4c5e2a 	mcrrmi	14, 2, r5, ip, cr10
 1cc:	4e5f3b21 	vnmlsmi.f64	d19, d15, d17
 1d0:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 1d4:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 1d8:	00570304 	subseq	r0, r7, r4, lsl #6
 1dc:	06010402 	streq	r0, [r1], -r2, lsl #8
 1e0:	934c063c 	movtls	r0, #50748	; 0xc63c
 1e4:	02002f5a 	andeq	r2, r0, #360	; 0x168
 1e8:	3c060104 	stfccs	f0, [r6], {4}
 1ec:	02040200 	andeq	r0, r4, #0, 4
 1f0:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 1f4:	3d063c03 	stccc	12, cr3, [r6, #-12]
 1f8:	3d3e1308 	ldccc	3, cr1, [lr, #-32]!	; 0xffffffe0
 1fc:	7803bb3e 	stmdavc	r3, {r1, r2, r3, r4, r5, r8, r9, fp, ip, sp, pc}
 200:	200903e4 	andcs	r0, r9, r4, ror #7
 204:	5a2f3e77 	bpl	bcfbe8 <startup-0x1f430418>
 208:	01040200 	mrseq	r0, R12_usr
 20c:	02005806 	andeq	r5, r0, #393216	; 0x60000
 210:	002e0204 	eoreq	r0, lr, r4, lsl #4
 214:	20040402 	andcs	r0, r4, r2, lsl #8
 218:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 21c:	c95a2f06 	ldmdbgt	sl, {r1, r2, r8, r9, sl, fp, sp}^
 220:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 224:	02005a03 	andeq	r5, r0, #12288	; 0x3000
 228:	009c0304 	addseq	r0, ip, r4, lsl #6
 22c:	06010402 	streq	r0, [r1], -r2, lsl #8
 230:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
 234:	00540602 	subseq	r0, r4, r2, lsl #12
 238:	06010402 	streq	r0, [r1], -r2, lsl #8
 23c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
 240:	00550602 	subseq	r0, r5, r2, lsl #12
 244:	06010402 	streq	r0, [r1], -r2, lsl #8
 248:	0d030674 	stceq	6, cr0, [r3, #-464]	; 0xfffffe30
 24c:	00060258 	andeq	r0, r6, r8, asr r2
 250:	00a90101 	adceq	r0, r9, r1, lsl #2
 254:	00020000 	andeq	r0, r2, r0
 258:	00000047 	andeq	r0, r0, r7, asr #32
 25c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 260:	0101000d 	tsteq	r1, sp
 264:	00000101 	andeq	r0, r0, r1, lsl #2
 268:	00000100 	andeq	r0, r0, r0, lsl #2
 26c:	2f3a4301 	svccs	0x003a4301
 270:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 274:	616c2f73 	smcvs	49907	; 0xc2f3
 278:	66696974 			; <UNDEFINED> instruction: 0x66696974
 27c:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 280:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 284:	4c2f7374 	stcmi	3, cr7, [pc], #-464	; bc <startup-0x1fffff44>
 288:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
 28c:	6d61472f 	stclvs	7, cr4, [r1, #-188]!	; 0xffffff44
 290:	34303265 	ldrtcc	r3, [r0], #-613	; 0xfffffd9b
 294:	69000038 	stmdbvs	r0, {r3, r4, r5}
 298:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
 29c:	0100632e 	tsteq	r0, lr, lsr #6
 2a0:	00000000 	andeq	r0, r0, r0
 2a4:	07540205 	ldrbeq	r0, [r4, -r5, lsl #4]
 2a8:	2f152000 	svccs	0x00152000
 2ac:	5b673d3d 	blpl	19cf7a8 <startup-0x1e630858>
 2b0:	4b924bcc 	blmi	fe4931e8 <values+0xde490e94>
 2b4:	4c4b4b4b 	mcrrmi	11, 4, r4, fp, cr11
 2b8:	004c3e93 	umaaleq	r3, ip, r3, lr
 2bc:	06010402 	streq	r0, [r1], -r2, lsl #8
 2c0:	002f0658 	eoreq	r0, pc, r8, asr r6	; <UNPREDICTABLE>
 2c4:	06010402 	streq	r0, [r1], -r2, lsl #8
 2c8:	002f0658 	eoreq	r0, pc, r8, asr r6	; <UNPREDICTABLE>
 2cc:	06010402 	streq	r0, [r1], -r2, lsl #8
 2d0:	002f0658 	eoreq	r0, pc, r8, asr r6	; <UNPREDICTABLE>
 2d4:	06010402 	streq	r0, [r1], -r2, lsl #8
 2d8:	21300658 	teqcs	r0, r8, asr r6
 2dc:	3e6a3d6a 	cdpcc	13, 6, cr3, cr10, cr10, {3}
 2e0:	003d764b 	eorseq	r7, sp, fp, asr #12
 2e4:	03020402 	movweq	r0, #9218	; 0x2402
 2e8:	0200907a 	andeq	r9, r0, #122	; 0x7a
 2ec:	3c060104 	stfccs	f0, [r6], {4}
 2f0:	3c0a0306 	stccc	3, cr0, [sl], {6}
 2f4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 2f8:	07022101 	streq	r2, [r2, -r1, lsl #2]
 2fc:	5a010100 	bpl	40704 <startup-0x1ffbf8fc>
 300:	02000004 	andeq	r0, r0, #4
 304:	00013800 	andeq	r3, r1, r0, lsl #16
 308:	fb010200 	blx	40b12 <startup-0x1ffbf4ee>
 30c:	01000d0e 	tsteq	r0, lr, lsl #26
 310:	00010101 	andeq	r0, r1, r1, lsl #2
 314:	00010000 	andeq	r0, r1, r0
 318:	3a430100 	bcc	10c0720 <startup-0x1ef3f8e0>
 31c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 320:	6c2f7372 	stcvs	3, cr7, [pc], #-456	; 160 <startup-0x1ffffea0>
 324:	69697461 	stmdbvs	r9!, {r0, r5, r6, sl, ip, sp, lr}^
 328:	6f442f66 	svcvs	0x00442f66
 32c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 330:	2f73746e 	svccs	0x0073746e
 334:	6262614c 	rsbvs	r6, r2, #76, 2
 338:	61472f35 	cmpvs	r7, r5, lsr pc
 33c:	3032656d 	eorscc	r6, r2, sp, ror #10
 340:	00003834 	andeq	r3, r0, r4, lsr r8
 344:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
 348:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 34c:	00632e64 	rsbeq	r2, r3, r4, ror #28
 350:	47000001 	strmi	r0, [r0, -r1]
 354:	62656d61 	rsbvs	r6, r5, #6208	; 0x1840
 358:	6472616f 	ldrbtvs	r6, [r2], #-367	; 0xfffffe91
 35c:	0100682e 	tsteq	r0, lr, lsr #16
 360:	61720000 	cmnvs	r2, r0
 364:	6d6f646e 	cfstrdvs	mvd6, [pc, #-440]!	; 1b4 <startup-0x1ffffe4c>
 368:	6e65675f 	mcrvs	7, 3, r6, cr5, cr15, {2}
 36c:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 370:	682e726f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}
 374:	00000100 	andeq	r0, r0, r0, lsl #2
 378:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 37c:	65766f5f 	ldrbvs	r6, [r6, #-3935]!	; 0xfffff0a1
 380:	62782e72 	rsbsvs	r2, r8, #1824	; 0x720
 384:	0001006d 	andeq	r0, r1, sp, rrx
 388:	6c697400 	cfstrdvs	mvd7, [r9], #-0
 38c:	2e305f65 	cdpcs	15, 3, cr5, cr0, cr5, {3}
 390:	006d6278 	rsbeq	r6, sp, r8, ror r2
 394:	74000001 	strvc	r0, [r0], #-1
 398:	5f656c69 	svcpl	0x00656c69
 39c:	62782e32 	rsbsvs	r2, r8, #800	; 0x320
 3a0:	0001006d 	andeq	r0, r1, sp, rrx
 3a4:	6c697400 	cfstrdvs	mvd7, [r9], #-0
 3a8:	2e345f65 	cdpcs	15, 3, cr5, cr4, cr5, {3}
 3ac:	006d6278 	rsbeq	r6, sp, r8, ror r2
 3b0:	74000001 	strvc	r0, [r0], #-1
 3b4:	5f656c69 	svcpl	0x00656c69
 3b8:	62782e38 	rsbsvs	r2, r8, #56, 28	; 0x380
 3bc:	0001006d 	andeq	r0, r1, sp, rrx
 3c0:	6c697400 	cfstrdvs	mvd7, [r9], #-0
 3c4:	36315f65 	ldrtcc	r5, [r1], -r5, ror #30
 3c8:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 3cc:	00000100 	andeq	r0, r0, r0, lsl #2
 3d0:	656c6974 	strbvs	r6, [ip, #-2420]!	; 0xfffff68c
 3d4:	2e32335f 	mrccs	3, 1, r3, cr2, cr15, {2}
 3d8:	006d6278 	rsbeq	r6, sp, r8, ror r2
 3dc:	74000001 	strvc	r0, [r0], #-1
 3e0:	5f656c69 	svcpl	0x00656c69
 3e4:	782e3436 	stmdavc	lr!, {r1, r2, r4, r5, sl, ip, sp}
 3e8:	01006d62 	tsteq	r0, r2, ror #26
 3ec:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
 3f0:	315f656c 	cmpcc	pc, ip, ror #10
 3f4:	782e3832 	stmdavc	lr!, {r1, r4, r5, fp, ip, sp}
 3f8:	01006d62 	tsteq	r0, r2, ror #26
 3fc:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
 400:	325f656c 	subscc	r6, pc, #108, 10	; 0x1b000000
 404:	782e3635 	stmdavc	lr!, {r0, r2, r4, r5, r9, sl, ip, sp}
 408:	01006d62 	tsteq	r0, r2, ror #26
 40c:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
 410:	355f656c 	ldrbcc	r6, [pc, #-1388]	; fffffeac <values+0xdfffdb58>
 414:	782e3231 	stmdavc	lr!, {r0, r4, r5, r9, ip, sp}
 418:	01006d62 	tsteq	r0, r2, ror #26
 41c:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
 420:	315f656c 	cmpcc	pc, ip, ror #10
 424:	2e343230 	mrccs	2, 1, r3, cr4, cr0, {1}
 428:	006d6278 	rsbeq	r6, sp, r8, ror r2
 42c:	74000001 	strvc	r0, [r0], #-1
 430:	5f656c69 	svcpl	0x00656c69
 434:	38343032 	ldmdacc	r4!, {r1, r4, r5, ip, sp}
 438:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 43c:	00000100 	andeq	r0, r0, r0, lsl #2
 440:	02050000 	andeq	r0, r5, #0
 444:	200008a4 	andcs	r0, r0, r4, lsr #17
 448:	03010f03 	movweq	r0, #7939	; 0x1f03
 44c:	10034a12 	andne	r4, r3, r2, lsl sl
 450:	20700382 	rsbscs	r0, r0, r2, lsl #7
 454:	034a1003 	movteq	r1, #40963	; 0xa003
 458:	02002072 	andeq	r2, r0, #114	; 0x72
 45c:	3c060f04 	stccc	15, cr0, [r6], {4}
 460:	0d040200 	sfmeq	f0, 4, [r4, #-0]
 464:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 468:	02003c0a 	andeq	r3, r0, #2560	; 0xa00
 46c:	00900404 	addseq	r0, r0, r4, lsl #8
 470:	9e060402 	cdpls	4, 0, cr0, cr6, cr2, {0}
 474:	08040200 	stmdaeq	r4, {r9}
 478:	0200ba08 	andeq	fp, r0, #8, 20	; 0x8000
 47c:	003c0904 	eorseq	r0, ip, r4, lsl #18
 480:	3c0b0402 	cfstrscc	mvf0, [fp], {2}
 484:	0c040200 	sfmeq	f0, 4, [r4], {-0}
 488:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 48c:	3d063c0e 	stccc	12, cr3, [r6, #-56]	; 0xffffffc8
 490:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
 494:	003c060f 	eorseq	r0, ip, pc, lsl #12
 498:	580d0402 	stmdapl	sp, {r1, sl}
 49c:	0a040200 	beq	100ca4 <startup-0x1feff35c>
 4a0:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 4a4:	02009004 	andeq	r9, r0, #4
 4a8:	009e0604 	addseq	r0, lr, r4, lsl #12
 4ac:	08080402 	stmdaeq	r8, {r1, sl}
 4b0:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
 4b4:	02003c09 	andeq	r3, r0, #2304	; 0x900
 4b8:	003c0b04 	eorseq	r0, ip, r4, lsl #22
 4bc:	3c0c0402 	cfstrscc	mvf0, [ip], {2}
 4c0:	0e040200 	cdpeq	2, 0, cr0, cr4, cr0, {0}
 4c4:	223d063c 	eorscs	r0, sp, #60, 12	; 0x3c00000
 4c8:	0f040200 	svceq	0x00040200
 4cc:	02003c06 	andeq	r3, r0, #1536	; 0x600
 4d0:	00580d04 	subseq	r0, r8, r4, lsl #26
 4d4:	3c0a0402 	cfstrscc	mvf0, [sl], {2}
 4d8:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 4dc:	04020090 	streq	r0, [r2], #-144	; 0xffffff70
 4e0:	02009e06 	andeq	r9, r0, #6, 28	; 0x60
 4e4:	ba080804 	blt	2024fc <startup-0x1fdfdb04>
 4e8:	09040200 	stmdbeq	r4, {r9}
 4ec:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 4f0:	02003c0b 	andeq	r3, r0, #2816	; 0xb00
 4f4:	003c0c04 	eorseq	r0, ip, r4, lsl #24
 4f8:	3c0e0402 	cfstrscc	mvf0, [lr], {2}
 4fc:	00223d06 	eoreq	r3, r2, r6, lsl #26
 500:	060f0402 	streq	r0, [pc], -r2, lsl #8
 504:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 508:	0200580d 	andeq	r5, r0, #851968	; 0xd0000
 50c:	003c0a04 	eorseq	r0, ip, r4, lsl #20
 510:	90040402 	andls	r0, r4, r2, lsl #8
 514:	06040200 	streq	r0, [r4], -r0, lsl #4
 518:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
 51c:	00ba0808 	adcseq	r0, sl, r8, lsl #16
 520:	3c090402 	cfstrscc	mvf0, [r9], {2}
 524:	0b040200 	bleq	100d2c <startup-0x1feff2d4>
 528:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 52c:	02003c0c 	andeq	r3, r0, #12, 24	; 0xc00
 530:	063c0e04 	ldrteq	r0, [ip], -r4, lsl #28
 534:	0369243d 	cmneq	r9, #1023410176	; 0x3d000000
 538:	033e4a11 	teqeq	lr, #69632	; 0x11000
 53c:	70038210 	andvc	r8, r3, r0, lsl r2
 540:	4a100320 	bmi	4011c8 <startup-0x1fbfee38>
 544:	00207203 	eoreq	r7, r0, r3, lsl #4
 548:	060c0402 	streq	r0, [ip], -r2, lsl #8
 54c:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 550:	02003c09 	andeq	r3, r0, #2304	; 0x900
 554:	00900304 	addseq	r0, r0, r4, lsl #6
 558:	08050402 	stmdaeq	r5, {r1, sl}
 55c:	04020012 	streq	r0, [r2], #-18	; 0xffffffee
 560:	12400207 	subne	r0, r0, #1879048192	; 0x70000000
 564:	08040200 	stmdaeq	r4, {r9}
 568:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 56c:	02003c0a 	andeq	r3, r0, #2560	; 0xa00
 570:	063c0b04 	ldrteq	r0, [ip], -r4, lsl #22
 574:	0200223d 	andeq	r2, r0, #-805306365	; 0xd0000003
 578:	3c060c04 	stccc	12, cr0, [r6], {4}
 57c:	09040200 	stmdbeq	r4, {r9}
 580:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 584:	02009003 	andeq	r9, r0, #3
 588:	12080504 	andne	r0, r8, #4, 10	; 0x1000000
 58c:	07040200 	streq	r0, [r4, -r0, lsl #4]
 590:	00124002 	andseq	r4, r2, r2
 594:	3c080402 	cfstrscc	mvf0, [r8], {2}
 598:	0a040200 	beq	100da0 <startup-0x1feff260>
 59c:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 5a0:	3d063c0b 	stccc	12, cr3, [r6, #-44]	; 0xffffffd4
 5a4:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
 5a8:	003c060c 	eorseq	r0, ip, ip, lsl #12
 5ac:	3c090402 	cfstrscc	mvf0, [r9], {2}
 5b0:	03040200 	movweq	r0, #16896	; 0x4200
 5b4:	04020090 	streq	r0, [r2], #-144	; 0xffffff70
 5b8:	00120805 	andseq	r0, r2, r5, lsl #16
 5bc:	02070402 	andeq	r0, r7, #33554432	; 0x2000000
 5c0:	02001240 	andeq	r1, r0, #64, 4
 5c4:	003c0804 	eorseq	r0, ip, r4, lsl #16
 5c8:	3c0a0402 	cfstrscc	mvf0, [sl], {2}
 5cc:	0b040200 	bleq	100dd4 <startup-0x1feff22c>
 5d0:	223d063c 	eorscs	r0, sp, #60, 12	; 0x3c00000
 5d4:	0c040200 	sfmeq	f0, 4, [r4], {-0}
 5d8:	02003c06 	andeq	r3, r0, #1536	; 0x600
 5dc:	00740904 	rsbseq	r0, r4, r4, lsl #18
 5e0:	90030402 	andls	r0, r3, r2, lsl #8
 5e4:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
 5e8:	02001208 	andeq	r1, r0, #8, 4	; 0x80000000
 5ec:	40020704 	andmi	r0, r2, r4, lsl #14
 5f0:	04020012 	streq	r0, [r2], #-18	; 0xffffffee
 5f4:	02003c08 	andeq	r3, r0, #8, 24	; 0x800
 5f8:	003c0a04 	eorseq	r0, ip, r4, lsl #20
 5fc:	3c0b0402 	cfstrscc	mvf0, [fp], {2}
 600:	94243d06 	strtls	r3, [r4], #-3334	; 0xfffff2fa
 604:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 608:	02002fd7 	andeq	r2, r0, #860	; 0x35c
 60c:	00910104 	addseq	r0, r1, r4, lsl #2
 610:	2d010402 	cfstrscs	mvf0, [r1, #-8]
 614:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 618:	00130801 	andseq	r0, r3, r1, lsl #16
 61c:	2d010402 	cfstrscs	mvf0, [r1, #-8]
 620:	0013082f 	andseq	r0, r3, pc, lsr #16
 624:	03020402 	movweq	r0, #9218	; 0x2402
 628:	02002e7a 	andeq	r2, r0, #1952	; 0x7a0
 62c:	3c060104 	stfccs	f0, [r6], {4}
 630:	02040200 	andeq	r0, r4, #0, 4
 634:	02003b06 	andeq	r3, r0, #6144	; 0x1800
 638:	3c060104 	stfccs	f0, [r6], {4}
 63c:	3c0a0306 	stccc	3, cr0, [sl], {6}
 640:	3d4b8621 	stclcc	6, cr8, [fp, #-132]	; 0xffffff7c
 644:	2f4b4b4b 	svccs	0x004b4b4b
 648:	3d3d772f 	ldccc	7, cr7, [sp, #-188]!	; 0xffffff44
 64c:	03040200 	movweq	r0, #16896	; 0x4200
 650:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 654:	02008103 	andeq	r8, r0, #-1073741824	; 0xc0000000
 658:	3c060104 	stfccs	f0, [r6], {4}
 65c:	02040200 	andeq	r0, r4, #0, 4
 660:	02003b06 	andeq	r3, r0, #6144	; 0x1800
 664:	3c060104 	stfccs	f0, [r6], {4}
 668:	77304006 	ldrvc	r4, [r0, -r6]!
 66c:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
 670:	003e0304 	eorseq	r0, lr, r4, lsl #6
 674:	b8030402 	stmdalt	r3, {r1, sl}
 678:	01040200 	mrseq	r0, R12_usr
 67c:	02003c06 	andeq	r3, r0, #1536	; 0x600
 680:	3b060204 	blcc	180e98 <startup-0x1fe7f168>
 684:	01040200 	mrseq	r0, R12_usr
 688:	42063c06 	andmi	r3, r6, #1536	; 0x600
 68c:	3d3d6777 	ldccc	7, cr6, [sp, #-476]!	; 0xfffffe24
 690:	6b302f3d 	blvs	c0c38c <startup-0x1f3f3c74>
 694:	3e3f764b 	cfmsuba32cc	mvax2, mvax7, mvfx15, mvfx11
 698:	913ebb3e 	teqls	lr, lr, lsr fp
 69c:	02040200 	andeq	r0, r4, #0, 4
 6a0:	040200d3 	streq	r0, [r2], #-211	; 0xffffff2d
 6a4:	003c0601 	eorseq	r0, ip, r1, lsl #12
 6a8:	06020402 	streq	r0, [r2], -r2, lsl #8
 6ac:	04020039 	streq	r0, [r2], #-57	; 0xffffffc7
 6b0:	003c0601 	eorseq	r0, ip, r1, lsl #12
 6b4:	06020402 	streq	r0, [r2], -r2, lsl #8
 6b8:	04020048 	streq	r0, [r2], #-72	; 0xffffffb8
 6bc:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 6c0:	4f4a0c03 	svcmi	0x004a0c03
 6c4:	934a0e03 	movtls	r0, #44547	; 0xae03
 6c8:	31313131 	teqcc	r1, r1, lsr r1
 6cc:	31313131 	teqcc	r1, r1, lsr r1
 6d0:	31313131 	teqcc	r1, r1, lsr r1
 6d4:	4c3dca08 			; <UNDEFINED> instruction: 0x4c3dca08
 6d8:	3d3d30ad 	ldccc	0, cr3, [sp, #-692]!	; 0xfffffd4c
 6dc:	02004b93 	andeq	r4, r0, #150528	; 0x24c00
 6e0:	90060104 	andls	r0, r6, r4, lsl #2
 6e4:	02040200 	andeq	r0, r4, #0, 4
 6e8:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 6ec:	02002004 	andeq	r2, r0, #4
 6f0:	75060404 	strvc	r0, [r6, #-1028]	; 0xfffffbfc
 6f4:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 6f8:	78032359 	stmdavc	r3, {r0, r3, r4, r6, r8, r9, sp}
 6fc:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
 700:	02001e02 	andeq	r1, r0, #2, 28
 704:	3c060104 	stfccs	f0, [r6], {4}
 708:	02040200 	andeq	r0, r4, #0, 4
 70c:	02003b06 	andeq	r3, r0, #6144	; 0x1800
 710:	3c060104 	stfccs	f0, [r6], {4}
 714:	14034506 	strne	r4, [r3], #-1286	; 0xfffffafa
 718:	2f3f5c20 	svccs	0x003f5c20
 71c:	302f3e2f 	eorcc	r3, pc, pc, lsr #28
 720:	3f764b33 	svccc	0x00764b33
 724:	3ead3e3e 	mcrcc	14, 5, r3, cr13, cr14, {1}
 728:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
 72c:	0200d302 	andeq	sp, r0, #134217728	; 0x8000000
 730:	3c060104 	stfccs	f0, [r6], {4}
 734:	02040200 	andeq	r0, r4, #0, 4
 738:	02003906 	andeq	r3, r0, #98304	; 0x18000
 73c:	3c060104 	stfccs	f0, [r6], {4}
 740:	02040200 	andeq	r0, r4, #0, 4
 744:	02004806 	andeq	r4, r0, #393216	; 0x60000
 748:	3c060104 	stfccs	f0, [r6], {4}
 74c:	4a0c0306 	bmi	30136c <startup-0x1fcfec94>
 750:	3e3e3d69 	cdpcc	13, 3, cr3, cr14, cr9, {3}
 754:	2f2f6922 	svccs	0x002f6922
 758:	01000602 	tsteq	r0, r2, lsl #12
 75c:	00008801 	andeq	r8, r0, r1, lsl #16
 760:	68000200 	stmdavs	r0, {r9}
 764:	02000000 	andeq	r0, r0, #0
 768:	0d0efb01 	vstreq	d15, [lr, #-4]
 76c:	01010100 	mrseq	r0, (UNDEF: 17)
 770:	00000001 	andeq	r0, r0, r1
 774:	01000001 	tsteq	r0, r1
 778:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffd3d <values+0xdfffd9e9>
 77c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 780:	74616c2f 	strbtvc	r6, [r1], #-3119	; 0xfffff3d1
 784:	2f666969 	svccs	0x00666969
 788:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 78c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 790:	614c2f73 	hvcvs	49907	; 0xc2f3
 794:	2f356262 	svccs	0x00356262
 798:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
 79c:	38343032 	ldmdacc	r4!, {r1, r4, r5, ip, sp}
 7a0:	61720000 	cmnvs	r2, r0
 7a4:	6d6f646e 	cfstrdvs	mvd6, [pc, #-440]!	; 5f4 <startup-0x1ffffa0c>
 7a8:	6e65675f 	mcrvs	7, 3, r6, cr5, cr15, {2}
 7ac:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 7b0:	632e726f 			; <UNDEFINED> instruction: 0x632e726f
 7b4:	00000100 	andeq	r0, r0, r0, lsl #2
 7b8:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
 7bc:	675f6d6f 	ldrbvs	r6, [pc, -pc, ror #26]
 7c0:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
 7c4:	726f7461 	rsbvc	r7, pc, #1627389952	; 0x61000000
 7c8:	0100682e 	tsteq	r0, lr, lsr #16
 7cc:	00000000 	andeq	r0, r0, r0
 7d0:	13800205 	orrne	r0, r0, #1342177280	; 0x50000000
 7d4:	301a2000 	andscc	r2, sl, r0
 7d8:	84e58308 	strbthi	r8, [r5], #776	; 0x308
 7dc:	844b4b59 	strbhi	r4, [fp], #-2905	; 0xfffff4a7
 7e0:	4b674d21 	blmi	19d3c6c <startup-0x1e62c394>
 7e4:	01000602 	tsteq	r0, r2, lsl #12
 7e8:	0000f501 	andeq	pc, r0, r1, lsl #10
 7ec:	47000200 	strmi	r0, [r0, -r0, lsl #4]
 7f0:	02000000 	andeq	r0, r0, #0
 7f4:	0d0efb01 	vstreq	d15, [lr, #-4]
 7f8:	01010100 	mrseq	r0, (UNDEF: 17)
 7fc:	00000001 	andeq	r0, r0, r1
 800:	01000001 	tsteq	r0, r1
 804:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffdc9 <values+0xdfffda75>
 808:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 80c:	74616c2f 	strbtvc	r6, [r1], #-3119	; 0xfffff3d1
 810:	2f666969 	svccs	0x00666969
 814:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 818:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 81c:	614c2f73 	hvcvs	49907	; 0xc2f3
 820:	2f356262 	svccs	0x00356262
 824:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
 828:	38343032 	ldmdacc	r4!, {r1, r4, r5, ip, sp}
 82c:	73610000 	cmnvc	r1, #0
 830:	2e696963 	vnmulcs.f16	s13, s18, s7	; <UNPREDICTABLE>
 834:	00010063 	andeq	r0, r1, r3, rrx
 838:	05000000 	streq	r0, [r0, #-0]
 83c:	00143802 	andseq	r3, r4, r2, lsl #16
 840:	00301620 	eorseq	r1, r0, r0, lsr #12
 844:	06010402 	streq	r0, [r1], -r2, lsl #8
 848:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
 84c:	02003f3d 	andeq	r3, r0, #61, 30	; 0xf4
 850:	20060104 	andcs	r0, r6, r4, lsl #2
 854:	3d3d8306 	ldccc	3, cr8, [sp, #-24]!	; 0xffffffe8
 858:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
 85c:	06200601 	strteq	r0, [r0], -r1, lsl #12
 860:	3e3d3d83 	cdpcc	13, 3, cr3, cr13, cr3, {4}
 864:	5969763e 	stmdbpl	r9!, {r1, r2, r3, r4, r5, r9, sl, ip, sp, lr}^
 868:	696859bb 	stmdbvs	r8!, {r0, r1, r3, r4, r5, r7, r8, fp, ip, lr}^
 86c:	59130859 	ldmdbpl	r3, {r0, r3, r4, r6, fp}
 870:	3d3d6776 	ldccc	7, cr6, [sp, #-472]!	; 0xfffffe28
 874:	3d674c59 	stclcc	12, cr4, [r7, #-356]!	; 0xfffffe9c
 878:	2f4d593d 	svccs	0x004d593d
 87c:	01040200 	mrseq	r0, R12_usr
 880:	84062006 	strhi	r2, [r6], #-6
 884:	3e3d3d3d 	mrccc	13, 1, r3, cr13, cr13, {1}
 888:	3d3d673e 	ldccc	7, cr6, [sp, #-248]!	; 0xffffff08
 88c:	2f67675a 	svccs	0x0067675a
 890:	3d673e92 	stclcc	14, cr3, [r7, #-584]!	; 0xfffffdb8
 894:	67675a3d 			; <UNDEFINED> instruction: 0x67675a3d
 898:	3d67842f 	cfstrdcc	mvd8, [r7, #-188]!	; 0xffffff44
 89c:	683d2f4b 	ldmdavs	sp!, {r0, r1, r3, r6, r8, r9, sl, fp, sp}
 8a0:	2f2f3d3e 	svccs	0x002f3d3e
 8a4:	762f3d4b 	strtvc	r3, [pc], -fp, asr #26
 8a8:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 8ac:	06200601 	strteq	r0, [r0], -r1, lsl #12
 8b0:	3d593d83 	ldclcc	13, cr3, [r9, #-524]	; 0xfffffdf4
 8b4:	4b2f4b4e 	blmi	bd35f4 <startup-0x1f42ca0c>
 8b8:	4c4d7321 	mcrrmi	3, 2, r7, sp, cr1
 8bc:	764b6791 			; <UNDEFINED> instruction: 0x764b6791
 8c0:	4c4b4e9f 	mcrrmi	14, 9, r4, fp, cr15
 8c4:	31223d3e 			; <UNDEFINED> instruction: 0x31223d3e
 8c8:	02040200 	andeq	r0, r4, #0, 4
 8cc:	02002006 	andeq	r2, r0, #6
 8d0:	06740104 	ldrbteq	r0, [r4], -r4, lsl #2
 8d4:	839122d8 	orrshi	r2, r1, #216, 4	; 0x8000000d
 8d8:	0a036f75 	beq	dc6b4 <startup-0x1ff2394c>
 8dc:	0006023c 	andeq	r0, r6, ip, lsr r2
 8e0:	Address 0x000008e0 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
   4:	736f6c5f 	cmnvc	pc, #24320	; 0x5f00
   8:	3a430074 	bcc	10c01e0 <startup-0x1ef3fe20>
   c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
  10:	6c2f7372 	stcvs	3, cr7, [pc], #-456	; fffffe50 <values+0xdfffdafc>
  14:	69697461 	stmdbvs	r9!, {r0, r5, r6, sl, ip, sp, lr}^
  18:	6f442f66 	svcvs	0x00442f66
  1c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  20:	2f73746e 	svccs	0x0073746e
  24:	6262614c 	rsbvs	r6, r2, #76, 2
  28:	61472f35 	cmpvs	r7, r5, lsr pc
  2c:	3032656d 	eorscc	r6, r2, sp, ror #10
  30:	732f3834 			; <UNDEFINED> instruction: 0x732f3834
  34:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  38:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  3c:	69726700 	ldmdbvs	r2!, {r8, r9, sl, sp, lr}^
  40:	616d0064 	cmnvs	sp, r4, rrx
  44:	67006e69 	strvs	r6, [r0, -r9, ror #28]
  48:	5f656d61 	svcpl	0x00656d61
  4c:	006e6f77 	rsbeq	r6, lr, r7, ror pc
  50:	636f6c62 	cmnvs	pc, #25088	; 0x6200
  54:	695f736b 	ldmdbvs	pc, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}^	; <UNPREDICTABLE>
  58:	6c705f6e 	ldclvs	15, cr5, [r0], #-440	; 0xfffffe48
  5c:	47007961 	strmi	r7, [r0, -r1, ror #18]
  60:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  64:	36203939 			; <UNDEFINED> instruction: 0x36203939
  68:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  6c:	31303220 	teqcc	r0, r0, lsr #4
  70:	31323037 	teqcc	r2, r7, lsr r0
  74:	72282035 	eorvc	r2, r8, #53	; 0x35
  78:	61656c65 	cmnvs	r5, r5, ror #24
  7c:	20296573 	eorcs	r6, r9, r3, ror r5
  80:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  84:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  88:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  8c:	2d362d64 	ldccs	13, cr2, [r6, #-400]!	; 0xfffffe70
  90:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  94:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  98:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  9c:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  a0:	35353432 	ldrcc	r3, [r5, #-1074]!	; 0xfffffbce
  a4:	205d3231 	subscs	r3, sp, r1, lsr r2
  a8:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  ac:	20626d75 	rsbcs	r6, r2, r5, ror sp
  b0:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  b4:	613d6863 	teqvs	sp, r3, ror #16
  b8:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  bc:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  c0:	6f6c666d 	svcvs	0x006c666d
  c4:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
  c8:	733d6962 	teqvc	sp, #1605632	; 0x188000
  cc:	2074666f 	rsbscs	r6, r4, pc, ror #12
  d0:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  d4:	20626d75 	rsbcs	r6, r2, r5, ror sp
  d8:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  dc:	613d6863 	teqvs	sp, r3, ror #16
  e0:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  e4:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  e8:	4f2d2067 	svcmi	0x002d2067
  ec:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
  f0:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
  f4:	67003939 	smladxvs	r0, r9, r9, r3
  f8:	00656d61 	rsbeq	r6, r5, r1, ror #26
  fc:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 100:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 104:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
 108:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
 10c:	6c005f5f 	stcvs	15, cr5, [r0], {95}	; 0x5f
 110:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 114:	00746e69 	rsbseq	r6, r4, r9, ror #28
 118:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 11c:	7070615f 	rsbsvc	r6, r0, pc, asr r1
 120:	73666c00 	cmnvc	r6, #0, 24
 124:	74730072 	ldrbtvc	r0, [r3], #-114	; 0xffffff8e
 128:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 12c:	68730070 	ldmdavs	r3!, {r4, r5, r6}^
 130:	2074726f 	rsbscs	r7, r4, pc, ror #4
 134:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 138:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 13c:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 140:	76616800 	strbtvc	r6, [r1], -r0, lsl #16
 144:	6f6d5f65 	svcvs	0x006d5f65
 148:	00646576 	rsbeq	r6, r4, r6, ror r5
 14c:	61746f74 	cmnvs	r4, r4, ror pc
 150:	63735f6c 	cmnvs	r3, #108, 30	; 0x1b0
 154:	0065726f 	rsbeq	r7, r5, pc, ror #4
 158:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 15c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 160:	6f637300 	svcvs	0x00637300
 164:	6c5f6572 	cfldr64vs	mvdx6, [pc], {114}	; 0x72
 168:	5f747361 	svcpl	0x00747361
 16c:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 170:	63736100 	cmnvs	r3, #0, 2
 174:	695f6969 	ldmdbvs	pc, {r0, r3, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
 178:	0074696e 	rsbseq	r6, r4, lr, ror #18
 17c:	616c6564 	cmnvs	ip, r4, ror #10
 180:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 184:	00696c6c 	rsbeq	r6, r9, ip, ror #24
 188:	70617267 	rsbvc	r7, r1, r7, ror #4
 18c:	5f636968 	svcpl	0x00636968
 190:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 194:	6f635f65 	svcvs	0x00635f65
 198:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 19c:	72670064 	rsbvc	r0, r7, #100	; 0x64
 1a0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1a4:	72645f63 	rsbvc	r5, r4, #396	; 0x18c
 1a8:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
 1ac:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 1b0:	7267006e 	rsbvc	r0, r7, #110	; 0x6e
 1b4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1b8:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 1bc:	69625f72 	stmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 1c0:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 1c4:	72670074 	rsbvc	r0, r7, #116	; 0x74
 1c8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1cc:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 1d0:	645f6461 	ldrbvs	r6, [pc], #-1121	; 1d8 <startup-0x1ffffe28>
 1d4:	00617461 	rsbeq	r7, r1, r1, ror #8
 1d8:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 1dc:	69700065 	ldmdbvs	r0!, {r0, r2, r5, r6}^
 1e0:	006c6578 	rsbeq	r6, ip, r8, ror r5
 1e4:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff7a9 <values+0xdfffd455>
 1e8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 1ec:	74616c2f 	strbtvc	r6, [r1], #-3119	; 0xfffff3d1
 1f0:	2f666969 	svccs	0x00666969
 1f4:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 1f8:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 1fc:	614c2f73 	hvcvs	49907	; 0xc2f3
 200:	2f356262 	svccs	0x00356262
 204:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
 208:	38343032 	ldmdacc	r4!, {r1, r4, r5, ip, sp}
 20c:	7369642f 	cmnvc	r9, #788529152	; 0x2f000000
 210:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 214:	7300632e 	movwvc	r6, #814	; 0x32e
 218:	63656c65 	cmnvs	r5, #25856	; 0x6500
 21c:	6f635f74 	svcvs	0x00635f74
 220:	6f72746e 	svcvs	0x0072746e
 224:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 228:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 22c:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 230:	736e3035 	cmnvc	lr, #53	; 0x35
 234:	61726700 	cmnvs	r2, r0, lsl #14
 238:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 23c:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 240:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
 244:	00796461 	rsbseq	r6, r9, r1, ror #8
 248:	6b73616d 	blvs	1cd8804 <startup-0x1e3277fc>
 24c:	61726700 	cmnvs	r2, r0, lsl #14
 250:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 254:	6165725f 	cmnvs	r5, pc, asr r2
 258:	61620064 	cmnvs	r2, r4, rrx
 25c:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
 260:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 264:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 268:	61427261 	cmpvs	r2, r1, ror #4
 26c:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
 270:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 274:	736e7500 	cmnvc	lr, #0, 10
 278:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 27c:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 280:	64007261 	strvs	r7, [r0], #-609	; 0xfffffd9f
 284:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 288:	63696d5f 	cmnvs	r9, #6080	; 0x17c0
 28c:	67006f72 	smlsdxvs	r0, r2, pc, r6	; <UNPREDICTABLE>
 290:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 294:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 298:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 29c:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 2a0:	67007865 	strvs	r7, [r0, -r5, ror #16]
 2a4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2a8:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 2ac:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 2b0:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 2b4:	006e6565 	rsbeq	r6, lr, r5, ror #10
 2b8:	70617267 	rsbvc	r7, r1, r7, ror #4
 2bc:	5f636968 	svcpl	0x00636968
 2c0:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 2c4:	61645f65 	cmnvs	r4, r5, ror #30
 2c8:	54006174 	strpl	r6, [r0], #-372	; 0xfffffe8c
 2cc:	534b4349 	movtpl	r4, #45897	; 0xb349
 2d0:	67005f5f 	smlsdvs	r0, pc, pc, r5	; <UNPREDICTABLE>
 2d4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2d8:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 2dc:	625f7274 	subsvs	r7, pc, #116, 4	; 0x40000007
 2e0:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
 2e4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 2e8:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
 2ec:	6b636954 	blvs	18da844 <startup-0x1e7257bc>
 2f0:	72670073 	rsbvc	r0, r7, #115	; 0x73
 2f4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2f8:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 2fc:	61697469 	cmnvs	r9, r9, ror #8
 300:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
 304:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 308:	626b0062 	rsbvs	r0, fp, #98	; 0x62
 30c:	74634164 	strbtvc	r4, [r3], #-356	; 0xfffffe9c
 310:	74617669 	strbtvc	r7, [r1], #-1641	; 0xfffff997
 314:	626b0065 	rsbvs	r0, fp, #101	; 0x65
 318:	74654764 	strbtvc	r4, [r5], #-1892	; 0xfffff89c
 31c:	006c6f43 	rsbeq	r6, ip, r3, asr #30
 320:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff8e5 <values+0xdfffd591>
 324:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 328:	74616c2f 	strbtvc	r6, [r1], #-3119	; 0xfffff3d1
 32c:	2f666969 	svccs	0x00666969
 330:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 334:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 338:	614c2f73 	hvcvs	49907	; 0xc2f3
 33c:	2f356262 	svccs	0x00356262
 340:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
 344:	38343032 	ldmdacc	r4!, {r1, r4, r5, ip, sp}
 348:	706e692f 	rsbvc	r6, lr, pc, lsr #18
 34c:	632e7475 			; <UNDEFINED> instruction: 0x632e7475
 350:	706e6900 	rsbvc	r6, lr, r0, lsl #18
 354:	695f7475 	ldmdbvs	pc, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 358:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 35c:	7a696c61 	bvc	1a5b4e8 <startup-0x1e5a4b18>
 360:	6f640065 	svcvs	0x00640065
 364:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
 368:	636f6c62 	cmnvs	pc, #25088	; 0x6200
 36c:	7264006b 	rsbvc	r0, r4, #107	; 0x6b
 370:	675f7761 	ldrbvs	r7, [pc, -r1, ror #14]
 374:	6f656d61 	svcvs	0x00656d61
 378:	53726576 	cmnpl	r2, #494927872	; 0x1d800000
 37c:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 380:	6974006e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6}^
 384:	345f656c 	ldrbcc	r6, [pc], #-1388	; 38c <startup-0x1ffffc74>
 388:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 38c:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
 390:	325f656c 	subscc	r6, pc, #108, 10	; 0x1b000000
 394:	625f3635 	subsvs	r3, pc, #55574528	; 0x3500000
 398:	00737469 	rsbseq	r7, r3, r9, ror #8
 39c:	6d5f6f64 	ldclvs	15, cr6, [pc, #-400]	; 214 <startup-0x1ffffdec>
 3a0:	65677265 	strbvs	r7, [r7, #-613]!	; 0xfffffd9b
 3a4:	6c697400 	cfstrdvs	mvd7, [r9], #-0
 3a8:	5f385f65 	svcpl	0x00385f65
 3ac:	73746962 	cmnvc	r4, #1605632	; 0x188000
 3b0:	61726400 	cmnvs	r2, r0, lsl #8
 3b4:	69745f77 	ldmdbvs	r4!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 3b8:	6400656c 	strvs	r6, [r0], #-1388	; 0xfffffa94
 3bc:	5f776172 	svcpl	0x00776172
 3c0:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 3c4:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 3c8:	79620064 	stmdbvc	r2!, {r2, r5, r6}^
 3cc:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
 3d0:	5f656c69 	svcpl	0x00656c69
 3d4:	38343032 	ldmdacc	r4!, {r1, r4, r5, ip, sp}
 3d8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 3dc:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
 3e0:	365f656c 	ldrbcc	r6, [pc], -ip, ror #10
 3e4:	69625f34 	stmdbvs	r2!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 3e8:	67007374 	smlsdxvs	r0, r4, r3, r7
 3ec:	6f547465 	svcvs	0x00547465
 3f0:	536c6174 	cmnpl	ip, #116, 2
 3f4:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
 3f8:	5f6f6400 	svcpl	0x006f6400
 3fc:	6b636974 	blvs	18da9d4 <startup-0x1e72562c>
 400:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
 404:	4d736148 	ldfmie	f6, [r3, #-288]!	; 0xfffffee0
 408:	6465766f 	strbtvs	r7, [r5], #-1647	; 0xfffff991
 40c:	2f3a4300 	svccs	0x003a4300
 410:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 414:	616c2f73 	smcvs	49907	; 0xc2f3
 418:	66696974 			; <UNDEFINED> instruction: 0x66696974
 41c:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 420:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 424:	4c2f7374 	stcmi	3, cr7, [pc], #-464	; 25c <startup-0x1ffffda4>
 428:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
 42c:	6d61472f 	stclvs	7, cr4, [r1, #-188]!	; 0xffffff44
 430:	34303265 	ldrtcc	r3, [r0], #-613	; 0xfffffd9b
 434:	61472f38 	cmpvs	r7, r8, lsr pc
 438:	6f62656d 	svcvs	0x0062656d
 43c:	2e647261 	cdpcs	2, 6, cr7, cr4, cr1, {3}
 440:	69740063 	ldmdbvs	r4!, {r0, r1, r5, r6}^
 444:	315f656c 	cmpcc	pc, ip, ror #10
 448:	5f343230 	svcpl	0x00343230
 44c:	73746962 	cmnvc	r4, #1605632	; 0x188000
 450:	6c697400 	cfstrdvs	mvd7, [r9], #-0
 454:	32335f65 	eorscc	r5, r3, #404	; 0x194
 458:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 45c:	65680073 	strbvs	r0, [r8, #-115]!	; 0xffffff8d
 460:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 464:	65726200 	ldrbvs	r6, [r2, #-512]!	; 0xfffffe00
 468:	635f6b61 	cmpvs	pc, #99328	; 0x18400
 46c:	00646e6f 	rsbeq	r6, r4, pc, ror #28
 470:	54746567 	ldrbtpl	r6, [r4], #-1383	; 0xfffffa99
 474:	44656c69 	strbtmi	r6, [r5], #-3177	; 0xfffff397
 478:	00617461 	rsbeq	r7, r1, r1, ror #8
 47c:	635f6f64 	cmpvs	pc, #100, 30	; 0x190
 480:	6b636568 	blvs	18d9a28 <startup-0x1e7265d8>
 484:	646e655f 	strbtvs	r6, [lr], #-1375	; 0xfffffaa1
 488:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 48c:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
 490:	69006e6f 	stmdbvs	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 494:	5f74696e 	svcpl	0x0074696e
 498:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 49c:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 4a0:	69740064 	ldmdbvs	r4!, {r2, r5, r6}^
 4a4:	315f656c 	cmpcc	pc, ip, ror #10
 4a8:	69625f36 	stmdbvs	r2!, {r1, r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 4ac:	64007374 	strvs	r7, [r0], #-884	; 0xfffffc8c
 4b0:	72675f6f 	rsbvc	r5, r7, #444	; 0x1bc
 4b4:	74697661 	strbtvc	r7, [r9], #-1633	; 0xfffff99f
 4b8:	61760079 	cmnvs	r6, r9, ror r0
 4bc:	7365756c 	cmnvc	r5, #108, 10	; 0x1b000000
 4c0:	64697700 	strbtvs	r7, [r9], #-1792	; 0xfffff900
 4c4:	77006874 	smlsdxvc	r0, r4, r8, r6
 4c8:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
 4cc:	5f6e695f 	svcpl	0x006e695f
 4d0:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 4d4:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
 4d8:	305f656c 	subscc	r6, pc, ip, ror #10
 4dc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 4e0:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
 4e4:	315f656c 	cmpcc	pc, ip, ror #10
 4e8:	625f3832 	subsvs	r3, pc, #3276800	; 0x320000
 4ec:	00737469 	rsbseq	r7, r3, r9, ror #8
 4f0:	656c6974 	strbvs	r6, [ip, #-2420]!	; 0xfffff68c
 4f4:	625f325f 	subsvs	r3, pc, #-268435451	; 0xf0000005
 4f8:	00737469 	rsbseq	r7, r3, r9, ror #8
 4fc:	78736f70 	ldmdavc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 500:	736f7000 	cmnvc	pc, #0
 504:	69740079 	ldmdbvs	r4!, {r0, r3, r4, r5, r6}^
 508:	355f656c 	ldrbcc	r6, [pc, #-1388]	; ffffffa4 <values+0xdfffdc50>
 50c:	625f3231 	subsvs	r3, pc, #268435459	; 0x10000003
 510:	00737469 	rsbseq	r7, r3, r9, ror #8
 514:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 518:	65766f5f 	ldrbvs	r6, [r6, #-3935]!	; 0xfffff0a1
 51c:	69625f72 	stmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 520:	72007374 	andvc	r7, r0, #116, 6	; 0xd0000001
 524:	5f646e61 	svcpl	0x00646e61
 528:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 52c:	6c617672 	stclvs	6, cr7, [r1], #-456	; 0xfffffe38
 530:	6f726600 	svcvs	0x00726600
 534:	6172006d 	cmnvs	r2, sp, rrx
 538:	4300646e 	movwmi	r6, #1134	; 0x46e
 53c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 540:	2f737265 	svccs	0x00737265
 544:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
 548:	442f6669 	strtmi	r6, [pc], #-1641	; 550 <startup-0x1ffffab0>
 54c:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 550:	73746e65 	cmnvc	r4, #1616	; 0x650
 554:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 558:	472f3562 	strmi	r3, [pc, -r2, ror #10]!
 55c:	32656d61 	rsbcc	r6, r5, #6208	; 0x1840
 560:	2f383430 	svccs	0x00383430
 564:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
 568:	675f6d6f 	ldrbvs	r6, [pc, -pc, ror #26]
 56c:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
 570:	726f7461 	rsbvc	r7, pc, #1627389952	; 0x61000000
 574:	7300632e 	movwvc	r6, #814	; 0x32e
 578:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
 57c:	00646565 	rsbeq	r6, r4, r5, ror #10
 580:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 584:	6f675f69 	svcvs	0x00675f69
 588:	59586f54 	ldmdbpl	r8, {r2, r4, r6, r8, r9, sl, fp, sp, lr}^
 58c:	63736100 	cmnvs	r3, #0, 2
 590:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 594:	5f646165 	svcpl	0x00646165
 598:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 59c:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 5a0:	61007265 	tstvs	r0, r5, ror #4
 5a4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 5a8:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 5ac:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 5b0:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 5b4:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 5b8:	64610072 	strbtvs	r0, [r1], #-114	; 0xffffff8e
 5bc:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 5c0:	73610073 	cmnvc	r1, #115	; 0x73
 5c4:	5f696963 	svcpl	0x00696963
 5c8:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 5cc:	6174735f 	cmnvs	r4, pc, asr r3
 5d0:	00737574 	rsbseq	r7, r3, r4, ror r5
 5d4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 5d8:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 5dc:	5f657469 	svcpl	0x00657469
 5e0:	00646d63 	rsbeq	r6, r4, r3, ror #26
 5e4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 5e8:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 5ec:	5f657469 	svcpl	0x00657469
 5f0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 5f4:	63736100 	cmnvs	r3, #0, 2
 5f8:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 5fc:	5f646165 	svcpl	0x00646165
 600:	61746164 	cmnvs	r4, r4, ror #2
 604:	2f3a4300 	svccs	0x003a4300
 608:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 60c:	616c2f73 	smcvs	49907	; 0xc2f3
 610:	66696974 			; <UNDEFINED> instruction: 0x66696974
 614:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 618:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 61c:	4c2f7374 	stcmi	3, cr7, [pc], #-464	; 454 <startup-0x1ffffbac>
 620:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
 624:	6d61472f 	stclvs	7, cr4, [r1, #-188]!	; 0xffffff44
 628:	34303265 	ldrtcc	r3, [r0], #-613	; 0xfffffd9b
 62c:	73612f38 	cmnvc	r1, #56, 30	; 0xe0
 630:	2e696963 	vnmulcs.f16	s13, s18, s7	; <UNPREDICTABLE>
 634:	73610063 	cmnvc	r1, #99	; 0x63
 638:	5f696963 	svcpl	0x00696963
 63c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 640:	61645f65 	cmnvs	r4, r5, ror #30
 644:	61006174 	tstvs	r0, r4, ror r1
 648:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 64c:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 650:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 654:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 658:	00726165 	rsbseq	r6, r2, r5, ror #2
 65c:	756c6f63 	strbvc	r6, [ip, #-3939]!	; 0xfffff09d
 660:	61006e6d 	tstvs	r0, sp, ror #28
 664:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 668:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 66c:	735f6574 	cmpvc	pc, #116, 10	; 0x1d000000
 670:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
 674:	6c630067 	stclvs	0, cr0, [r3], #-412	; 0xfffffe64
 678:	5f726165 	svcpl	0x00726165
 67c:	70736964 	rsbsvc	r6, r3, r4, ror #18
 680:	63736100 	cmnvs	r3, #0, 2
 684:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 688:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 68c:	6168635f 	cmnvs	r8, pc, asr r3
 690:	73610072 	cmnvc	r1, #114	; 0x72
 694:	5f696963 	svcpl	0x00696963
 698:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 69c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 6a0:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 6a4:	776f7000 	strbvc	r7, [pc, -r0]!
 6a8:	Address 0x000006a8 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000020 	andeq	r0, r0, r0, lsr #32
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	000000c0 	andeq	r0, r0, r0, asr #1
  30:	400c0e41 	andmi	r0, ip, r1, asr #28
  34:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  38:	018e4002 	orreq	r4, lr, r2
  3c:	41180e41 	tstmi	r8, r1, asr #28
  40:	0000070d 	andeq	r0, r0, sp, lsl #14
  44:	00000018 	andeq	r0, r0, r8, lsl r0
  48:	00000000 	andeq	r0, r0, r0
  4c:	200000d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  50:	00000024 	andeq	r0, r0, r4, lsr #32
  54:	40080e41 	andmi	r0, r8, r1, asr #28
  58:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  5c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  60:	00000018 	andeq	r0, r0, r8, lsl r0
  64:	00000000 	andeq	r0, r0, r0
  68:	200000f4 	strdcs	r0, [r0], -r4
  6c:	00000024 	andeq	r0, r0, r4, lsr #32
  70:	40080e41 	andmi	r0, r8, r1, asr #28
  74:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  78:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  7c:	00000018 	andeq	r0, r0, r8, lsl r0
  80:	00000000 	andeq	r0, r0, r0
  84:	20000118 	andcs	r0, r0, r8, lsl r1
  88:	0000002e 	andeq	r0, r0, lr, lsr #32
  8c:	40080e41 	andmi	r0, r8, r1, asr #28
  90:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  94:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  98:	0000000c 	andeq	r0, r0, ip
  9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  a0:	7c020001 	stcvc	0, cr0, [r2], {1}
  a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  a8:	00000018 	andeq	r0, r0, r8, lsl r0
  ac:	00000098 	muleq	r0, r8, r0
  b0:	20000148 	andcs	r0, r0, r8, asr #2
  b4:	00000014 	andeq	r0, r0, r4, lsl r0
  b8:	40080e41 	andmi	r0, r8, r1, asr #28
  bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  c4:	0000001c 	andeq	r0, r0, ip, lsl r0
  c8:	00000098 	muleq	r0, r8, r0
  cc:	2000015c 	andcs	r0, r0, ip, asr r1
  d0:	0000005c 	andeq	r0, r0, ip, asr r0
  d4:	40080e41 	andmi	r0, r8, r1, asr #28
  d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  dc:	180e4101 	stmdane	lr, {r0, r8, lr}
  e0:	00070d41 	andeq	r0, r7, r1, asr #26
  e4:	0000001c 	andeq	r0, r0, ip, lsl r0
  e8:	00000098 	muleq	r0, r8, r0
  ec:	200001b8 			; <UNDEFINED> instruction: 0x200001b8
  f0:	00000058 	andeq	r0, r0, r8, asr r0
  f4:	40080e41 	andmi	r0, r8, r1, asr #28
  f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  fc:	180e4101 	stmdane	lr, {r0, r8, lr}
 100:	00070d41 	andeq	r0, r7, r1, asr #26
 104:	0000001c 	andeq	r0, r0, ip, lsl r0
 108:	00000098 	muleq	r0, r8, r0
 10c:	20000210 	andcs	r0, r0, r0, lsl r2
 110:	0000005a 	andeq	r0, r0, sl, asr r0
 114:	40080e41 	andmi	r0, r8, r1, asr #28
 118:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 11c:	100e4101 	andne	r4, lr, r1, lsl #2
 120:	00070d41 	andeq	r0, r7, r1, asr #26
 124:	00000018 	andeq	r0, r0, r8, lsl r0
 128:	00000098 	muleq	r0, r8, r0
 12c:	2000026a 	andcs	r0, r0, sl, ror #4
 130:	0000005c 	andeq	r0, r0, ip, asr r0
 134:	40080e41 	andmi	r0, r8, r1, asr #28
 138:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 13c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	00000098 	muleq	r0, r8, r0
 148:	200002c6 	andcs	r0, r0, r6, asr #5
 14c:	0000007a 	andeq	r0, r0, sl, ror r0
 150:	40080e41 	andmi	r0, r8, r1, asr #28
 154:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 158:	100e4101 	andne	r4, lr, r1, lsl #2
 15c:	00070d41 	andeq	r0, r7, r1, asr #26
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	00000098 	muleq	r0, r8, r0
 168:	20000340 	andcs	r0, r0, r0, asr #6
 16c:	0000009c 	muleq	r0, ip, r0
 170:	40080e41 	andmi	r0, r8, r1, asr #28
 174:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 178:	180e4101 	stmdane	lr, {r0, r8, lr}
 17c:	00070d41 	andeq	r0, r7, r1, asr #26
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	00000098 	muleq	r0, r8, r0
 188:	200003dc 	ldrdcs	r0, [r0], -ip
 18c:	0000002a 	andeq	r0, r0, sl, lsr #32
 190:	40080e41 	andmi	r0, r8, r1, asr #28
 194:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 198:	100e4101 	andne	r4, lr, r1, lsl #2
 19c:	00070d41 	andeq	r0, r7, r1, asr #26
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	00000098 	muleq	r0, r8, r0
 1a8:	20000406 	andcs	r0, r0, r6, lsl #8
 1ac:	00000076 	andeq	r0, r0, r6, ror r0
 1b0:	40080e41 	andmi	r0, r8, r1, asr #28
 1b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b8:	100e4101 	andne	r4, lr, r1, lsl #2
 1bc:	00070d41 	andeq	r0, r7, r1, asr #26
 1c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c4:	00000098 	muleq	r0, r8, r0
 1c8:	2000047c 	andcs	r0, r0, ip, ror r4
 1cc:	00000040 	andeq	r0, r0, r0, asr #32
 1d0:	40080e41 	andmi	r0, r8, r1, asr #28
 1d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d8:	100e4101 	andne	r4, lr, r1, lsl #2
 1dc:	00070d41 	andeq	r0, r7, r1, asr #26
 1e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e4:	00000098 	muleq	r0, r8, r0
 1e8:	200004bc 			; <UNDEFINED> instruction: 0x200004bc
 1ec:	00000046 	andeq	r0, r0, r6, asr #32
 1f0:	40080e41 	andmi	r0, r8, r1, asr #28
 1f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f8:	100e4101 	andne	r4, lr, r1, lsl #2
 1fc:	00070d41 	andeq	r0, r7, r1, asr #26
 200:	00000018 	andeq	r0, r0, r8, lsl r0
 204:	00000098 	muleq	r0, r8, r0
 208:	20000502 	andcs	r0, r0, r2, lsl #10
 20c:	0000000a 	andeq	r0, r0, sl
 210:	40080e41 	andmi	r0, r8, r1, asr #28
 214:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 218:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 21c:	00000018 	andeq	r0, r0, r8, lsl r0
 220:	00000098 	muleq	r0, r8, r0
 224:	2000050c 	andcs	r0, r0, ip, lsl #10
 228:	00000054 	andeq	r0, r0, r4, asr r0
 22c:	40080e41 	andmi	r0, r8, r1, asr #28
 230:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 234:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	00000098 	muleq	r0, r8, r0
 240:	20000560 	andcs	r0, r0, r0, ror #10
 244:	0000002c 	andeq	r0, r0, ip, lsr #32
 248:	40080e41 	andmi	r0, r8, r1, asr #28
 24c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 250:	100e4101 	andne	r4, lr, r1, lsl #2
 254:	00070d41 	andeq	r0, r7, r1, asr #26
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	00000098 	muleq	r0, r8, r0
 260:	2000058c 	andcs	r0, r0, ip, lsl #11
 264:	00000022 	andeq	r0, r0, r2, lsr #32
 268:	40080e41 	andmi	r0, r8, r1, asr #28
 26c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 270:	100e4101 	andne	r4, lr, r1, lsl #2
 274:	00070d41 	andeq	r0, r7, r1, asr #26
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	00000098 	muleq	r0, r8, r0
 280:	200005ae 	andcs	r0, r0, lr, lsr #11
 284:	00000036 	andeq	r0, r0, r6, lsr r0
 288:	40080e41 	andmi	r0, r8, r1, asr #28
 28c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 290:	100e4101 	andne	r4, lr, r1, lsl #2
 294:	00070d41 	andeq	r0, r7, r1, asr #26
 298:	0000001c 	andeq	r0, r0, ip, lsl r0
 29c:	00000098 	muleq	r0, r8, r0
 2a0:	200005e4 	andcs	r0, r0, r4, ror #11
 2a4:	000000a0 	andeq	r0, r0, r0, lsr #1
 2a8:	40080e41 	andmi	r0, r8, r1, asr #28
 2ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b0:	180e4101 	stmdane	lr, {r0, r8, lr}
 2b4:	00070d41 	andeq	r0, r7, r1, asr #26
 2b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2bc:	00000098 	muleq	r0, r8, r0
 2c0:	20000684 	andcs	r0, r0, r4, lsl #13
 2c4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 2c8:	40080e41 	andmi	r0, r8, r1, asr #28
 2cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d0:	180e4101 	stmdane	lr, {r0, r8, lr}
 2d4:	00070d41 	andeq	r0, r7, r1, asr #26
 2d8:	0000000c 	andeq	r0, r0, ip
 2dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2e0:	7c020001 	stcvc	0, cr0, [r2], {1}
 2e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2e8:	00000018 	andeq	r0, r0, r8, lsl r0
 2ec:	000002d8 	ldrdeq	r0, [r0], -r8
 2f0:	20000754 	andcs	r0, r0, r4, asr r7
 2f4:	00000040 	andeq	r0, r0, r0, asr #32
 2f8:	40080e41 	andmi	r0, r8, r1, asr #28
 2fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 300:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 304:	0000001c 	andeq	r0, r0, ip, lsl r0
 308:	000002d8 	ldrdeq	r0, [r0], -r8
 30c:	20000794 	mulcs	r0, r4, r7
 310:	00000054 	andeq	r0, r0, r4, asr r0
 314:	40080e41 	andmi	r0, r8, r1, asr #28
 318:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 31c:	100e4101 	andne	r4, lr, r1, lsl #2
 320:	00070d41 	andeq	r0, r7, r1, asr #26
 324:	0000001c 	andeq	r0, r0, ip, lsl r0
 328:	000002d8 	ldrdeq	r0, [r0], -r8
 32c:	200007e8 	andcs	r0, r0, r8, ror #15
 330:	00000054 	andeq	r0, r0, r4, asr r0
 334:	40080e41 	andmi	r0, r8, r1, asr #28
 338:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 33c:	100e4101 	andne	r4, lr, r1, lsl #2
 340:	00070d41 	andeq	r0, r7, r1, asr #26
 344:	00000020 	andeq	r0, r0, r0, lsr #32
 348:	000002d8 	ldrdeq	r0, [r0], -r8
 34c:	2000083c 	andcs	r0, r0, ip, lsr r8
 350:	00000068 	andeq	r0, r0, r8, rrx
 354:	400c0e41 	andmi	r0, ip, r1, asr #28
 358:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 35c:	018e4002 	orreq	r4, lr, r2
 360:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 364:	0000070d 	andeq	r0, r0, sp, lsl #14
 368:	0000000c 	andeq	r0, r0, ip
 36c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 370:	7c020001 	stcvc	0, cr0, [r2], {1}
 374:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 378:	0000001c 	andeq	r0, r0, ip, lsl r0
 37c:	00000368 	andeq	r0, r0, r8, ror #6
 380:	200008a4 	andcs	r0, r0, r4, lsr #17
 384:	00000288 	andeq	r0, r0, r8, lsl #5
 388:	40080e41 	andmi	r0, r8, r1, asr #28
 38c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 390:	400e4101 	andmi	r4, lr, r1, lsl #2
 394:	00070d41 	andeq	r0, r7, r1, asr #26
 398:	0000001c 	andeq	r0, r0, ip, lsl r0
 39c:	00000368 	andeq	r0, r0, r8, ror #6
 3a0:	20000b2c 	andcs	r0, r0, ip, lsr #22
 3a4:	000003ac 	andeq	r0, r0, ip, lsr #7
 3a8:	40080e41 	andmi	r0, r8, r1, asr #28
 3ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3b0:	300e4101 	andcc	r4, lr, r1, lsl #2
 3b4:	00070d41 	andeq	r0, r7, r1, asr #26
 3b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3bc:	00000368 	andeq	r0, r0, r8, ror #6
 3c0:	20000ed8 	ldrdcs	r0, [r0], -r8
 3c4:	000000cc 	andeq	r0, r0, ip, asr #1
 3c8:	40080e41 	andmi	r0, r8, r1, asr #28
 3cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3d0:	180e4101 	stmdane	lr, {r0, r8, lr}
 3d4:	00070d41 	andeq	r0, r7, r1, asr #26
 3d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3dc:	00000368 	andeq	r0, r0, r8, ror #6
 3e0:	20000fa4 	andcs	r0, r0, r4, lsr #31
 3e4:	0000003c 	andeq	r0, r0, ip, lsr r0
 3e8:	40080e41 	andmi	r0, r8, r1, asr #28
 3ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3f0:	100e4101 	andne	r4, lr, r1, lsl #2
 3f4:	00070d41 	andeq	r0, r7, r1, asr #26
 3f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3fc:	00000368 	andeq	r0, r0, r8, ror #6
 400:	20000fe0 	andcs	r0, r0, r0, ror #31
 404:	0000004c 	andeq	r0, r0, ip, asr #32
 408:	40080e41 	andmi	r0, r8, r1, asr #28
 40c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 410:	100e4101 	andne	r4, lr, r1, lsl #2
 414:	00070d41 	andeq	r0, r7, r1, asr #26
 418:	0000001c 	andeq	r0, r0, ip, lsl r0
 41c:	00000368 	andeq	r0, r0, r8, ror #6
 420:	2000102c 	andcs	r1, r0, ip, lsr #32
 424:	00000050 	andeq	r0, r0, r0, asr r0
 428:	40080e41 	andmi	r0, r8, r1, asr #28
 42c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 430:	100e4101 	andne	r4, lr, r1, lsl #2
 434:	00070d41 	andeq	r0, r7, r1, asr #26
 438:	0000001c 	andeq	r0, r0, ip, lsl r0
 43c:	00000368 	andeq	r0, r0, r8, ror #6
 440:	2000107c 	andcs	r1, r0, ip, ror r0
 444:	000000d6 	ldrdeq	r0, [r0], -r6
 448:	40080e41 	andmi	r0, r8, r1, asr #28
 44c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 450:	400e4101 	andmi	r4, lr, r1, lsl #2
 454:	00070d41 	andeq	r0, r7, r1, asr #26
 458:	0000001c 	andeq	r0, r0, ip, lsl r0
 45c:	00000368 	andeq	r0, r0, r8, ror #6
 460:	20001152 	andcs	r1, r0, r2, asr r1
 464:	00000086 	andeq	r0, r0, r6, lsl #1
 468:	40080e41 	andmi	r0, r8, r1, asr #28
 46c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 470:	100e4101 	andne	r4, lr, r1, lsl #2
 474:	00070d41 	andeq	r0, r7, r1, asr #26
 478:	0000001c 	andeq	r0, r0, ip, lsl r0
 47c:	00000368 	andeq	r0, r0, r8, ror #6
 480:	200011d8 	ldrdcs	r1, [r0], -r8
 484:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 488:	40080e41 	andmi	r0, r8, r1, asr #28
 48c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 490:	180e4101 	stmdane	lr, {r0, r8, lr}
 494:	00070d41 	andeq	r0, r7, r1, asr #26
 498:	0000001c 	andeq	r0, r0, ip, lsl r0
 49c:	00000368 	andeq	r0, r0, r8, ror #6
 4a0:	20001288 	andcs	r1, r0, r8, lsl #5
 4a4:	000000c4 	andeq	r0, r0, r4, asr #1
 4a8:	40080e41 	andmi	r0, r8, r1, asr #28
 4ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4b0:	300e4101 	andcc	r4, lr, r1, lsl #2
 4b4:	00070d41 	andeq	r0, r7, r1, asr #26
 4b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4bc:	00000368 	andeq	r0, r0, r8, ror #6
 4c0:	2000134c 	andcs	r1, r0, ip, asr #6
 4c4:	00000020 	andeq	r0, r0, r0, lsr #32
 4c8:	40080e41 	andmi	r0, r8, r1, asr #28
 4cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4d0:	100e4101 	andne	r4, lr, r1, lsl #2
 4d4:	00070d41 	andeq	r0, r7, r1, asr #26
 4d8:	00000018 	andeq	r0, r0, r8, lsl r0
 4dc:	00000368 	andeq	r0, r0, r8, ror #6
 4e0:	2000136c 	andcs	r1, r0, ip, ror #6
 4e4:	00000014 	andeq	r0, r0, r4, lsl r0
 4e8:	40080e41 	andmi	r0, r8, r1, asr #28
 4ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4f0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 4f4:	0000000c 	andeq	r0, r0, ip
 4f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4fc:	7c020001 	stcvc	0, cr0, [r2], {1}
 500:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 504:	00000018 	andeq	r0, r0, r8, lsl r0
 508:	000004f4 	strdeq	r0, [r0], -r4
 50c:	20001380 	andcs	r1, r0, r0, lsl #7
 510:	00000064 	andeq	r0, r0, r4, rrx
 514:	40080e41 	andmi	r0, r8, r1, asr #28
 518:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 51c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 520:	0000001c 	andeq	r0, r0, ip, lsl r0
 524:	000004f4 	strdeq	r0, [r0], -r4
 528:	200013e4 	andcs	r1, r0, r4, ror #7
 52c:	00000034 	andeq	r0, r0, r4, lsr r0
 530:	40080e41 	andmi	r0, r8, r1, asr #28
 534:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 538:	180e4101 	stmdane	lr, {r0, r8, lr}
 53c:	00070d41 	andeq	r0, r7, r1, asr #26
 540:	0000001c 	andeq	r0, r0, ip, lsl r0
 544:	000004f4 	strdeq	r0, [r0], -r4
 548:	20001418 	andcs	r1, r0, r8, lsl r4
 54c:	00000020 	andeq	r0, r0, r0, lsr #32
 550:	40080e41 	andmi	r0, r8, r1, asr #28
 554:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 558:	100e4101 	andne	r4, lr, r1, lsl #2
 55c:	00070d41 	andeq	r0, r7, r1, asr #26
 560:	0000000c 	andeq	r0, r0, ip
 564:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 568:	7c020001 	stcvc	0, cr0, [r2], {1}
 56c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 570:	00000018 	andeq	r0, r0, r8, lsl r0
 574:	00000560 	andeq	r0, r0, r0, ror #10
 578:	20001438 	andcs	r1, r0, r8, lsr r4
 57c:	00000084 	andeq	r0, r0, r4, lsl #1
 580:	40080e41 	andmi	r0, r8, r1, asr #28
 584:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 588:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 58c:	0000001c 	andeq	r0, r0, ip, lsl r0
 590:	00000560 	andeq	r0, r0, r0, ror #10
 594:	200014bc 			; <UNDEFINED> instruction: 0x200014bc
 598:	00000044 	andeq	r0, r0, r4, asr #32
 59c:	40080e41 	andmi	r0, r8, r1, asr #28
 5a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 5a8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 5b0:	00000560 	andeq	r0, r0, r0, ror #10
 5b4:	20001500 	andcs	r1, r0, r0, lsl #10
 5b8:	00000050 	andeq	r0, r0, r0, asr r0
 5bc:	40080e41 	andmi	r0, r8, r1, asr #28
 5c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 5c8:	00070d41 	andeq	r0, r7, r1, asr #26
 5cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5d0:	00000560 	andeq	r0, r0, r0, ror #10
 5d4:	20001550 	andcs	r1, r0, r0, asr r5
 5d8:	0000002a 	andeq	r0, r0, sl, lsr #32
 5dc:	40080e41 	andmi	r0, r8, r1, asr #28
 5e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5e4:	100e4101 	andne	r4, lr, r1, lsl #2
 5e8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 5f0:	00000560 	andeq	r0, r0, r0, ror #10
 5f4:	2000157a 	andcs	r1, r0, sl, ror r5
 5f8:	0000002a 	andeq	r0, r0, sl, lsr #32
 5fc:	40080e41 	andmi	r0, r8, r1, asr #28
 600:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 604:	100e4101 	andne	r4, lr, r1, lsl #2
 608:	00070d41 	andeq	r0, r7, r1, asr #26
 60c:	00000018 	andeq	r0, r0, r8, lsl r0
 610:	00000560 	andeq	r0, r0, r0, ror #10
 614:	200015a4 	andcs	r1, r0, r4, lsr #11
 618:	0000002e 	andeq	r0, r0, lr, lsr #32
 61c:	40080e41 	andmi	r0, r8, r1, asr #28
 620:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 624:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 628:	00000020 	andeq	r0, r0, r0, lsr #32
 62c:	00000560 	andeq	r0, r0, r0, ror #10
 630:	200015d2 	ldrdcs	r1, [r0], -r2
 634:	00000056 	andeq	r0, r0, r6, asr r0
 638:	400c0e41 	andmi	r0, ip, r1, asr #28
 63c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 640:	018e4002 	orreq	r4, lr, r2
 644:	41180e41 	tstmi	r8, r1, asr #28
 648:	0000070d 	andeq	r0, r0, sp, lsl #14
 64c:	00000020 	andeq	r0, r0, r0, lsr #32
 650:	00000560 	andeq	r0, r0, r0, ror #10
 654:	20001628 	andcs	r1, r0, r8, lsr #12
 658:	00000054 	andeq	r0, r0, r4, asr r0
 65c:	400c0e41 	andmi	r0, ip, r1, asr #28
 660:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 664:	018e4002 	orreq	r4, lr, r2
 668:	41180e41 	tstmi	r8, r1, asr #28
 66c:	0000070d 	andeq	r0, r0, sp, lsl #14
 670:	0000001c 	andeq	r0, r0, ip, lsl r0
 674:	00000560 	andeq	r0, r0, r0, ror #10
 678:	2000167c 	andcs	r1, r0, ip, ror r6
 67c:	00000030 	andeq	r0, r0, r0, lsr r0
 680:	40080e41 	andmi	r0, r8, r1, asr #28
 684:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 688:	100e4101 	andne	r4, lr, r1, lsl #2
 68c:	00070d41 	andeq	r0, r7, r1, asr #26
 690:	0000001c 	andeq	r0, r0, ip, lsl r0
 694:	00000560 	andeq	r0, r0, r0, ror #10
 698:	200016ac 	andcs	r1, r0, ip, lsr #13
 69c:	00000034 	andeq	r0, r0, r4, lsr r0
 6a0:	40080e41 	andmi	r0, r8, r1, asr #28
 6a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6a8:	100e4101 	andne	r4, lr, r1, lsl #2
 6ac:	00070d41 	andeq	r0, r7, r1, asr #26
 6b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6b4:	00000560 	andeq	r0, r0, r0, ror #10
 6b8:	200016e0 	andcs	r1, r0, r0, ror #13
 6bc:	0000003c 	andeq	r0, r0, ip, lsr r0
 6c0:	40080e41 	andmi	r0, r8, r1, asr #28
 6c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6c8:	100e4101 	andne	r4, lr, r1, lsl #2
 6cc:	00070d41 	andeq	r0, r7, r1, asr #26
 6d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6d4:	00000560 	andeq	r0, r0, r0, ror #10
 6d8:	2000171c 	andcs	r1, r0, ip, lsl r7
 6dc:	00000034 	andeq	r0, r0, r4, lsr r0
 6e0:	40080e41 	andmi	r0, r8, r1, asr #28
 6e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6e8:	100e4101 	andne	r4, lr, r1, lsl #2
 6ec:	00070d41 	andeq	r0, r7, r1, asr #26
 6f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6f4:	00000560 	andeq	r0, r0, r0, ror #10
 6f8:	20001750 	andcs	r1, r0, r0, asr r7
 6fc:	00000050 	andeq	r0, r0, r0, asr r0
 700:	40080e41 	andmi	r0, r8, r1, asr #28
 704:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 708:	180e4101 	stmdane	lr, {r0, r8, lr}
 70c:	00070d41 	andeq	r0, r7, r1, asr #26
 710:	0000001c 	andeq	r0, r0, ip, lsl r0
 714:	00000560 	andeq	r0, r0, r0, ror #10
 718:	200017a0 	andcs	r1, r0, r0, lsr #15
 71c:	000000a0 	andeq	r0, r0, r0, lsr #1
 720:	40080e41 	andmi	r0, r8, r1, asr #28
 724:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 728:	180e4101 	stmdane	lr, {r0, r8, lr}
 72c:	00070d41 	andeq	r0, r7, r1, asr #26
 730:	0000000c 	andeq	r0, r0, ip
 734:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 738:	7c010001 	stcvc	0, cr0, [r1], {1}
 73c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 740:	0000000c 	andeq	r0, r0, ip
 744:	00000730 	andeq	r0, r0, r0, lsr r7
 748:	20001841 	andcs	r1, r0, r1, asr #16
 74c:	0000010a 	andeq	r0, r0, sl, lsl #2
 750:	0000000c 	andeq	r0, r0, ip
 754:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 758:	7c010001 	stcvc	0, cr0, [r1], {1}
 75c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 760:	0000000c 	andeq	r0, r0, ip
 764:	00000750 	andeq	r0, r0, r0, asr r7
 768:	20001955 	andcs	r1, r0, r5, asr r9
 76c:	000001cc 	andeq	r0, r0, ip, asr #3
